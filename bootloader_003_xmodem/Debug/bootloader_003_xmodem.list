
bootloader_003_xmodem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f2c  08003f2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f34  08003f34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000f4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e95  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d03  00000000  00000000  00029f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000788  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd62  00000000  00000000  0002cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f7c  00000000  00000000  0004c96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0f27  00000000  00000000  000568e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011780d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024bc  00000000  00000000  00117860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e04 	.word	0x08003e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003e04 	.word	0x08003e04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <bootloader_jump_to_user_code>:
#include "main.h"
#include "xmodem.h"

//#define UPDATE_OVER_UART

BL_StatusTypedef bootloader_jump_to_user_code(UART_HandleTypeDef*BL_UART){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	if(bootloader_signature_get_reset_flag(BL_UART))
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f961 	bl	8000c6c <bootloader_signature_get_reset_flag>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d034      	beq.n	8000a1a <bootloader_jump_to_user_code+0x7e>
				return BL_ERROR;
			}
		}
#else
		uint8_t input;
		HAL_UART_Transmit(huart5, "Update available press switch for update\n\r", 44, HAL_MAX_DELAY);
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	222c      	movs	r2, #44	; 0x2c
 80009b6:	4924      	ldr	r1, [pc, #144]	; (8000a48 <bootloader_jump_to_user_code+0xac>)
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 f96c 	bl	8002c96 <HAL_UART_Transmit>

		uint32_t lasttick= HAL_GetTick();
 80009be:	f000 ff2d 	bl	800181c <HAL_GetTick>
 80009c2:	6178      	str	r0, [r7, #20]


		while((HAL_GetTick() - lasttick) <= 5000 ){
 80009c4:	e020      	b.n	8000a08 <bootloader_jump_to_user_code+0x6c>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==SET)
 80009c6:	2101      	movs	r1, #1
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <bootloader_jump_to_user_code+0xb0>)
 80009ca:	f001 fc8d 	bl	80022e8 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d119      	bne.n	8000a08 <bootloader_jump_to_user_code+0x6c>
		{
			/*update application area*/
			if(bootloader_app_update(BL_UART)==BL_OK){
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f95b 	bl	8000c90 <bootloader_app_update>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10a      	bne.n	80009f6 <bootloader_jump_to_user_code+0x5a>
				/*change flag in signature area*/
				bootloader_update_signature_reset_flag(huart5);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f8eb 	bl	8000bbc <bootloader_update_signature_reset_flag>
				HAL_UART_Transmit(huart5, "Updated\n", strlen("Updated"), HAL_MAX_DELAY);
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	2207      	movs	r2, #7
 80009ec:	4918      	ldr	r1, [pc, #96]	; (8000a50 <bootloader_jump_to_user_code+0xb4>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f002 f951 	bl	8002c96 <HAL_UART_Transmit>
				break;
 80009f4:	e011      	b.n	8000a1a <bootloader_jump_to_user_code+0x7e>
			}
			else{
				HAL_UART_Transmit(huart5, "Update Failed",strlen("Update Failed"), HAL_MAX_DELAY);
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	220d      	movs	r2, #13
 80009fc:	4915      	ldr	r1, [pc, #84]	; (8000a54 <bootloader_jump_to_user_code+0xb8>)
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f002 f949 	bl	8002c96 <HAL_UART_Transmit>
				return BL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e01a      	b.n	8000a3e <bootloader_jump_to_user_code+0xa2>
		while((HAL_GetTick() - lasttick) <= 5000 ){
 8000a08:	f000 ff08 	bl	800181c <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d9d5      	bls.n	80009c6 <bootloader_jump_to_user_code+0x2a>
	}

//	bootloader_unlock_flash();

	//set msp
	uint32_t msp_value=*(uint32_t*)FLASH_APPLICATION_AREA;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <bootloader_jump_to_user_code+0xbc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	f383 8808 	msr	MSP, r3
}
 8000a2a:	bf00      	nop
	__set_MSP(msp_value);

	//relocate vector table
	SCB->VTOR=(__IOM uint32_t)FLASH_APPLICATION_AREA;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <bootloader_jump_to_user_code+0xc0>)
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <bootloader_jump_to_user_code+0xbc>)
 8000a30:	609a      	str	r2, [r3, #8]

	//create function pointer for reset handler
	void(*reset_handler)(void);

	reset_handler=(void(*)(void))(*(uint32_t *)(FLASH_APPLICATION_AREA+4U));
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <bootloader_jump_to_user_code+0xc4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	60fb      	str	r3, [r7, #12]

	reset_handler();
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4798      	blx	r3

	return BL_ERROR;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08003e1c 	.word	0x08003e1c
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	08003e48 	.word	0x08003e48
 8000a54:	08003e54 	.word	0x08003e54
 8000a58:	08010000 	.word	0x08010000
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	08010004 	.word	0x08010004

08000a64 <bootloader_get_bl_version>:

/*********Bootloader Command Functions*****************************/

BL_StatusTypedef bootloader_get_bl_version(UART_HandleTypeDef*BL_UART)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

}
 8000a6c:	bf00      	nop
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <bootloader_write_bin_to_memory>:

/*write binary file to DOWNLOAD area*/
BL_StatusTypedef bootloader_write_bin_to_memory(uint8_t *rxbuf ,int size)
{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	static uint32_t address=FLASH_DOWNLOAD_AREA;

	HAL_FLASH_Unlock();
 8000a86:	f001 f80f 	bl	8001aa8 <HAL_FLASH_Unlock>

	int i=0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
	while(i < size){
 8000a8e:	e01a      	b.n	8000ac6 <bootloader_write_bin_to_memory+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,address++, *(rxbuf+i)) == HAL_OK ){
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <bootloader_write_bin_to_memory+0x60>)
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	1c4b      	adds	r3, r1, #1
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <bootloader_write_bin_to_memory+0x60>)
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	461c      	mov	r4, r3
 8000aa8:	4615      	mov	r5, r2
 8000aaa:	4622      	mov	r2, r4
 8000aac:	462b      	mov	r3, r5
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 ffa6 	bl	8001a00 <HAL_FLASH_Program>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <bootloader_write_bin_to_memory+0x46>
			i++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e001      	b.n	8000ac6 <bootloader_write_bin_to_memory+0x4a>
		}
		else{
			return BL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e006      	b.n	8000ad4 <bootloader_write_bin_to_memory+0x58>
	while(i < size){
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbe0      	blt.n	8000a90 <bootloader_write_bin_to_memory+0x14>
		}
	}

	HAL_FLASH_Lock();
 8000ace:	f001 f80d 	bl	8001aec <HAL_FLASH_Lock>
	return BL_OK;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bdb0      	pop	{r4, r5, r7, pc}
 8000adc:	20000000 	.word	0x20000000

08000ae0 <bootloader_flash_erase_signature_area>:


BL_StatusTypedef bootloader_flash_erase_signature_area(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0



	/*erase flash*/
	HAL_FLASH_Unlock();
 8000ae4:	f000 ffe0 	bl	8001aa8 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_3,FLASH_VOLTAGE_RANGE_3);
 8000ae8:	2102      	movs	r1, #2
 8000aea:	2003      	movs	r0, #3
 8000aec:	f001 f9d2 	bl	8001e94 <FLASH_Erase_Sector>

	HAL_FLASH_Lock();
 8000af0:	f000 fffc 	bl	8001aec <HAL_FLASH_Lock>

	return BL_OK;
 8000af4:	2300      	movs	r3, #0

}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}

08000afa <bootloader_flash_erase_download_area>:

BL_StatusTypedef bootloader_flash_erase_download_area(){
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialise flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000b10:	f000 ffca 	bl	8001aa8 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000b14:	f107 0214 	add.w	r2, r7, #20
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f925 	bl	8001d6c <HAL_FLASHEx_Erase>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <bootloader_flash_erase_download_area+0x32>
		return BL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e002      	b.n	8000b32 <bootloader_flash_erase_download_area+0x38>
	}
	HAL_FLASH_Lock();
 8000b2c:	f000 ffde 	bl	8001aec <HAL_FLASH_Lock>

	return BL_OK;
 8000b30:	2300      	movs	r3, #0

}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <bootloader_flash_erase_application_area>:


BL_StatusTypedef bootloader_flash_erase_application_area(){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialize flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000b50:	f000 ffaa 	bl	8001aa8 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000b54:	f107 0214 	add.w	r2, r7, #20
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 f905 	bl	8001d6c <HAL_FLASHEx_Erase>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <bootloader_flash_erase_application_area+0x32>
		return BL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e002      	b.n	8000b72 <bootloader_flash_erase_application_area+0x38>
	}
	HAL_FLASH_Lock();
 8000b6c:	f000 ffbe 	bl	8001aec <HAL_FLASH_Lock>

	return BL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <bootloader_update_signature_set_flag>:

BL_StatusTypedef bootloader_read_memory(UART_HandleTypeDef*BL_UART){

}

BL_StatusTypedef bootloader_update_signature_set_flag(UART_HandleTypeDef*BL_UART){
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000b84:	f000 f8ba 	bl	8000cfc <bootloader_unlock_flash>
	/*update signature*/
	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <bootloader_update_signature_set_flag+0x3c>)
 8000b8a:	f107 0408 	add.w	r4, r7, #8
 8000b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
	bootloader_flash_erase_signature_area();
 8000b98:	f7ff ffa2 	bl	8000ae0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <bootloader_update_signature_set_flag+0x3c>)
 8000b9e:	461c      	mov	r4, r3
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	bootloader_lock_flash();
 8000baa:	f000 f8c3 	bl	8000d34 <bootloader_lock_flash>
}
 8000bae:	bf00      	nop
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	371c      	adds	r7, #28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	0800c000 	.word	0x0800c000

08000bbc <bootloader_update_signature_reset_flag>:

BL_StatusTypedef bootloader_update_signature_reset_flag(UART_HandleTypeDef*BL_UART){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000bc4:	f000 f89a 	bl	8000cfc <bootloader_unlock_flash>
	/*update signature*/
	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <bootloader_update_signature_reset_flag+0x3c>)
 8000bca:	f107 0408 	add.w	r4, r7, #8
 8000bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
	bootloader_flash_erase_signature_area();
 8000bd8:	f7ff ff82 	bl	8000ae0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <bootloader_update_signature_reset_flag+0x3c>)
 8000bde:	461c      	mov	r4, r3
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bootloader_lock_flash();
 8000bea:	f000 f8a3 	bl	8000d34 <bootloader_lock_flash>
}
 8000bee:	bf00      	nop
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	0800c000 	.word	0x0800c000
 8000bfc:	00000000 	.word	0x00000000

08000c00 <bootloader_update_signature_app_version>:
BL_StatusTypedef bootloader_update_signature_app_version(UART_HandleTypeDef*BL_UART){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000c08:	f000 f878 	bl	8000cfc <bootloader_unlock_flash>
	/*updated signature*/
	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <bootloader_update_signature_app_version+0x68>)
 8000c0e:	f107 0408 	add.w	r4, r7, #8
 8000c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.app_version+=0.1;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fc94 	bl	8000548 <__aeabi_f2d>
 8000c20:	a30f      	add	r3, pc, #60	; (adr r3, 8000c60 <bootloader_update_signature_app_version+0x60>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fb31 	bl	800028c <__adddf3>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fce1 	bl	80005f8 <__aeabi_d2f>
 8000c36:	4603      	mov	r3, r0
 8000c38:	60fb      	str	r3, [r7, #12]
	bootloader_flash_erase_signature_area();
 8000c3a:	f7ff ff51 	bl	8000ae0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <bootloader_update_signature_app_version+0x68>)
 8000c40:	461c      	mov	r4, r3
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	bootloader_lock_flash();
 8000c4c:	f000 f872 	bl	8000d34 <bootloader_lock_flash>
}
 8000c50:	bf00      	nop
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	f3af 8000 	nop.w
 8000c60:	9999999a 	.word	0x9999999a
 8000c64:	3fb99999 	.word	0x3fb99999
 8000c68:	0800c000 	.word	0x0800c000

08000c6c <bootloader_signature_get_reset_flag>:


	bootloader_lock_flash();
}

int bootloader_signature_get_reset_flag(UART_HandleTypeDef*BL_UART){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

	/*open flash for operation*/
	bootloader_unlock_flash();
 8000c74:	f000 f842 	bl	8000cfc <bootloader_unlock_flash>

	uint8_t flag=((bl_sig_t *)FLASH_SIGNATURE_AREA)->update_flag;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <bootloader_signature_get_reset_flag+0x20>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	73fb      	strb	r3, [r7, #15]

	/*lock flash operation*/
	bootloader_lock_flash();
 8000c7e:	f000 f859 	bl	8000d34 <bootloader_lock_flash>
	return flag;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	0800c000 	.word	0x0800c000

08000c90 <bootloader_app_update>:


BL_StatusTypedef bootloader_app_update(UART_HandleTypeDef*BL_UART){
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

	/*erase memory in order to write*/
	bootloader_flash_erase_application_area();
 8000c98:	f7ff ff4f 	bl	8000b3a <bootloader_flash_erase_application_area>

	/*copy from download area to application area*/
	HAL_FLASH_Unlock();
 8000c9c:	f000 ff04 	bl	8001aa8 <HAL_FLASH_Unlock>
	uint32_t address=FLASH_APPLICATION_AREA;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <bootloader_app_update+0x64>)
 8000ca2:	60fb      	str	r3, [r7, #12]
	uint32_t *data =FLASH_DOWNLOAD_AREA;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <bootloader_app_update+0x68>)
 8000ca6:	60bb      	str	r3, [r7, #8]

	while(*data != 0xffffffff){
 8000ca8:	e017      	b.n	8000cda <bootloader_app_update+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data)==HAL_ERROR)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	461c      	mov	r4, r3
 8000cb2:	4615      	mov	r5, r2
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	68f9      	ldr	r1, [r7, #12]
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 fea0 	bl	8001a00 <HAL_FLASH_Program>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d103      	bne.n	8000cce <bootloader_app_update+0x3e>
		{
			HAL_FLASH_Lock();
 8000cc6:	f000 ff11 	bl	8001aec <HAL_FLASH_Lock>
			return BL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00d      	b.n	8000cea <bootloader_app_update+0x5a>
		}
		address=address+4;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
		data++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
	while(*data != 0xffffffff){
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce2:	d1e2      	bne.n	8000caa <bootloader_app_update+0x1a>
	}
	HAL_FLASH_Lock();
 8000ce4:	f000 ff02 	bl	8001aec <HAL_FLASH_Lock>
	return BL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	08010000 	.word	0x08010000
 8000cf8:	08080000 	.word	0x08080000

08000cfc <bootloader_unlock_flash>:
	bootloader_lock_flash();

}


BL_StatusTypedef bootloader_unlock_flash(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000d00:	f000 fed2 	bl	8001aa8 <HAL_FLASH_Unlock>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d0e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <bootloader_unlock_flash+0x34>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6113      	str	r3, [r2, #16]
}
 8000d28:	bf00      	nop
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <bootloader_lock_flash>:
BL_StatusTypedef bootloader_lock_flash(){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	/*disable programming enable bit*/
	FLASH->CR &= (~FLASH_CR_PG);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <bootloader_lock_flash+0x1c>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <bootloader_lock_flash+0x1c>)
 8000d3e:	f023 0301 	bic.w	r3, r3, #1
 8000d42:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8000d44:	f000 fed2 	bl	8001aec <HAL_FLASH_Lock>
}
 8000d48:	bf00      	nop
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 fcfa 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f822 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 f8d2 	bl	8000f08 <MX_GPIO_Init>
  MX_UART5_Init();
 8000d64:	f000 f8a6 	bl	8000eb4 <MX_UART5_Init>
  MX_UART4_Init();
 8000d68:	f000 f87a 	bl	8000e60 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /*Enter Bootloader mode when User_button is pressed*/
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <main+0x44>)
 8000d70:	f001 faba 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <main+0x2c>
	  bootloader_mode();
 8000d7a:	f000 f945 	bl	8001008 <bootloader_mode>
 8000d7e:	e009      	b.n	8000d94 <main+0x40>
  }
  else{
	  HAL_UART_Transmit(&huart4, "Jumped to APP\n\r", strlen("jumped to APP\n\r"),HAL_MAX_DELAY);
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	220f      	movs	r2, #15
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <main+0x48>)
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <main+0x4c>)
 8000d8a:	f001 ff84 	bl	8002c96 <HAL_UART_Transmit>
	  bootloader_jump_to_user_code(&huart4);
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <main+0x4c>)
 8000d90:	f7ff fe04 	bl	800099c <bootloader_jump_to_user_code>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0x40>
 8000d96:	bf00      	nop
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	08003e64 	.word	0x08003e64
 8000da0:	200000ec 	.word	0x200000ec

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fbbe 	bl	8003534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <SystemClock_Config+0xb4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <SystemClock_Config+0xb4>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <SystemClock_Config+0xb4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <SystemClock_Config+0xb8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <SystemClock_Config+0xb8>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <SystemClock_Config+0xb8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fa99 	bl	800234c <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e20:	f000 f94a 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fcfc 	bl	800283c <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e4a:	f000 f935 	bl	80010b8 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	; 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_UART4_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_UART4_Init+0x4c>)
 8000e98:	f001 feb0 	bl	8002bfc <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f000 f909 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000ec 	.word	0x200000ec
 8000eb0:	40004c00 	.word	0x40004c00

08000eb4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_UART5_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_UART5_Init+0x4c>)
 8000eec:	f001 fe86 	bl	8002bfc <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f8df 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000090 	.word	0x20000090
 8000f04:	40005000 	.word	0x40005000

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_GPIO_Init+0xf0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f96:	f001 f9bf 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4814      	ldr	r0, [pc, #80]	; (8001000 <MX_GPIO_Init+0xf8>)
 8000fae:	f000 ffff 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000fcc:	f000 fff0 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000fec:	f000 ffe0 	bl	8001fb0 <HAL_GPIO_Init>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400

08001008 <bootloader_mode>:

/* USER CODE BEGIN 4 */
void bootloader_mode(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <bootloader_mode+0x90>)
 8001014:	f001 f980 	bl	8002318 <HAL_GPIO_WritePin>
	/*Use UART5 for bootloader command*/
#ifdef PRINT_MENU
	HAL_UART_Transmit(&huart4,"Welcome to bootloader\r\n", strlen("Welcome to bootloder\r\n"),HAL_MAX_DELAY );
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2216      	movs	r2, #22
 800101e:	491f      	ldr	r1, [pc, #124]	; (800109c <bootloader_mode+0x94>)
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <bootloader_mode+0x98>)
 8001022:	f001 fe38 	bl	8002c96 <HAL_UART_Transmit>
#endif
	/*poll UART5 to read data*/
	while(1)
	{
		/*Receive command from host*/
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2201      	movs	r2, #1
 800102c:	491d      	ldr	r1, [pc, #116]	; (80010a4 <bootloader_mode+0x9c>)
 800102e:	481e      	ldr	r0, [pc, #120]	; (80010a8 <bootloader_mode+0xa0>)
 8001030:	f001 fec3 	bl	8002dba <HAL_UART_Receive>

		//break through cmd
		switch(cmdBuf[0])
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <bootloader_mode+0x9c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b32      	cmp	r3, #50	; 0x32
 800103a:	d006      	beq.n	800104a <bootloader_mode+0x42>
 800103c:	2b32      	cmp	r3, #50	; 0x32
 800103e:	dc23      	bgt.n	8001088 <bootloader_mode+0x80>
 8001040:	2b30      	cmp	r3, #48	; 0x30
 8001042:	d006      	beq.n	8001052 <bootloader_mode+0x4a>
 8001044:	2b31      	cmp	r3, #49	; 0x31
 8001046:	d008      	beq.n	800105a <bootloader_mode+0x52>
 8001048:	e01e      	b.n	8001088 <bootloader_mode+0x80>
		{
		case BL_GET_VERSION:
			bootloader_get_bl_version(&huart5);
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <bootloader_mode+0xa0>)
 800104c:	f7ff fd0a 	bl	8000a64 <bootloader_get_bl_version>
			break;
 8001050:	e021      	b.n	8001096 <bootloader_mode+0x8e>
		case BL_JMP_TO_USER_CODE:
			bootloader_jump_to_user_code(&huart5);
 8001052:	4815      	ldr	r0, [pc, #84]	; (80010a8 <bootloader_mode+0xa0>)
 8001054:	f7ff fca2 	bl	800099c <bootloader_jump_to_user_code>
			break;
 8001058:	e01d      	b.n	8001096 <bootloader_mode+0x8e>
		case BL_WRITE_BIN_TO_MEMORY:
#ifdef PRINT_MENU
			HAL_UART_Transmit(&huart4,(uint8_t*) "xmodem\n\r", strlen("xmodem\n\r"),HAL_MAX_DELAY );
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	2208      	movs	r2, #8
 8001060:	4912      	ldr	r1, [pc, #72]	; (80010ac <bootloader_mode+0xa4>)
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <bootloader_mode+0x98>)
 8001064:	f001 fe17 	bl	8002c96 <HAL_UART_Transmit>
#endif

			bootloader_flash_erase_download_area();
 8001068:	f7ff fd47 	bl	8000afa <bootloader_flash_erase_download_area>
			while(1){
				if(xmodem_receive(&huart5)==XMODEM_ERROR){
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <bootloader_mode+0xa0>)
 800106e:	f000 f9ed 	bl	800144c <xmodem_receive>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1f9      	bne.n	800106c <bootloader_mode+0x64>
					HAL_UART_Transmit(&huart5, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2205      	movs	r2, #5
 800107e:	490c      	ldr	r1, [pc, #48]	; (80010b0 <bootloader_mode+0xa8>)
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <bootloader_mode+0xa0>)
 8001082:	f001 fe08 	bl	8002c96 <HAL_UART_Transmit>
					while(1);
 8001086:	e7fe      	b.n	8001086 <bootloader_mode+0x7e>
				}
			}
			break;
		default:
			HAL_UART_Transmit(&huart5, "Invalid cmd\n\r", strlen("Invalid cmd\n\r"), HAL_MAX_DELAY);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	220d      	movs	r2, #13
 800108e:	4909      	ldr	r1, [pc, #36]	; (80010b4 <bootloader_mode+0xac>)
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <bootloader_mode+0xa0>)
 8001092:	f001 fe00 	bl	8002c96 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8001096:	e7c6      	b.n	8001026 <bootloader_mode+0x1e>
 8001098:	40020c00 	.word	0x40020c00
 800109c:	08003e74 	.word	0x08003e74
 80010a0:	200000ec 	.word	0x200000ec
 80010a4:	200000d4 	.word	0x200000d4
 80010a8:	20000090 	.word	0x20000090
 80010ac:	08003e8c 	.word	0x08003e8c
 80010b0:	08003e98 	.word	0x08003e98
 80010b4:	08003ea0 	.word	0x08003ea0

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_MspInit+0x4c>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x4c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a42      	ldr	r2, [pc, #264]	; (800123c <HAL_UART_MspInit+0x128>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12d      	bne.n	8001192 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <HAL_UART_MspInit+0x12c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a40      	ldr	r2, [pc, #256]	; (8001240 <HAL_UART_MspInit+0x12c>)
 8001140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <HAL_UART_MspInit+0x12c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_UART_MspInit+0x12c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <HAL_UART_MspInit+0x12c>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_UART_MspInit+0x12c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800116e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001180:	2308      	movs	r3, #8
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <HAL_UART_MspInit+0x130>)
 800118c:	f000 ff10 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001190:	e04f      	b.n	8001232 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==UART5)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <HAL_UART_MspInit+0x134>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d14a      	bne.n	8001232 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x12c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001202:	2308      	movs	r3, #8
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <HAL_UART_MspInit+0x130>)
 800120e:	f000 fecf 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001212:	2304      	movs	r3, #4
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001222:	2308      	movs	r3, #8
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <HAL_UART_MspInit+0x138>)
 800122e:	f000 febf 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	; 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004c00 	.word	0x40004c00
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40005000 	.word	0x40005000
 800124c:	40020c00 	.word	0x40020c00

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 faaa 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f002 f8f6 	bl	80034c4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00000400 	.word	0x00000400
 8001308:	200000e8 	.word	0x200000e8
 800130c:	20000168 	.word	0x20000168

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <xmodem_calcrc>:
*      | SOH | PKT_num | Data_Size | data | SUM  |
*      +-----+-------+-------+------+-----+------+
*/

uint16_t xmodem_calcrc(unsigned char *ptr, int count)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	uint16_t  crc;
    char i;

    crc = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	81fb      	strh	r3, [r7, #14]
    while (--count >= 0)
 8001342:	e023      	b.n	800138c <xmodem_calcrc+0x58>
    {
        crc = crc ^ *ptr++ << 8;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001354:	4053      	eors	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	81fb      	strh	r3, [r7, #14]
        i = 8;
 800135a:	2308      	movs	r3, #8
 800135c:	737b      	strb	r3, [r7, #13]
        do
        {
            if (crc & 0x8000)
 800135e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da09      	bge.n	800137a <xmodem_calcrc+0x46>
                crc = crc << 1 ^ 0x1021;
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	b21b      	sxth	r3, r3
 800136c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b21b      	sxth	r3, r3
 8001376:	81fb      	strh	r3, [r7, #14]
 8001378:	e002      	b.n	8001380 <xmodem_calcrc+0x4c>
            else
                crc = crc << 1;
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	81fb      	strh	r3, [r7, #14]
        } while(--i);
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	3b01      	subs	r3, #1
 8001384:	737b      	strb	r3, [r7, #13]
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e8      	bne.n	800135e <xmodem_calcrc+0x2a>
    while (--count >= 0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dad5      	bge.n	8001344 <xmodem_calcrc+0x10>
    }
    SWAP_BYTE(crc);
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	81fb      	strh	r3, [r7, #14]
    return (crc);
 80013ac:	89fb      	ldrh	r3, [r7, #14]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <xmodem_ready_to_receive>:

uint8_t xmodem_ready_to_receive(UART_HandleTypeDef *BL_UART){
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	uint8_t header=0,response=X_C;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	2343      	movs	r3, #67	; 0x43
 80013c8:	73bb      	strb	r3, [r7, #14]

	while(!(header == STX || header == SOH)){
 80013ca:	e00f      	b.n	80013ec <xmodem_ready_to_receive+0x32>
		/*send 'C' to receive as CRC*/
		HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 80013cc:	f107 010e 	add.w	r1, r7, #14
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2201      	movs	r2, #1
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f001 fc5d 	bl	8002c96 <HAL_UART_Transmit>
		/*Receive & Check Header**/
		HAL_UART_Receive(BL_UART, &header, 1, XMODEM_RX_WAIT_TIME);
 80013dc:	f107 010f 	add.w	r1, r7, #15
 80013e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013e4:	2201      	movs	r2, #1
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f001 fce7 	bl	8002dba <HAL_UART_Receive>
	while(!(header == STX || header == SOH)){
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d002      	beq.n	80013f8 <xmodem_ready_to_receive+0x3e>
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d1e9      	bne.n	80013cc <xmodem_ready_to_receive+0x12>
	}
	return header;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <xmodem_ready_to_receive_after_NAK>:

/*if NAK received call this at the time of receiving header*/
uint8_t xmodem_ready_to_receive_after_NAK(UART_HandleTypeDef *BL_UART){
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	uint8_t header=0,response=NAK;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	2315      	movs	r3, #21
 8001410:	73bb      	strb	r3, [r7, #14]
	while(!(header == STX || header == SOH)){
 8001412:	e00f      	b.n	8001434 <xmodem_ready_to_receive_after_NAK+0x32>
		HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 8001414:	f107 010e 	add.w	r1, r7, #14
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	2201      	movs	r2, #1
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 fc39 	bl	8002c96 <HAL_UART_Transmit>
		/*Receive & Check Header**/
		HAL_UART_Receive(BL_UART, &header, 1, XMODEM_RX_WAIT_TIME);
 8001424:	f107 010f 	add.w	r1, r7, #15
 8001428:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800142c:	2201      	movs	r2, #1
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f001 fcc3 	bl	8002dba <HAL_UART_Receive>
	while(!(header == STX || header == SOH)){
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d002      	beq.n	8001440 <xmodem_ready_to_receive_after_NAK+0x3e>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d1e9      	bne.n	8001414 <xmodem_ready_to_receive_after_NAK+0x12>
	}
	return header;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <xmodem_receive>:

XMODEM_StatusTypedef xmodem_receive(UART_HandleTypeDef *BL_UART){
 800144c:	b580      	push	{r7, lr}
 800144e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001452:	af00      	add	r7, sp, #0
 8001454:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001458:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800145c:	6018      	str	r0, [r3, #0]

	HAL_UART_Transmit(&huart4, "in xmodem\n\r", strlen("in xmodem\n\r"), HAL_MAX_DELAY);
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	220b      	movs	r2, #11
 8001464:	499d      	ldr	r1, [pc, #628]	; (80016dc <xmodem_receive+0x290>)
 8001466:	489e      	ldr	r0, [pc, #632]	; (80016e0 <xmodem_receive+0x294>)
 8001468:	f001 fc15 	bl	8002c96 <HAL_UART_Transmit>

	uint8_t rxbuf[1050]={0};
 800146c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001470:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	f240 4216 	movw	r2, #1046	; 0x416
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f857 	bl	8003534 <memset>
	uint8_t header,response;

	static uint8_t received_packet_number=0,comp_packet_number,packet_number=0;
	int size,NAK_Flag=0;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	uint16_t received_crc=0;
 800148c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001490:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]

	packet_number++;
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <xmodem_receive+0x298>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b90      	ldr	r3, [pc, #576]	; (80016e4 <xmodem_receive+0x298>)
 80014a2:	701a      	strb	r2, [r3, #0]
	/*try to receive header in differenr context*/
retry:
	if((packet_number-1)==0){
 80014a4:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <xmodem_receive+0x298>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10e      	bne.n	80014ca <xmodem_receive+0x7e>
		/*reception of first packet*/
		header=xmodem_ready_to_receive(BL_UART);
 80014ac:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014b0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	f7ff ff80 	bl	80013ba <xmodem_ready_to_receive>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014c2:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e021      	b.n	800150e <xmodem_receive+0xc2>
	}
	else if(NAK_Flag){
 80014ca:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d011      	beq.n	80014f6 <xmodem_receive+0xaa>
		/*reception of header if NAK is sent*/
		header=xmodem_ready_to_receive_after_NAK(huart5);
 80014d2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014d6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f7ff ff91 	bl	8001402 <xmodem_ready_to_receive_after_NAK>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014e8:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 80014ec:	701a      	strb	r2, [r3, #0]
		NAK_Flag=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80014f4:	e00b      	b.n	800150e <xmodem_receive+0xc2>
	}
	else{
		/*reception of header if ACK is sent*/
		HAL_UART_Receive(huart5, &header, 1, XMODEM_RX_WAIT_TIME);
 80014f6:	f107 011b 	add.w	r1, r7, #27
 80014fa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014fe:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001502:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001506:	2201      	movs	r2, #1
 8001508:	6800      	ldr	r0, [r0, #0]
 800150a:	f001 fc56 	bl	8002dba <HAL_UART_Receive>
	}


	switch(header)
 800150e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001512:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b17      	cmp	r3, #23
 800151a:	f000 80a0 	beq.w	800165e <xmodem_receive+0x212>
 800151e:	2b17      	cmp	r3, #23
 8001520:	f300 80d6 	bgt.w	80016d0 <xmodem_receive+0x284>
 8001524:	2b02      	cmp	r3, #2
 8001526:	dc02      	bgt.n	800152e <xmodem_receive+0xe2>
 8001528:	2b00      	cmp	r3, #0
 800152a:	dc04      	bgt.n	8001536 <xmodem_receive+0xea>
 800152c:	e0d0      	b.n	80016d0 <xmodem_receive+0x284>
 800152e:	2b04      	cmp	r3, #4
 8001530:	f000 8095 	beq.w	800165e <xmodem_receive+0x212>
 8001534:	e0cc      	b.n	80016d0 <xmodem_receive+0x284>
	 {
	 case SOH:
	 case STX:
		 	 if(header==SOH)
 8001536:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800153a:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d103      	bne.n	800154c <xmodem_receive+0x100>
		 	 {
		 		 size=PKT_SIZE;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800154a:	e00a      	b.n	8001562 <xmodem_receive+0x116>
		 	 }
		 	 else if(header==STX)
 800154c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001550:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d103      	bne.n	8001562 <xmodem_receive+0x116>
		 	 {
		 		 size=PKT_SIZE_1K;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
		 	 }
		 	 /*receive PKT_num & size*/
		 	 HAL_UART_Receive(BL_UART, &received_packet_number, 1, XMODEM_RX_WAIT_TIME);
 8001562:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001566:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 800156a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800156e:	2201      	movs	r2, #1
 8001570:	495d      	ldr	r1, [pc, #372]	; (80016e8 <xmodem_receive+0x29c>)
 8001572:	6800      	ldr	r0, [r0, #0]
 8001574:	f001 fc21 	bl	8002dba <HAL_UART_Receive>
		 	 /*size is of 2 byte*/
		 	 HAL_UART_Receive(BL_UART, &comp_packet_number, 1, XMODEM_RX_WAIT_TIME);
 8001578:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800157c:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001580:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001584:	2201      	movs	r2, #1
 8001586:	4959      	ldr	r1, [pc, #356]	; (80016ec <xmodem_receive+0x2a0>)
 8001588:	6800      	ldr	r0, [r0, #0]
 800158a:	f001 fc16 	bl	8002dba <HAL_UART_Receive>
		 	 /*receive DATA*/
		 	 HAL_UART_Receive(BL_UART, rxbuf, size, XMODEM_RX_WAIT_TIME);
 800158e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 011c 	add.w	r1, r7, #28
 8001598:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800159c:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 80015a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015a4:	6800      	ldr	r0, [r0, #0]
 80015a6:	f001 fc08 	bl	8002dba <HAL_UART_Receive>
		 	 /*receive CRC*/
		 	 HAL_UART_Receive(BL_UART, &received_crc, 2, XMODEM_RX_WAIT_TIME);
 80015aa:	f107 0118 	add.w	r1, r7, #24
 80015ae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80015b2:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 80015b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015ba:	2202      	movs	r2, #2
 80015bc:	6800      	ldr	r0, [r0, #0]
 80015be:	f001 fbfc 	bl	8002dba <HAL_UART_Receive>

		 	/*check CRC*/
		 	uint16_t calculated_crc = xmodem_calcrc(rxbuf, size);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	f8d7 143c 	ldr.w	r1, [r7, #1084]	; 0x43c
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff feb2 	bl	8001334 <xmodem_calcrc>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		 	 if(calculated_crc != received_crc  && received_packet_number != packet_number){
 80015d6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80015da:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d009      	beq.n	80015fc <xmodem_receive+0x1b0>
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <xmodem_receive+0x29c>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <xmodem_receive+0x298>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d003      	beq.n	80015fc <xmodem_receive+0x1b0>
		 		 /*set NAK Flag and retry packet reception*/
		 		NAK_Flag=1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80015fa:	e753      	b.n	80014a4 <xmodem_receive+0x58>
		 		goto retry;
		 	 }
		 	 else
		 	 {
		 		//send NAK
		 		response=ACK;
 80015fc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001600:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 8001604:	2206      	movs	r2, #6
 8001606:	701a      	strb	r2, [r3, #0]
		 		HAL_UART_Transmit(BL_UART, &response, 1, HAL_MAX_DELAY);
 8001608:	f107 011a 	add.w	r1, r7, #26
 800160c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001610:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	2201      	movs	r2, #1
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	f001 fb3b 	bl	8002c96 <HAL_UART_Transmit>
		 	 }
		 	 /*write to flash memory*/
		 	 bootloader_write_bin_to_memory(rxbuf,size);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	f8d7 143c 	ldr.w	r1, [r7, #1084]	; 0x43c
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fa27 	bl	8000a7c <bootloader_write_bin_to_memory>

#ifdef DEBUG_XMODEM
		 	/*debug*/
		 	char temp[12];
		 	sprintf(temp,"packet=%d\n\r",packet_number);
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <xmodem_receive+0x298>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	492d      	ldr	r1, [pc, #180]	; (80016f0 <xmodem_receive+0x2a4>)
 800163a:	4618      	mov	r0, r3
 800163c:	f001 ff82 	bl	8003544 <siprintf>
		 	HAL_UART_Transmit(&huart4, temp, strlen(temp), HAL_MAX_DELAY);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fdc3 	bl	80001d0 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	4822      	ldr	r0, [pc, #136]	; (80016e0 <xmodem_receive+0x294>)
 8001658:	f001 fb1d 	bl	8002c96 <HAL_UART_Transmit>
 800165c:	e038      	b.n	80016d0 <xmodem_receive+0x284>
		 	break;

	 case EOT:
	 case ETB:
		 /*respond ACK*/
		 response=ACK;
 800165e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001662:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 8001666:	2206      	movs	r2, #6
 8001668:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 800166a:	f107 011a 	add.w	r1, r7, #26
 800166e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001672:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	2201      	movs	r2, #1
 800167c:	6800      	ldr	r0, [r0, #0]
 800167e:	f001 fb0a 	bl	8002c96 <HAL_UART_Transmit>

		 /*update APP Version*/
		 bootloader_update_signature_app_version(huart5);
 8001682:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001686:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f7ff fab8 	bl	8000c00 <bootloader_update_signature_app_version>
		 /*update signature flag*/
		 bootloader_update_signature_set_flag(huart5);
 8001690:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001694:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f7ff fa6f 	bl	8000b7c <bootloader_update_signature_set_flag>

		 /*Receive of EOT will jump to user app*/
#ifdef DEBUG_XMODEM
		 HAL_UART_Transmit(&huart4, "Jump to user", 15, HAL_MAX_DELAY);
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	220f      	movs	r2, #15
 80016a4:	4913      	ldr	r1, [pc, #76]	; (80016f4 <xmodem_receive+0x2a8>)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <xmodem_receive+0x294>)
 80016a8:	f001 faf5 	bl	8002c96 <HAL_UART_Transmit>
#endif
		 /*jump to APP */
		 if(bootloader_jump_to_user_code(&huart4) == BL_ERROR){
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <xmodem_receive+0x294>)
 80016ae:	f7ff f975 	bl	800099c <bootloader_jump_to_user_code>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10b      	bne.n	80016d0 <xmodem_receive+0x284>
			 HAL_UART_Transmit(BL_UART, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 80016b8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80016bc:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	2205      	movs	r2, #5
 80016c6:	490c      	ldr	r1, [pc, #48]	; (80016f8 <xmodem_receive+0x2ac>)
 80016c8:	6800      	ldr	r0, [r0, #0]
 80016ca:	f001 fae4 	bl	8002c96 <HAL_UART_Transmit>
			 while(1);
 80016ce:	e7fe      	b.n	80016ce <xmodem_receive+0x282>
		 }

	 }
}
 80016d0:	bf00      	nop
 80016d2:	4618      	mov	r0, r3
 80016d4:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08003eb0 	.word	0x08003eb0
 80016e0:	200000ec 	.word	0x200000ec
 80016e4:	20000130 	.word	0x20000130
 80016e8:	20000131 	.word	0x20000131
 80016ec:	20000132 	.word	0x20000132
 80016f0:	08003ebc 	.word	0x08003ebc
 80016f4:	08003ec8 	.word	0x08003ec8
 80016f8:	08003ed8 	.word	0x08003ed8

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff fdf3 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f001 fed1 	bl	80034d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fb11 	bl	8000d54 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001740:	08003f3c 	.word	0x08003f3c
  ldr r2, =_sbss
 8001744:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001748:	20000168 	.word	0x20000168

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f90d 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fc9e 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f917 	bl	80019e6 <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f8ed 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000004 	.word	0x20000004
 80017ec:	2000000c 	.word	0x2000000c
 80017f0:	20000008 	.word	0x20000008

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000134 	.word	0x20000134

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000134 	.word	0x20000134

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff47 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff5c 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffb0 	bl	8001954 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a14:	7e1b      	ldrb	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_FLASH_Program+0x1e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e03b      	b.n	8001a96 <HAL_FLASH_Program+0x96>
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a28:	f000 f870 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12b      	bne.n	8001a8e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f000 f91b 	bl	8001c7c <FLASH_Program_Byte>
 8001a46:	e016      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a4e:	883b      	ldrh	r3, [r7, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	68b8      	ldr	r0, [r7, #8]
 8001a54:	f000 f8ee 	bl	8001c34 <FLASH_Program_HalfWord>
 8001a58:	e00d      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d105      	bne.n	8001a6c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f000 f8c3 	bl	8001bf0 <FLASH_Program_Word>
 8001a6a:	e004      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a70:	68b8      	ldr	r0, [r7, #8]
 8001a72:	f000 f88b 	bl	8001b8c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a7a:	f000 f847 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_FLASH_Program+0xa4>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_FLASH_Program+0xa4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000138 	.word	0x20000138
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0b      	bge.n	8001ad2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_FLASH_Unlock+0x3c>)
 8001abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da01      	bge.n	8001ad2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	45670123 	.word	0x45670123
 8001ae8:	cdef89ab 	.word	0xcdef89ab

08001aec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_FLASH_Lock+0x1c>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_FLASH_Lock+0x1c>)
 8001af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001afa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <FLASH_WaitForLastOperation+0x78>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1e:	f7ff fe7d 	bl	800181c <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b24:	e010      	b.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d00c      	beq.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <FLASH_WaitForLastOperation+0x38>
 8001b34:	f7ff fe72 	bl	800181c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d201      	bcs.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e019      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b72:	f000 f8a5 	bl	8001cc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
  
}  
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000138 	.word	0x20000138
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a10      	ldr	r2, [pc, #64]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001baa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001bc2:	f3bf 8f6f 	isb	sy
}
 8001bc6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	3104      	adds	r1, #4
 8001bdc:	4613      	mov	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <FLASH_Program_Word+0x40>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	801a      	strh	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <FLASH_Program_Byte+0x40>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	701a      	strb	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001cda:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001cde:	2210      	movs	r2, #16
 8001ce0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001cf8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d34:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <FLASH_SetErrorCode+0xa8>)
 8001d52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <FLASH_SetErrorCode+0xa4>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	60da      	str	r2, [r3, #12]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	20000138 	.word	0x20000138

08001d6c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_FLASHEx_Erase+0xd8>)
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_FLASHEx_Erase+0x1e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e058      	b.n	8001e3c <HAL_FLASHEx_Erase+0xd0>
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_FLASHEx_Erase+0xd8>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d94:	f7ff feba 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d148      	bne.n	8001e34 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d115      	bne.n	8001dde <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 f844 	bl	8001e4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dc8:	f7ff fea0 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_FLASHEx_Erase+0xdc>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_FLASHEx_Erase+0xdc>)
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	6113      	str	r3, [r2, #16]
 8001ddc:	e028      	b.n	8001e30 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	e01c      	b.n	8001e20 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	68b8      	ldr	r0, [r7, #8]
 8001df0:	f000 f850 	bl	8001e94 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001df8:	f7ff fe88 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_FLASHEx_Erase+0xdc>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_FLASHEx_Erase+0xdc>)
 8001e06:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001e0a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	601a      	str	r2, [r3, #0]
          break;
 8001e18:	e00a      	b.n	8001e30 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d3da      	bcc.n	8001de6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e30:	f000 f878 	bl	8001f24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_FLASHEx_Erase+0xd8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	761a      	strb	r2, [r3, #24]

  return status;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000138 	.word	0x20000138
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6113      	str	r3, [r2, #16]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e010      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d103      	bne.n	8001ebe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e009      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d103      	bne.n	8001ecc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e002      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	490f      	ldr	r1, [pc, #60]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ef0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6113      	str	r3, [r2, #16]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a16      	ldr	r2, [pc, #88]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f56:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f62:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d017      	beq.n	8001fa0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f92:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <FLASH_FlushCaches+0x88>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e16b      	b.n	80022a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 815a 	bne.w	800229e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80b4 	beq.w	800229e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b60      	ldr	r3, [pc, #384]	; (80022bc <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <HAL_GPIO_Init+0x30c>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_GPIO_Init+0x310>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <HAL_GPIO_Init+0x314>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a51      	ldr	r2, [pc, #324]	; (80022c8 <HAL_GPIO_Init+0x318>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a50      	ldr	r2, [pc, #320]	; (80022cc <HAL_GPIO_Init+0x31c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x21a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <HAL_GPIO_Init+0x324>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x216>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <HAL_GPIO_Init+0x328>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x20a>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00e      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00c      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021be:	2306      	movs	r3, #6
 80021c0:	e00a      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <HAL_GPIO_Init+0x310>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_GPIO_Init+0x334>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f ae90 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40021c00 	.word	0x40021c00
 80022e4:	40013c00 	.word	0x40013c00

080022e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e267      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d075      	beq.n	8002456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d00c      	beq.n	8002390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d112      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b82      	ldr	r3, [pc, #520]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d05b      	beq.n	8002454 <HAL_RCC_OscConfig+0x108>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d157      	bne.n	8002454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e242      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x74>
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b70      	ldr	r3, [pc, #448]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6f      	ldr	r2, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6c      	ldr	r2, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023e4:	4b69      	ldr	r3, [pc, #420]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a68      	ldr	r2, [pc, #416]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fa0a 	bl	800181c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fa06 	bl	800181c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e207      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xc0>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff f9f6 	bl	800181c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff f9f2 	bl	800181c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1f3      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0xe8>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b44      	ldr	r3, [pc, #272]	; (800258c <HAL_RCC_OscConfig+0x240>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x152>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1c7      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4937      	ldr	r1, [pc, #220]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e03a      	b.n	800252a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x244>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7ff f9ab 	bl	800181c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff f9a7 	bl	800181c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1a8      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4925      	ldr	r1, [pc, #148]	; (800258c <HAL_RCC_OscConfig+0x240>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_OscConfig+0x244>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff f98a 	bl	800181c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff f986 	bl	800181c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e187      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d036      	beq.n	80025a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_RCC_OscConfig+0x248>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7ff f96a 	bl	800181c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff f966 	bl	800181c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e167      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_OscConfig+0x240>)
 8002560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x200>
 800256a:	e01b      	b.n	80025a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_OscConfig+0x248>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff f953 	bl	800181c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	e00e      	b.n	8002598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257a:	f7ff f94f 	bl	800181c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d907      	bls.n	8002598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e150      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
 800258c:	40023800 	.word	0x40023800
 8002590:	42470000 	.word	0x42470000
 8002594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ea      	bne.n	800257a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8097 	beq.w	80026e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a7c      	ldr	r2, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x474>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ee:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x474>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a73      	ldr	r2, [pc, #460]	; (80027c0 <HAL_RCC_OscConfig+0x474>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fa:	f7ff f90f 	bl	800181c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7ff f90b 	bl	800181c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e10c      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_OscConfig+0x474>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x2ea>
 8002628:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x324>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x30c>
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a5e      	ldr	r2, [pc, #376]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a5b      	ldr	r2, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0x324>
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	4b55      	ldr	r3, [pc, #340]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a54      	ldr	r2, [pc, #336]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff f8d0 	bl	800181c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7ff f8cc 	bl	800181c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0cb      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ee      	beq.n	8002680 <HAL_RCC_OscConfig+0x334>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7ff f8ba 	bl	800181c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7ff f8b6 	bl	800181c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b5      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ee      	bne.n	80026ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a38      	ldr	r2, [pc, #224]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80a1 	beq.w	800282c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ea:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d05c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d141      	bne.n	8002782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_RCC_OscConfig+0x478>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff f88a 	bl	800181c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f886 	bl	800181c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e087      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	041b      	lsls	r3, r3, #16
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	491b      	ldr	r1, [pc, #108]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x478>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff f85f 	bl	800181c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7ff f85b 	bl	800181c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e05c      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x416>
 8002780:	e054      	b.n	800282c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f848 	bl	800181c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff f844 	bl	800181c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e045      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x444>
 80027ae:	e03d      	b.n	800282c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e038      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000
 80027c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x4ec>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d028      	beq.n	8002828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d121      	bne.n	8002828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d11a      	bne.n	8002828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	4293      	cmp	r3, r2
 8002802:	d111      	bne.n	8002828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cc      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90c      	bls.n	8002878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e067      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe ff76 	bl	800181c <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe ff72 	bl	800181c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d20c      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f821 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fed6 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08003ee0 	.word	0x08003ee0
 8002a00:	20000004 	.word	0x20000004
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a0c:	b090      	sub	sp, #64	; 0x40
 8002a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
 8002a14:	2300      	movs	r3, #0
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d00d      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x40>
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	f200 80a1 	bhi.w	8002b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x34>
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a3a:	e09b      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a40:	e09b      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a46:	e098      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a52:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	2200      	movs	r2, #0
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	627a      	str	r2, [r7, #36]	; 0x24
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a70:	2100      	movs	r1, #0
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a74:	fb03 f201 	mul.w	r2, r3, r1
 8002a78:	2300      	movs	r3, #0
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a82:	fba0 1202 	umull	r1, r2, r0, r2
 8002a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a88:	460a      	mov	r2, r1
 8002a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8e:	4413      	add	r3, r2
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	2200      	movs	r2, #0
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	61fa      	str	r2, [r7, #28]
 8002a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aa2:	f7fd fdf9 	bl	8000698 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aae:	e053      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	617a      	str	r2, [r7, #20]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ac2:	f04f 0b00 	mov.w	fp, #0
 8002ac6:	4652      	mov	r2, sl
 8002ac8:	465b      	mov	r3, fp
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	ebb2 080a 	subs.w	r8, r2, sl
 8002ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002afa:	ebb2 0408 	subs.w	r4, r2, r8
 8002afe:	eb63 0509 	sbc.w	r5, r3, r9
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	00eb      	lsls	r3, r5, #3
 8002b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b10:	00e2      	lsls	r2, r4, #3
 8002b12:	4614      	mov	r4, r2
 8002b14:	461d      	mov	r5, r3
 8002b16:	eb14 030a 	adds.w	r3, r4, sl
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	eb45 030b 	adc.w	r3, r5, fp
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b2e:	4629      	mov	r1, r5
 8002b30:	028b      	lsls	r3, r1, #10
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b38:	4621      	mov	r1, r4
 8002b3a:	028a      	lsls	r2, r1, #10
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	2200      	movs	r2, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	60fa      	str	r2, [r7, #12]
 8002b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b4c:	f7fd fda4 	bl	8000698 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3740      	adds	r7, #64	; 0x40
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	017d7840 	.word	0x017d7840

08002b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb0:	f7ff fff0 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0a9b      	lsrs	r3, r3, #10
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08003ef0 	.word	0x08003ef0

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd8:	f7ff ffdc 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0b5b      	lsrs	r3, r3, #13
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08003ef0 	.word	0x08003ef0

08002bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e03f      	b.n	8002c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fa76 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f9cb 	bl	8002fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af02      	add	r7, sp, #8
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d17c      	bne.n	8002db0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_UART_Transmit+0x2c>
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e075      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x3e>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e06e      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	; 0x21
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cea:	f7fe fd97 	bl	800181c <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d108      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e003      	b.n	8002d20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d28:	e02a      	b.n	8002d80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f8e2 	bl	8002efe <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e036      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e007      	b.n	8002d72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1cf      	bne.n	8002d2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8b2 	bl	8002efe <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e006      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 808c 	bne.w	8002ef4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Receive+0x2e>
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e084      	b.n	8002ef6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Receive+0x40>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e07d      	b.n	8002ef6 <HAL_UART_Receive+0x13c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2222      	movs	r2, #34	; 0x22
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e16:	f7fe fd01 	bl	800181c <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d108      	bne.n	8002e44 <HAL_UART_Receive+0x8a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e003      	b.n	8002e4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e54:	e043      	b.n	8002ede <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2120      	movs	r1, #32
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f84c 	bl	8002efe <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e042      	b.n	8002ef6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e01f      	b.n	8002ed0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	d007      	beq.n	8002eaa <HAL_UART_Receive+0xf0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_UART_Receive+0xfe>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e008      	b.n	8002eca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1b6      	bne.n	8002e56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
  }
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b090      	sub	sp, #64	; 0x40
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0e:	e050      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d04c      	beq.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f1e:	f7fe fc7d 	bl	800181c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d241      	bcs.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f4e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e5      	bne.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	613b      	str	r3, [r7, #16]
   return(result);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f82:	623a      	str	r2, [r7, #32]
 8002f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	69f9      	ldr	r1, [r7, #28]
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00f      	b.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d09f      	beq.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3740      	adds	r7, #64	; 0x40
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0c0      	sub	sp, #256	; 0x100
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	ea40 0301 	orr.w	r3, r0, r1
 8003004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	431a      	orrs	r2, r3
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003034:	f021 010c 	bic.w	r1, r1, #12
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003042:	430b      	orrs	r3, r1
 8003044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	6999      	ldr	r1, [r3, #24]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	ea40 0301 	orr.w	r3, r0, r1
 8003062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b8f      	ldr	r3, [pc, #572]	; (80032a8 <UART_SetConfig+0x2cc>)
 800306c:	429a      	cmp	r2, r3
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0xa0>
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b8d      	ldr	r3, [pc, #564]	; (80032ac <UART_SetConfig+0x2d0>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d104      	bne.n	8003086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7ff fdaa 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8003080:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003084:	e003      	b.n	800308e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003086:	f7ff fd91 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 800308a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003098:	f040 810c 	bne.w	80032b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800309c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	1891      	adds	r1, r2, r2
 80030b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030b6:	415b      	adcs	r3, r3
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030be:	4621      	mov	r1, r4
 80030c0:	eb12 0801 	adds.w	r8, r2, r1
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb43 0901 	adc.w	r9, r3, r1
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030de:	4690      	mov	r8, r2
 80030e0:	4699      	mov	r9, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	eb18 0303 	adds.w	r3, r8, r3
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030ec:	462b      	mov	r3, r5
 80030ee:	eb49 0303 	adc.w	r3, r9, r3
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003102:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800310a:	460b      	mov	r3, r1
 800310c:	18db      	adds	r3, r3, r3
 800310e:	653b      	str	r3, [r7, #80]	; 0x50
 8003110:	4613      	mov	r3, r2
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	657b      	str	r3, [r7, #84]	; 0x54
 8003118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800311c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003120:	f7fd faba 	bl	8000698 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <UART_SetConfig+0x2d4>)
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	011c      	lsls	r4, r3, #4
 8003132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800313c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003144:	4642      	mov	r2, r8
 8003146:	464b      	mov	r3, r9
 8003148:	1891      	adds	r1, r2, r2
 800314a:	64b9      	str	r1, [r7, #72]	; 0x48
 800314c:	415b      	adcs	r3, r3
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003154:	4641      	mov	r1, r8
 8003156:	eb12 0a01 	adds.w	sl, r2, r1
 800315a:	4649      	mov	r1, r9
 800315c:	eb43 0b01 	adc.w	fp, r3, r1
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800316c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003174:	4692      	mov	sl, r2
 8003176:	469b      	mov	fp, r3
 8003178:	4643      	mov	r3, r8
 800317a:	eb1a 0303 	adds.w	r3, sl, r3
 800317e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003182:	464b      	mov	r3, r9
 8003184:	eb4b 0303 	adc.w	r3, fp, r3
 8003188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003198:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800319c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031a0:	460b      	mov	r3, r1
 80031a2:	18db      	adds	r3, r3, r3
 80031a4:	643b      	str	r3, [r7, #64]	; 0x40
 80031a6:	4613      	mov	r3, r2
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
 80031ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031b6:	f7fd fa6f 	bl	8000698 <__aeabi_uldivmod>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <UART_SetConfig+0x2d4>)
 80031c2:	fba3 2301 	umull	r2, r3, r3, r1
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2264      	movs	r2, #100	; 0x64
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	1acb      	subs	r3, r1, r3
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <UART_SetConfig+0x2d4>)
 80031d8:	fba3 2302 	umull	r2, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e4:	441c      	add	r4, r3
 80031e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	1891      	adds	r1, r2, r2
 80031fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003200:	415b      	adcs	r3, r3
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003208:	4641      	mov	r1, r8
 800320a:	1851      	adds	r1, r2, r1
 800320c:	6339      	str	r1, [r7, #48]	; 0x30
 800320e:	4649      	mov	r1, r9
 8003210:	414b      	adcs	r3, r1
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003220:	4659      	mov	r1, fp
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4651      	mov	r1, sl
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4642      	mov	r2, r8
 8003236:	189b      	adds	r3, r3, r2
 8003238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800323c:	464b      	mov	r3, r9
 800323e:	460a      	mov	r2, r1
 8003240:	eb42 0303 	adc.w	r3, r2, r3
 8003244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003254:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800325c:	460b      	mov	r3, r1
 800325e:	18db      	adds	r3, r3, r3
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
 8003262:	4613      	mov	r3, r2
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800326e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003272:	f7fd fa11 	bl	8000698 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <UART_SetConfig+0x2d4>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	3332      	adds	r3, #50	; 0x32
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <UART_SetConfig+0x2d4>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 0207 	and.w	r2, r3, #7
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4422      	add	r2, r4
 80032a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032a4:	e105      	b.n	80034b2 <UART_SetConfig+0x4d6>
 80032a6:	bf00      	nop
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032c6:	4642      	mov	r2, r8
 80032c8:	464b      	mov	r3, r9
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	6239      	str	r1, [r7, #32]
 80032ce:	415b      	adcs	r3, r3
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032d6:	4641      	mov	r1, r8
 80032d8:	1854      	adds	r4, r2, r1
 80032da:	4649      	mov	r1, r9
 80032dc:	eb43 0501 	adc.w	r5, r3, r1
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	00eb      	lsls	r3, r5, #3
 80032ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ee:	00e2      	lsls	r2, r4, #3
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	18e3      	adds	r3, r4, r3
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032fc:	464b      	mov	r3, r9
 80032fe:	eb45 0303 	adc.w	r3, r5, r3
 8003302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003322:	4629      	mov	r1, r5
 8003324:	008b      	lsls	r3, r1, #2
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332c:	4621      	mov	r1, r4
 800332e:	008a      	lsls	r2, r1, #2
 8003330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003334:	f7fd f9b0 	bl	8000698 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b60      	ldr	r3, [pc, #384]	; (80034c0 <UART_SetConfig+0x4e4>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	011c      	lsls	r4, r3, #4
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	61b9      	str	r1, [r7, #24]
 8003360:	415b      	adcs	r3, r3
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003368:	4641      	mov	r1, r8
 800336a:	1851      	adds	r1, r2, r1
 800336c:	6139      	str	r1, [r7, #16]
 800336e:	4649      	mov	r1, r9
 8003370:	414b      	adcs	r3, r1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003380:	4659      	mov	r1, fp
 8003382:	00cb      	lsls	r3, r1, #3
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338a:	4651      	mov	r1, sl
 800338c:	00ca      	lsls	r2, r1, #3
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4603      	mov	r3, r0
 8003394:	4642      	mov	r2, r8
 8003396:	189b      	adds	r3, r3, r2
 8003398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033c0:	4649      	mov	r1, r9
 80033c2:	008b      	lsls	r3, r1, #2
 80033c4:	4641      	mov	r1, r8
 80033c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ca:	4641      	mov	r1, r8
 80033cc:	008a      	lsls	r2, r1, #2
 80033ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033d2:	f7fd f961 	bl	8000698 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <UART_SetConfig+0x4e4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <UART_SetConfig+0x4e4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	441c      	add	r4, r3
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003400:	2200      	movs	r2, #0
 8003402:	673b      	str	r3, [r7, #112]	; 0x70
 8003404:	677a      	str	r2, [r7, #116]	; 0x74
 8003406:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800340a:	4642      	mov	r2, r8
 800340c:	464b      	mov	r3, r9
 800340e:	1891      	adds	r1, r2, r2
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	415b      	adcs	r3, r3
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800341a:	4641      	mov	r1, r8
 800341c:	1851      	adds	r1, r2, r1
 800341e:	6039      	str	r1, [r7, #0]
 8003420:	4649      	mov	r1, r9
 8003422:	414b      	adcs	r3, r1
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003432:	4659      	mov	r1, fp
 8003434:	00cb      	lsls	r3, r1, #3
 8003436:	4651      	mov	r1, sl
 8003438:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343c:	4651      	mov	r1, sl
 800343e:	00ca      	lsls	r2, r1, #3
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	4603      	mov	r3, r0
 8003446:	4642      	mov	r2, r8
 8003448:	189b      	adds	r3, r3, r2
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
 800344c:	464b      	mov	r3, r9
 800344e:	460a      	mov	r2, r1
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	663b      	str	r3, [r7, #96]	; 0x60
 8003460:	667a      	str	r2, [r7, #100]	; 0x64
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800346e:	4649      	mov	r1, r9
 8003470:	008b      	lsls	r3, r1, #2
 8003472:	4641      	mov	r1, r8
 8003474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003478:	4641      	mov	r1, r8
 800347a:	008a      	lsls	r2, r1, #2
 800347c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003480:	f7fd f90a 	bl	8000698 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <UART_SetConfig+0x4e4>)
 800348a:	fba3 1302 	umull	r1, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2164      	movs	r1, #100	; 0x64
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <UART_SetConfig+0x4e4>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4422      	add	r2, r4
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	51eb851f 	.word	0x51eb851f

080034c4 <__errno>:
 80034c4:	4b01      	ldr	r3, [pc, #4]	; (80034cc <__errno+0x8>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000010 	.word	0x20000010

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4d0d      	ldr	r5, [pc, #52]	; (8003508 <__libc_init_array+0x38>)
 80034d4:	4c0d      	ldr	r4, [pc, #52]	; (800350c <__libc_init_array+0x3c>)
 80034d6:	1b64      	subs	r4, r4, r5
 80034d8:	10a4      	asrs	r4, r4, #2
 80034da:	2600      	movs	r6, #0
 80034dc:	42a6      	cmp	r6, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	4d0b      	ldr	r5, [pc, #44]	; (8003510 <__libc_init_array+0x40>)
 80034e2:	4c0c      	ldr	r4, [pc, #48]	; (8003514 <__libc_init_array+0x44>)
 80034e4:	f000 fc8e 	bl	8003e04 <_init>
 80034e8:	1b64      	subs	r4, r4, r5
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	2600      	movs	r6, #0
 80034ee:	42a6      	cmp	r6, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f8:	4798      	blx	r3
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003502:	4798      	blx	r3
 8003504:	3601      	adds	r6, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	08003f34 	.word	0x08003f34
 800350c:	08003f34 	.word	0x08003f34
 8003510:	08003f34 	.word	0x08003f34
 8003514:	08003f38 	.word	0x08003f38

08003518 <memcpy>:
 8003518:	440a      	add	r2, r1
 800351a:	4291      	cmp	r1, r2
 800351c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003520:	d100      	bne.n	8003524 <memcpy+0xc>
 8003522:	4770      	bx	lr
 8003524:	b510      	push	{r4, lr}
 8003526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800352a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352e:	4291      	cmp	r1, r2
 8003530:	d1f9      	bne.n	8003526 <memcpy+0xe>
 8003532:	bd10      	pop	{r4, pc}

08003534 <memset>:
 8003534:	4402      	add	r2, r0
 8003536:	4603      	mov	r3, r0
 8003538:	4293      	cmp	r3, r2
 800353a:	d100      	bne.n	800353e <memset+0xa>
 800353c:	4770      	bx	lr
 800353e:	f803 1b01 	strb.w	r1, [r3], #1
 8003542:	e7f9      	b.n	8003538 <memset+0x4>

08003544 <siprintf>:
 8003544:	b40e      	push	{r1, r2, r3}
 8003546:	b500      	push	{lr}
 8003548:	b09c      	sub	sp, #112	; 0x70
 800354a:	ab1d      	add	r3, sp, #116	; 0x74
 800354c:	9002      	str	r0, [sp, #8]
 800354e:	9006      	str	r0, [sp, #24]
 8003550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <siprintf+0x38>)
 8003556:	9107      	str	r1, [sp, #28]
 8003558:	9104      	str	r1, [sp, #16]
 800355a:	4909      	ldr	r1, [pc, #36]	; (8003580 <siprintf+0x3c>)
 800355c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003560:	9105      	str	r1, [sp, #20]
 8003562:	6800      	ldr	r0, [r0, #0]
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	a902      	add	r1, sp, #8
 8003568:	f000 f868 	bl	800363c <_svfiprintf_r>
 800356c:	9b02      	ldr	r3, [sp, #8]
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	b01c      	add	sp, #112	; 0x70
 8003574:	f85d eb04 	ldr.w	lr, [sp], #4
 8003578:	b003      	add	sp, #12
 800357a:	4770      	bx	lr
 800357c:	20000010 	.word	0x20000010
 8003580:	ffff0208 	.word	0xffff0208

08003584 <__ssputs_r>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	688e      	ldr	r6, [r1, #8]
 800358a:	429e      	cmp	r6, r3
 800358c:	4682      	mov	sl, r0
 800358e:	460c      	mov	r4, r1
 8003590:	4690      	mov	r8, r2
 8003592:	461f      	mov	r7, r3
 8003594:	d838      	bhi.n	8003608 <__ssputs_r+0x84>
 8003596:	898a      	ldrh	r2, [r1, #12]
 8003598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800359c:	d032      	beq.n	8003604 <__ssputs_r+0x80>
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	6909      	ldr	r1, [r1, #16]
 80035a2:	eba5 0901 	sub.w	r9, r5, r1
 80035a6:	6965      	ldr	r5, [r4, #20]
 80035a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035b0:	3301      	adds	r3, #1
 80035b2:	444b      	add	r3, r9
 80035b4:	106d      	asrs	r5, r5, #1
 80035b6:	429d      	cmp	r5, r3
 80035b8:	bf38      	it	cc
 80035ba:	461d      	movcc	r5, r3
 80035bc:	0553      	lsls	r3, r2, #21
 80035be:	d531      	bpl.n	8003624 <__ssputs_r+0xa0>
 80035c0:	4629      	mov	r1, r5
 80035c2:	f000 fb55 	bl	8003c70 <_malloc_r>
 80035c6:	4606      	mov	r6, r0
 80035c8:	b950      	cbnz	r0, 80035e0 <__ssputs_r+0x5c>
 80035ca:	230c      	movs	r3, #12
 80035cc:	f8ca 3000 	str.w	r3, [sl]
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d6:	81a3      	strh	r3, [r4, #12]
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	6921      	ldr	r1, [r4, #16]
 80035e2:	464a      	mov	r2, r9
 80035e4:	f7ff ff98 	bl	8003518 <memcpy>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	6126      	str	r6, [r4, #16]
 80035f6:	6165      	str	r5, [r4, #20]
 80035f8:	444e      	add	r6, r9
 80035fa:	eba5 0509 	sub.w	r5, r5, r9
 80035fe:	6026      	str	r6, [r4, #0]
 8003600:	60a5      	str	r5, [r4, #8]
 8003602:	463e      	mov	r6, r7
 8003604:	42be      	cmp	r6, r7
 8003606:	d900      	bls.n	800360a <__ssputs_r+0x86>
 8003608:	463e      	mov	r6, r7
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	4632      	mov	r2, r6
 800360e:	4641      	mov	r1, r8
 8003610:	f000 faa8 	bl	8003b64 <memmove>
 8003614:	68a3      	ldr	r3, [r4, #8]
 8003616:	1b9b      	subs	r3, r3, r6
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	4433      	add	r3, r6
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	2000      	movs	r0, #0
 8003622:	e7db      	b.n	80035dc <__ssputs_r+0x58>
 8003624:	462a      	mov	r2, r5
 8003626:	f000 fb97 	bl	8003d58 <_realloc_r>
 800362a:	4606      	mov	r6, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d1e1      	bne.n	80035f4 <__ssputs_r+0x70>
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	4650      	mov	r0, sl
 8003634:	f000 fab0 	bl	8003b98 <_free_r>
 8003638:	e7c7      	b.n	80035ca <__ssputs_r+0x46>
	...

0800363c <_svfiprintf_r>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	4698      	mov	r8, r3
 8003642:	898b      	ldrh	r3, [r1, #12]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	b09d      	sub	sp, #116	; 0x74
 8003648:	4607      	mov	r7, r0
 800364a:	460d      	mov	r5, r1
 800364c:	4614      	mov	r4, r2
 800364e:	d50e      	bpl.n	800366e <_svfiprintf_r+0x32>
 8003650:	690b      	ldr	r3, [r1, #16]
 8003652:	b963      	cbnz	r3, 800366e <_svfiprintf_r+0x32>
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	f000 fb0b 	bl	8003c70 <_malloc_r>
 800365a:	6028      	str	r0, [r5, #0]
 800365c:	6128      	str	r0, [r5, #16]
 800365e:	b920      	cbnz	r0, 800366a <_svfiprintf_r+0x2e>
 8003660:	230c      	movs	r3, #12
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	e0d1      	b.n	800380e <_svfiprintf_r+0x1d2>
 800366a:	2340      	movs	r3, #64	; 0x40
 800366c:	616b      	str	r3, [r5, #20]
 800366e:	2300      	movs	r3, #0
 8003670:	9309      	str	r3, [sp, #36]	; 0x24
 8003672:	2320      	movs	r3, #32
 8003674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003678:	f8cd 800c 	str.w	r8, [sp, #12]
 800367c:	2330      	movs	r3, #48	; 0x30
 800367e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003828 <_svfiprintf_r+0x1ec>
 8003682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003686:	f04f 0901 	mov.w	r9, #1
 800368a:	4623      	mov	r3, r4
 800368c:	469a      	mov	sl, r3
 800368e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003692:	b10a      	cbz	r2, 8003698 <_svfiprintf_r+0x5c>
 8003694:	2a25      	cmp	r2, #37	; 0x25
 8003696:	d1f9      	bne.n	800368c <_svfiprintf_r+0x50>
 8003698:	ebba 0b04 	subs.w	fp, sl, r4
 800369c:	d00b      	beq.n	80036b6 <_svfiprintf_r+0x7a>
 800369e:	465b      	mov	r3, fp
 80036a0:	4622      	mov	r2, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	4638      	mov	r0, r7
 80036a6:	f7ff ff6d 	bl	8003584 <__ssputs_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	f000 80aa 	beq.w	8003804 <_svfiprintf_r+0x1c8>
 80036b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036b2:	445a      	add	r2, fp
 80036b4:	9209      	str	r2, [sp, #36]	; 0x24
 80036b6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80a2 	beq.w	8003804 <_svfiprintf_r+0x1c8>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295
 80036c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ca:	f10a 0a01 	add.w	sl, sl, #1
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	9307      	str	r3, [sp, #28]
 80036d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036d6:	931a      	str	r3, [sp, #104]	; 0x68
 80036d8:	4654      	mov	r4, sl
 80036da:	2205      	movs	r2, #5
 80036dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e0:	4851      	ldr	r0, [pc, #324]	; (8003828 <_svfiprintf_r+0x1ec>)
 80036e2:	f7fc fd7d 	bl	80001e0 <memchr>
 80036e6:	9a04      	ldr	r2, [sp, #16]
 80036e8:	b9d8      	cbnz	r0, 8003722 <_svfiprintf_r+0xe6>
 80036ea:	06d0      	lsls	r0, r2, #27
 80036ec:	bf44      	itt	mi
 80036ee:	2320      	movmi	r3, #32
 80036f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f4:	0711      	lsls	r1, r2, #28
 80036f6:	bf44      	itt	mi
 80036f8:	232b      	movmi	r3, #43	; 0x2b
 80036fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003702:	2b2a      	cmp	r3, #42	; 0x2a
 8003704:	d015      	beq.n	8003732 <_svfiprintf_r+0xf6>
 8003706:	9a07      	ldr	r2, [sp, #28]
 8003708:	4654      	mov	r4, sl
 800370a:	2000      	movs	r0, #0
 800370c:	f04f 0c0a 	mov.w	ip, #10
 8003710:	4621      	mov	r1, r4
 8003712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003716:	3b30      	subs	r3, #48	; 0x30
 8003718:	2b09      	cmp	r3, #9
 800371a:	d94e      	bls.n	80037ba <_svfiprintf_r+0x17e>
 800371c:	b1b0      	cbz	r0, 800374c <_svfiprintf_r+0x110>
 800371e:	9207      	str	r2, [sp, #28]
 8003720:	e014      	b.n	800374c <_svfiprintf_r+0x110>
 8003722:	eba0 0308 	sub.w	r3, r0, r8
 8003726:	fa09 f303 	lsl.w	r3, r9, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	46a2      	mov	sl, r4
 8003730:	e7d2      	b.n	80036d8 <_svfiprintf_r+0x9c>
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	1d19      	adds	r1, r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	9103      	str	r1, [sp, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfbb      	ittet	lt
 800373e:	425b      	neglt	r3, r3
 8003740:	f042 0202 	orrlt.w	r2, r2, #2
 8003744:	9307      	strge	r3, [sp, #28]
 8003746:	9307      	strlt	r3, [sp, #28]
 8003748:	bfb8      	it	lt
 800374a:	9204      	strlt	r2, [sp, #16]
 800374c:	7823      	ldrb	r3, [r4, #0]
 800374e:	2b2e      	cmp	r3, #46	; 0x2e
 8003750:	d10c      	bne.n	800376c <_svfiprintf_r+0x130>
 8003752:	7863      	ldrb	r3, [r4, #1]
 8003754:	2b2a      	cmp	r3, #42	; 0x2a
 8003756:	d135      	bne.n	80037c4 <_svfiprintf_r+0x188>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfb8      	it	lt
 8003764:	f04f 33ff 	movlt.w	r3, #4294967295
 8003768:	3402      	adds	r4, #2
 800376a:	9305      	str	r3, [sp, #20]
 800376c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003838 <_svfiprintf_r+0x1fc>
 8003770:	7821      	ldrb	r1, [r4, #0]
 8003772:	2203      	movs	r2, #3
 8003774:	4650      	mov	r0, sl
 8003776:	f7fc fd33 	bl	80001e0 <memchr>
 800377a:	b140      	cbz	r0, 800378e <_svfiprintf_r+0x152>
 800377c:	2340      	movs	r3, #64	; 0x40
 800377e:	eba0 000a 	sub.w	r0, r0, sl
 8003782:	fa03 f000 	lsl.w	r0, r3, r0
 8003786:	9b04      	ldr	r3, [sp, #16]
 8003788:	4303      	orrs	r3, r0
 800378a:	3401      	adds	r4, #1
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003792:	4826      	ldr	r0, [pc, #152]	; (800382c <_svfiprintf_r+0x1f0>)
 8003794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003798:	2206      	movs	r2, #6
 800379a:	f7fc fd21 	bl	80001e0 <memchr>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d038      	beq.n	8003814 <_svfiprintf_r+0x1d8>
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <_svfiprintf_r+0x1f4>)
 80037a4:	bb1b      	cbnz	r3, 80037ee <_svfiprintf_r+0x1b2>
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	3307      	adds	r3, #7
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	3308      	adds	r3, #8
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b4:	4433      	add	r3, r6
 80037b6:	9309      	str	r3, [sp, #36]	; 0x24
 80037b8:	e767      	b.n	800368a <_svfiprintf_r+0x4e>
 80037ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80037be:	460c      	mov	r4, r1
 80037c0:	2001      	movs	r0, #1
 80037c2:	e7a5      	b.n	8003710 <_svfiprintf_r+0xd4>
 80037c4:	2300      	movs	r3, #0
 80037c6:	3401      	adds	r4, #1
 80037c8:	9305      	str	r3, [sp, #20]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 0c0a 	mov.w	ip, #10
 80037d0:	4620      	mov	r0, r4
 80037d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037d6:	3a30      	subs	r2, #48	; 0x30
 80037d8:	2a09      	cmp	r2, #9
 80037da:	d903      	bls.n	80037e4 <_svfiprintf_r+0x1a8>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0c5      	beq.n	800376c <_svfiprintf_r+0x130>
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	e7c3      	b.n	800376c <_svfiprintf_r+0x130>
 80037e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e8:	4604      	mov	r4, r0
 80037ea:	2301      	movs	r3, #1
 80037ec:	e7f0      	b.n	80037d0 <_svfiprintf_r+0x194>
 80037ee:	ab03      	add	r3, sp, #12
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	462a      	mov	r2, r5
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <_svfiprintf_r+0x1f8>)
 80037f6:	a904      	add	r1, sp, #16
 80037f8:	4638      	mov	r0, r7
 80037fa:	f3af 8000 	nop.w
 80037fe:	1c42      	adds	r2, r0, #1
 8003800:	4606      	mov	r6, r0
 8003802:	d1d6      	bne.n	80037b2 <_svfiprintf_r+0x176>
 8003804:	89ab      	ldrh	r3, [r5, #12]
 8003806:	065b      	lsls	r3, r3, #25
 8003808:	f53f af2c 	bmi.w	8003664 <_svfiprintf_r+0x28>
 800380c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800380e:	b01d      	add	sp, #116	; 0x74
 8003810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003814:	ab03      	add	r3, sp, #12
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	462a      	mov	r2, r5
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <_svfiprintf_r+0x1f8>)
 800381c:	a904      	add	r1, sp, #16
 800381e:	4638      	mov	r0, r7
 8003820:	f000 f87a 	bl	8003918 <_printf_i>
 8003824:	e7eb      	b.n	80037fe <_svfiprintf_r+0x1c2>
 8003826:	bf00      	nop
 8003828:	08003ef8 	.word	0x08003ef8
 800382c:	08003f02 	.word	0x08003f02
 8003830:	00000000 	.word	0x00000000
 8003834:	08003585 	.word	0x08003585
 8003838:	08003efe 	.word	0x08003efe

0800383c <_printf_common>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	4616      	mov	r6, r2
 8003842:	4699      	mov	r9, r3
 8003844:	688a      	ldr	r2, [r1, #8]
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800384c:	4293      	cmp	r3, r2
 800384e:	bfb8      	it	lt
 8003850:	4613      	movlt	r3, r2
 8003852:	6033      	str	r3, [r6, #0]
 8003854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003858:	4607      	mov	r7, r0
 800385a:	460c      	mov	r4, r1
 800385c:	b10a      	cbz	r2, 8003862 <_printf_common+0x26>
 800385e:	3301      	adds	r3, #1
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	0699      	lsls	r1, r3, #26
 8003866:	bf42      	ittt	mi
 8003868:	6833      	ldrmi	r3, [r6, #0]
 800386a:	3302      	addmi	r3, #2
 800386c:	6033      	strmi	r3, [r6, #0]
 800386e:	6825      	ldr	r5, [r4, #0]
 8003870:	f015 0506 	ands.w	r5, r5, #6
 8003874:	d106      	bne.n	8003884 <_printf_common+0x48>
 8003876:	f104 0a19 	add.w	sl, r4, #25
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	42ab      	cmp	r3, r5
 8003882:	dc26      	bgt.n	80038d2 <_printf_common+0x96>
 8003884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003888:	1e13      	subs	r3, r2, #0
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	bf18      	it	ne
 800388e:	2301      	movne	r3, #1
 8003890:	0692      	lsls	r2, r2, #26
 8003892:	d42b      	bmi.n	80038ec <_printf_common+0xb0>
 8003894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003898:	4649      	mov	r1, r9
 800389a:	4638      	mov	r0, r7
 800389c:	47c0      	blx	r8
 800389e:	3001      	adds	r0, #1
 80038a0:	d01e      	beq.n	80038e0 <_printf_common+0xa4>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	68e5      	ldr	r5, [r4, #12]
 80038a6:	6832      	ldr	r2, [r6, #0]
 80038a8:	f003 0306 	and.w	r3, r3, #6
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	bf08      	it	eq
 80038b0:	1aad      	subeq	r5, r5, r2
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	bf0c      	ite	eq
 80038b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038bc:	2500      	movne	r5, #0
 80038be:	4293      	cmp	r3, r2
 80038c0:	bfc4      	itt	gt
 80038c2:	1a9b      	subgt	r3, r3, r2
 80038c4:	18ed      	addgt	r5, r5, r3
 80038c6:	2600      	movs	r6, #0
 80038c8:	341a      	adds	r4, #26
 80038ca:	42b5      	cmp	r5, r6
 80038cc:	d11a      	bne.n	8003904 <_printf_common+0xc8>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e008      	b.n	80038e4 <_printf_common+0xa8>
 80038d2:	2301      	movs	r3, #1
 80038d4:	4652      	mov	r2, sl
 80038d6:	4649      	mov	r1, r9
 80038d8:	4638      	mov	r0, r7
 80038da:	47c0      	blx	r8
 80038dc:	3001      	adds	r0, #1
 80038de:	d103      	bne.n	80038e8 <_printf_common+0xac>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	3501      	adds	r5, #1
 80038ea:	e7c6      	b.n	800387a <_printf_common+0x3e>
 80038ec:	18e1      	adds	r1, r4, r3
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	2030      	movs	r0, #48	; 0x30
 80038f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038f6:	4422      	add	r2, r4
 80038f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003900:	3302      	adds	r3, #2
 8003902:	e7c7      	b.n	8003894 <_printf_common+0x58>
 8003904:	2301      	movs	r3, #1
 8003906:	4622      	mov	r2, r4
 8003908:	4649      	mov	r1, r9
 800390a:	4638      	mov	r0, r7
 800390c:	47c0      	blx	r8
 800390e:	3001      	adds	r0, #1
 8003910:	d0e6      	beq.n	80038e0 <_printf_common+0xa4>
 8003912:	3601      	adds	r6, #1
 8003914:	e7d9      	b.n	80038ca <_printf_common+0x8e>
	...

08003918 <_printf_i>:
 8003918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	7e0f      	ldrb	r7, [r1, #24]
 800391e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003920:	2f78      	cmp	r7, #120	; 0x78
 8003922:	4691      	mov	r9, r2
 8003924:	4680      	mov	r8, r0
 8003926:	460c      	mov	r4, r1
 8003928:	469a      	mov	sl, r3
 800392a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800392e:	d807      	bhi.n	8003940 <_printf_i+0x28>
 8003930:	2f62      	cmp	r7, #98	; 0x62
 8003932:	d80a      	bhi.n	800394a <_printf_i+0x32>
 8003934:	2f00      	cmp	r7, #0
 8003936:	f000 80d8 	beq.w	8003aea <_printf_i+0x1d2>
 800393a:	2f58      	cmp	r7, #88	; 0x58
 800393c:	f000 80a3 	beq.w	8003a86 <_printf_i+0x16e>
 8003940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003948:	e03a      	b.n	80039c0 <_printf_i+0xa8>
 800394a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800394e:	2b15      	cmp	r3, #21
 8003950:	d8f6      	bhi.n	8003940 <_printf_i+0x28>
 8003952:	a101      	add	r1, pc, #4	; (adr r1, 8003958 <_printf_i+0x40>)
 8003954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003958:	080039b1 	.word	0x080039b1
 800395c:	080039c5 	.word	0x080039c5
 8003960:	08003941 	.word	0x08003941
 8003964:	08003941 	.word	0x08003941
 8003968:	08003941 	.word	0x08003941
 800396c:	08003941 	.word	0x08003941
 8003970:	080039c5 	.word	0x080039c5
 8003974:	08003941 	.word	0x08003941
 8003978:	08003941 	.word	0x08003941
 800397c:	08003941 	.word	0x08003941
 8003980:	08003941 	.word	0x08003941
 8003984:	08003ad1 	.word	0x08003ad1
 8003988:	080039f5 	.word	0x080039f5
 800398c:	08003ab3 	.word	0x08003ab3
 8003990:	08003941 	.word	0x08003941
 8003994:	08003941 	.word	0x08003941
 8003998:	08003af3 	.word	0x08003af3
 800399c:	08003941 	.word	0x08003941
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003941 	.word	0x08003941
 80039a8:	08003941 	.word	0x08003941
 80039ac:	08003abb 	.word	0x08003abb
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	602a      	str	r2, [r5, #0]
 80039b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0a3      	b.n	8003b0c <_printf_i+0x1f4>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	6829      	ldr	r1, [r5, #0]
 80039c8:	0606      	lsls	r6, r0, #24
 80039ca:	f101 0304 	add.w	r3, r1, #4
 80039ce:	d50a      	bpl.n	80039e6 <_printf_i+0xce>
 80039d0:	680e      	ldr	r6, [r1, #0]
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	da03      	bge.n	80039e0 <_printf_i+0xc8>
 80039d8:	232d      	movs	r3, #45	; 0x2d
 80039da:	4276      	negs	r6, r6
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e0:	485e      	ldr	r0, [pc, #376]	; (8003b5c <_printf_i+0x244>)
 80039e2:	230a      	movs	r3, #10
 80039e4:	e019      	b.n	8003a1a <_printf_i+0x102>
 80039e6:	680e      	ldr	r6, [r1, #0]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039ee:	bf18      	it	ne
 80039f0:	b236      	sxthne	r6, r6
 80039f2:	e7ef      	b.n	80039d4 <_printf_i+0xbc>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	1d19      	adds	r1, r3, #4
 80039fa:	6029      	str	r1, [r5, #0]
 80039fc:	0601      	lsls	r1, r0, #24
 80039fe:	d501      	bpl.n	8003a04 <_printf_i+0xec>
 8003a00:	681e      	ldr	r6, [r3, #0]
 8003a02:	e002      	b.n	8003a0a <_printf_i+0xf2>
 8003a04:	0646      	lsls	r6, r0, #25
 8003a06:	d5fb      	bpl.n	8003a00 <_printf_i+0xe8>
 8003a08:	881e      	ldrh	r6, [r3, #0]
 8003a0a:	4854      	ldr	r0, [pc, #336]	; (8003b5c <_printf_i+0x244>)
 8003a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a0e:	bf0c      	ite	eq
 8003a10:	2308      	moveq	r3, #8
 8003a12:	230a      	movne	r3, #10
 8003a14:	2100      	movs	r1, #0
 8003a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a1a:	6865      	ldr	r5, [r4, #4]
 8003a1c:	60a5      	str	r5, [r4, #8]
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	bfa2      	ittt	ge
 8003a22:	6821      	ldrge	r1, [r4, #0]
 8003a24:	f021 0104 	bicge.w	r1, r1, #4
 8003a28:	6021      	strge	r1, [r4, #0]
 8003a2a:	b90e      	cbnz	r6, 8003a30 <_printf_i+0x118>
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	d04d      	beq.n	8003acc <_printf_i+0x1b4>
 8003a30:	4615      	mov	r5, r2
 8003a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a36:	fb03 6711 	mls	r7, r3, r1, r6
 8003a3a:	5dc7      	ldrb	r7, [r0, r7]
 8003a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a40:	4637      	mov	r7, r6
 8003a42:	42bb      	cmp	r3, r7
 8003a44:	460e      	mov	r6, r1
 8003a46:	d9f4      	bls.n	8003a32 <_printf_i+0x11a>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d10b      	bne.n	8003a64 <_printf_i+0x14c>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	07de      	lsls	r6, r3, #31
 8003a50:	d508      	bpl.n	8003a64 <_printf_i+0x14c>
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	6861      	ldr	r1, [r4, #4]
 8003a56:	4299      	cmp	r1, r3
 8003a58:	bfde      	ittt	le
 8003a5a:	2330      	movle	r3, #48	; 0x30
 8003a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a64:	1b52      	subs	r2, r2, r5
 8003a66:	6122      	str	r2, [r4, #16]
 8003a68:	f8cd a000 	str.w	sl, [sp]
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	aa03      	add	r2, sp, #12
 8003a70:	4621      	mov	r1, r4
 8003a72:	4640      	mov	r0, r8
 8003a74:	f7ff fee2 	bl	800383c <_printf_common>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d14c      	bne.n	8003b16 <_printf_i+0x1fe>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	b004      	add	sp, #16
 8003a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a86:	4835      	ldr	r0, [pc, #212]	; (8003b5c <_printf_i+0x244>)
 8003a88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a8c:	6829      	ldr	r1, [r5, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a94:	6029      	str	r1, [r5, #0]
 8003a96:	061d      	lsls	r5, r3, #24
 8003a98:	d514      	bpl.n	8003ac4 <_printf_i+0x1ac>
 8003a9a:	07df      	lsls	r7, r3, #31
 8003a9c:	bf44      	itt	mi
 8003a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa2:	6023      	strmi	r3, [r4, #0]
 8003aa4:	b91e      	cbnz	r6, 8003aae <_printf_i+0x196>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f023 0320 	bic.w	r3, r3, #32
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	2310      	movs	r3, #16
 8003ab0:	e7b0      	b.n	8003a14 <_printf_i+0xfc>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	f043 0320 	orr.w	r3, r3, #32
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	2378      	movs	r3, #120	; 0x78
 8003abc:	4828      	ldr	r0, [pc, #160]	; (8003b60 <_printf_i+0x248>)
 8003abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ac2:	e7e3      	b.n	8003a8c <_printf_i+0x174>
 8003ac4:	0659      	lsls	r1, r3, #25
 8003ac6:	bf48      	it	mi
 8003ac8:	b2b6      	uxthmi	r6, r6
 8003aca:	e7e6      	b.n	8003a9a <_printf_i+0x182>
 8003acc:	4615      	mov	r5, r2
 8003ace:	e7bb      	b.n	8003a48 <_printf_i+0x130>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	6826      	ldr	r6, [r4, #0]
 8003ad4:	6961      	ldr	r1, [r4, #20]
 8003ad6:	1d18      	adds	r0, r3, #4
 8003ad8:	6028      	str	r0, [r5, #0]
 8003ada:	0635      	lsls	r5, r6, #24
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	d501      	bpl.n	8003ae4 <_printf_i+0x1cc>
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	e002      	b.n	8003aea <_printf_i+0x1d2>
 8003ae4:	0670      	lsls	r0, r6, #25
 8003ae6:	d5fb      	bpl.n	8003ae0 <_printf_i+0x1c8>
 8003ae8:	8019      	strh	r1, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	4615      	mov	r5, r2
 8003af0:	e7ba      	b.n	8003a68 <_printf_i+0x150>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	681d      	ldr	r5, [r3, #0]
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fc fb6e 	bl	80001e0 <memchr>
 8003b04:	b108      	cbz	r0, 8003b0a <_printf_i+0x1f2>
 8003b06:	1b40      	subs	r0, r0, r5
 8003b08:	6060      	str	r0, [r4, #4]
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b14:	e7a8      	b.n	8003a68 <_printf_i+0x150>
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d0ab      	beq.n	8003a7c <_printf_i+0x164>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	079b      	lsls	r3, r3, #30
 8003b28:	d413      	bmi.n	8003b52 <_printf_i+0x23a>
 8003b2a:	68e0      	ldr	r0, [r4, #12]
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	4298      	cmp	r0, r3
 8003b30:	bfb8      	it	lt
 8003b32:	4618      	movlt	r0, r3
 8003b34:	e7a4      	b.n	8003a80 <_printf_i+0x168>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4632      	mov	r2, r6
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	47d0      	blx	sl
 8003b40:	3001      	adds	r0, #1
 8003b42:	d09b      	beq.n	8003a7c <_printf_i+0x164>
 8003b44:	3501      	adds	r5, #1
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	9903      	ldr	r1, [sp, #12]
 8003b4a:	1a5b      	subs	r3, r3, r1
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dcf2      	bgt.n	8003b36 <_printf_i+0x21e>
 8003b50:	e7eb      	b.n	8003b2a <_printf_i+0x212>
 8003b52:	2500      	movs	r5, #0
 8003b54:	f104 0619 	add.w	r6, r4, #25
 8003b58:	e7f5      	b.n	8003b46 <_printf_i+0x22e>
 8003b5a:	bf00      	nop
 8003b5c:	08003f09 	.word	0x08003f09
 8003b60:	08003f1a 	.word	0x08003f1a

08003b64 <memmove>:
 8003b64:	4288      	cmp	r0, r1
 8003b66:	b510      	push	{r4, lr}
 8003b68:	eb01 0402 	add.w	r4, r1, r2
 8003b6c:	d902      	bls.n	8003b74 <memmove+0x10>
 8003b6e:	4284      	cmp	r4, r0
 8003b70:	4623      	mov	r3, r4
 8003b72:	d807      	bhi.n	8003b84 <memmove+0x20>
 8003b74:	1e43      	subs	r3, r0, #1
 8003b76:	42a1      	cmp	r1, r4
 8003b78:	d008      	beq.n	8003b8c <memmove+0x28>
 8003b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b82:	e7f8      	b.n	8003b76 <memmove+0x12>
 8003b84:	4402      	add	r2, r0
 8003b86:	4601      	mov	r1, r0
 8003b88:	428a      	cmp	r2, r1
 8003b8a:	d100      	bne.n	8003b8e <memmove+0x2a>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b96:	e7f7      	b.n	8003b88 <memmove+0x24>

08003b98 <_free_r>:
 8003b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d044      	beq.n	8003c28 <_free_r+0x90>
 8003b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba2:	9001      	str	r0, [sp, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8003baa:	bfb8      	it	lt
 8003bac:	18e4      	addlt	r4, r4, r3
 8003bae:	f000 f913 	bl	8003dd8 <__malloc_lock>
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <_free_r+0x94>)
 8003bb4:	9801      	ldr	r0, [sp, #4]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	b933      	cbnz	r3, 8003bc8 <_free_r+0x30>
 8003bba:	6063      	str	r3, [r4, #4]
 8003bbc:	6014      	str	r4, [r2, #0]
 8003bbe:	b003      	add	sp, #12
 8003bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bc4:	f000 b90e 	b.w	8003de4 <__malloc_unlock>
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	d908      	bls.n	8003bde <_free_r+0x46>
 8003bcc:	6825      	ldr	r5, [r4, #0]
 8003bce:	1961      	adds	r1, r4, r5
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	bf01      	itttt	eq
 8003bd4:	6819      	ldreq	r1, [r3, #0]
 8003bd6:	685b      	ldreq	r3, [r3, #4]
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	e7ed      	b.n	8003bba <_free_r+0x22>
 8003bde:	461a      	mov	r2, r3
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b10b      	cbz	r3, 8003be8 <_free_r+0x50>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d9fa      	bls.n	8003bde <_free_r+0x46>
 8003be8:	6811      	ldr	r1, [r2, #0]
 8003bea:	1855      	adds	r5, r2, r1
 8003bec:	42a5      	cmp	r5, r4
 8003bee:	d10b      	bne.n	8003c08 <_free_r+0x70>
 8003bf0:	6824      	ldr	r4, [r4, #0]
 8003bf2:	4421      	add	r1, r4
 8003bf4:	1854      	adds	r4, r2, r1
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	d1e0      	bne.n	8003bbe <_free_r+0x26>
 8003bfc:	681c      	ldr	r4, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	6053      	str	r3, [r2, #4]
 8003c02:	4421      	add	r1, r4
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	e7da      	b.n	8003bbe <_free_r+0x26>
 8003c08:	d902      	bls.n	8003c10 <_free_r+0x78>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	e7d6      	b.n	8003bbe <_free_r+0x26>
 8003c10:	6825      	ldr	r5, [r4, #0]
 8003c12:	1961      	adds	r1, r4, r5
 8003c14:	428b      	cmp	r3, r1
 8003c16:	bf04      	itt	eq
 8003c18:	6819      	ldreq	r1, [r3, #0]
 8003c1a:	685b      	ldreq	r3, [r3, #4]
 8003c1c:	6063      	str	r3, [r4, #4]
 8003c1e:	bf04      	itt	eq
 8003c20:	1949      	addeq	r1, r1, r5
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	6054      	str	r4, [r2, #4]
 8003c26:	e7ca      	b.n	8003bbe <_free_r+0x26>
 8003c28:	b003      	add	sp, #12
 8003c2a:	bd30      	pop	{r4, r5, pc}
 8003c2c:	20000158 	.word	0x20000158

08003c30 <sbrk_aligned>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4e0e      	ldr	r6, [pc, #56]	; (8003c6c <sbrk_aligned+0x3c>)
 8003c34:	460c      	mov	r4, r1
 8003c36:	6831      	ldr	r1, [r6, #0]
 8003c38:	4605      	mov	r5, r0
 8003c3a:	b911      	cbnz	r1, 8003c42 <sbrk_aligned+0x12>
 8003c3c:	f000 f8bc 	bl	8003db8 <_sbrk_r>
 8003c40:	6030      	str	r0, [r6, #0]
 8003c42:	4621      	mov	r1, r4
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f8b7 	bl	8003db8 <_sbrk_r>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d00a      	beq.n	8003c64 <sbrk_aligned+0x34>
 8003c4e:	1cc4      	adds	r4, r0, #3
 8003c50:	f024 0403 	bic.w	r4, r4, #3
 8003c54:	42a0      	cmp	r0, r4
 8003c56:	d007      	beq.n	8003c68 <sbrk_aligned+0x38>
 8003c58:	1a21      	subs	r1, r4, r0
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 f8ac 	bl	8003db8 <_sbrk_r>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d101      	bne.n	8003c68 <sbrk_aligned+0x38>
 8003c64:	f04f 34ff 	mov.w	r4, #4294967295
 8003c68:	4620      	mov	r0, r4
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	2000015c 	.word	0x2000015c

08003c70 <_malloc_r>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	1ccd      	adds	r5, r1, #3
 8003c76:	f025 0503 	bic.w	r5, r5, #3
 8003c7a:	3508      	adds	r5, #8
 8003c7c:	2d0c      	cmp	r5, #12
 8003c7e:	bf38      	it	cc
 8003c80:	250c      	movcc	r5, #12
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	4607      	mov	r7, r0
 8003c86:	db01      	blt.n	8003c8c <_malloc_r+0x1c>
 8003c88:	42a9      	cmp	r1, r5
 8003c8a:	d905      	bls.n	8003c98 <_malloc_r+0x28>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	2600      	movs	r6, #0
 8003c92:	4630      	mov	r0, r6
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c98:	4e2e      	ldr	r6, [pc, #184]	; (8003d54 <_malloc_r+0xe4>)
 8003c9a:	f000 f89d 	bl	8003dd8 <__malloc_lock>
 8003c9e:	6833      	ldr	r3, [r6, #0]
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	bb34      	cbnz	r4, 8003cf2 <_malloc_r+0x82>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	f7ff ffc2 	bl	8003c30 <sbrk_aligned>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	4604      	mov	r4, r0
 8003cb0:	d14d      	bne.n	8003d4e <_malloc_r+0xde>
 8003cb2:	6834      	ldr	r4, [r6, #0]
 8003cb4:	4626      	mov	r6, r4
 8003cb6:	2e00      	cmp	r6, #0
 8003cb8:	d140      	bne.n	8003d3c <_malloc_r+0xcc>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	4631      	mov	r1, r6
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	eb04 0803 	add.w	r8, r4, r3
 8003cc4:	f000 f878 	bl	8003db8 <_sbrk_r>
 8003cc8:	4580      	cmp	r8, r0
 8003cca:	d13a      	bne.n	8003d42 <_malloc_r+0xd2>
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	3503      	adds	r5, #3
 8003cd0:	1a6d      	subs	r5, r5, r1
 8003cd2:	f025 0503 	bic.w	r5, r5, #3
 8003cd6:	3508      	adds	r5, #8
 8003cd8:	2d0c      	cmp	r5, #12
 8003cda:	bf38      	it	cc
 8003cdc:	250c      	movcc	r5, #12
 8003cde:	4629      	mov	r1, r5
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f7ff ffa5 	bl	8003c30 <sbrk_aligned>
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d02b      	beq.n	8003d42 <_malloc_r+0xd2>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	442b      	add	r3, r5
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	e00e      	b.n	8003d10 <_malloc_r+0xa0>
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	1b52      	subs	r2, r2, r5
 8003cf6:	d41e      	bmi.n	8003d36 <_malloc_r+0xc6>
 8003cf8:	2a0b      	cmp	r2, #11
 8003cfa:	d916      	bls.n	8003d2a <_malloc_r+0xba>
 8003cfc:	1961      	adds	r1, r4, r5
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6025      	str	r5, [r4, #0]
 8003d02:	bf18      	it	ne
 8003d04:	6059      	strne	r1, [r3, #4]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	bf08      	it	eq
 8003d0a:	6031      	streq	r1, [r6, #0]
 8003d0c:	5162      	str	r2, [r4, r5]
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	4638      	mov	r0, r7
 8003d12:	f104 060b 	add.w	r6, r4, #11
 8003d16:	f000 f865 	bl	8003de4 <__malloc_unlock>
 8003d1a:	f026 0607 	bic.w	r6, r6, #7
 8003d1e:	1d23      	adds	r3, r4, #4
 8003d20:	1af2      	subs	r2, r6, r3
 8003d22:	d0b6      	beq.n	8003c92 <_malloc_r+0x22>
 8003d24:	1b9b      	subs	r3, r3, r6
 8003d26:	50a3      	str	r3, [r4, r2]
 8003d28:	e7b3      	b.n	8003c92 <_malloc_r+0x22>
 8003d2a:	6862      	ldr	r2, [r4, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	bf0c      	ite	eq
 8003d30:	6032      	streq	r2, [r6, #0]
 8003d32:	605a      	strne	r2, [r3, #4]
 8003d34:	e7ec      	b.n	8003d10 <_malloc_r+0xa0>
 8003d36:	4623      	mov	r3, r4
 8003d38:	6864      	ldr	r4, [r4, #4]
 8003d3a:	e7b2      	b.n	8003ca2 <_malloc_r+0x32>
 8003d3c:	4634      	mov	r4, r6
 8003d3e:	6876      	ldr	r6, [r6, #4]
 8003d40:	e7b9      	b.n	8003cb6 <_malloc_r+0x46>
 8003d42:	230c      	movs	r3, #12
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4638      	mov	r0, r7
 8003d48:	f000 f84c 	bl	8003de4 <__malloc_unlock>
 8003d4c:	e7a1      	b.n	8003c92 <_malloc_r+0x22>
 8003d4e:	6025      	str	r5, [r4, #0]
 8003d50:	e7de      	b.n	8003d10 <_malloc_r+0xa0>
 8003d52:	bf00      	nop
 8003d54:	20000158 	.word	0x20000158

08003d58 <_realloc_r>:
 8003d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	4614      	mov	r4, r2
 8003d60:	460e      	mov	r6, r1
 8003d62:	b921      	cbnz	r1, 8003d6e <_realloc_r+0x16>
 8003d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	4611      	mov	r1, r2
 8003d6a:	f7ff bf81 	b.w	8003c70 <_malloc_r>
 8003d6e:	b92a      	cbnz	r2, 8003d7c <_realloc_r+0x24>
 8003d70:	f7ff ff12 	bl	8003b98 <_free_r>
 8003d74:	4625      	mov	r5, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d7c:	f000 f838 	bl	8003df0 <_malloc_usable_size_r>
 8003d80:	4284      	cmp	r4, r0
 8003d82:	4607      	mov	r7, r0
 8003d84:	d802      	bhi.n	8003d8c <_realloc_r+0x34>
 8003d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d8a:	d812      	bhi.n	8003db2 <_realloc_r+0x5a>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4640      	mov	r0, r8
 8003d90:	f7ff ff6e 	bl	8003c70 <_malloc_r>
 8003d94:	4605      	mov	r5, r0
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d0ed      	beq.n	8003d76 <_realloc_r+0x1e>
 8003d9a:	42bc      	cmp	r4, r7
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	4631      	mov	r1, r6
 8003da0:	bf28      	it	cs
 8003da2:	463a      	movcs	r2, r7
 8003da4:	f7ff fbb8 	bl	8003518 <memcpy>
 8003da8:	4631      	mov	r1, r6
 8003daa:	4640      	mov	r0, r8
 8003dac:	f7ff fef4 	bl	8003b98 <_free_r>
 8003db0:	e7e1      	b.n	8003d76 <_realloc_r+0x1e>
 8003db2:	4635      	mov	r5, r6
 8003db4:	e7df      	b.n	8003d76 <_realloc_r+0x1e>
	...

08003db8 <_sbrk_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d06      	ldr	r5, [pc, #24]	; (8003dd4 <_sbrk_r+0x1c>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fd fa6e 	bl	80012a4 <_sbrk>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_sbrk_r+0x1a>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_sbrk_r+0x1a>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000160 	.word	0x20000160

08003dd8 <__malloc_lock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_lock+0x8>)
 8003dda:	f000 b811 	b.w	8003e00 <__retarget_lock_acquire_recursive>
 8003dde:	bf00      	nop
 8003de0:	20000164 	.word	0x20000164

08003de4 <__malloc_unlock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__malloc_unlock+0x8>)
 8003de6:	f000 b80c 	b.w	8003e02 <__retarget_lock_release_recursive>
 8003dea:	bf00      	nop
 8003dec:	20000164 	.word	0x20000164

08003df0 <_malloc_usable_size_r>:
 8003df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df4:	1f18      	subs	r0, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfbc      	itt	lt
 8003dfa:	580b      	ldrlt	r3, [r1, r0]
 8003dfc:	18c0      	addlt	r0, r0, r3
 8003dfe:	4770      	bx	lr

08003e00 <__retarget_lock_acquire_recursive>:
 8003e00:	4770      	bx	lr

08003e02 <__retarget_lock_release_recursive>:
 8003e02:	4770      	bx	lr

08003e04 <_init>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr

08003e10 <_fini>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr
