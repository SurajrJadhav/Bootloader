
bootloader_003_xmodem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003118  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003344  08003344  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800334c  0800334c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000150  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c45  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be1  00000000  00000000  00029c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa16  00000000  00000000  0002c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a16  00000000  00000000  0004c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf06f  00000000  00000000  00055c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114c8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002058  00000000  00000000  00114cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003288 	.word	0x08003288

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003288 	.word	0x08003288

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <bootloader_jump_to_user_code>:
#include "main.h"
#include "xmodem.h"

//#define UPDATE_OVER_UART

BL_StatusTypedef bootloader_jump_to_user_code(UART_HandleTypeDef*BL_UART){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	if(bootloader_signature_get_reset_flag(BL_UART))
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f000 f961 	bl	8000bb4 <bootloader_signature_get_reset_flag>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d034      	beq.n	8000962 <bootloader_jump_to_user_code+0x7e>
				return BL_ERROR;
			}
		}
#else
		uint8_t input;
		HAL_UART_Transmit(huart5, "Update available press switch for update\n\r", 44, HAL_MAX_DELAY);
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	222c      	movs	r2, #44	; 0x2c
 80008fe:	4924      	ldr	r1, [pc, #144]	; (8000990 <bootloader_jump_to_user_code+0xac>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f002 f87e 	bl	8002a02 <HAL_UART_Transmit>

		uint32_t lasttick= HAL_GetTick();
 8000906:	f000 fe3f 	bl	8001588 <HAL_GetTick>
 800090a:	6178      	str	r0, [r7, #20]

		while((HAL_GetTick() - lasttick) <= 5000 ){
 800090c:	e020      	b.n	8000950 <bootloader_jump_to_user_code+0x6c>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==SET)
 800090e:	2101      	movs	r1, #1
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <bootloader_jump_to_user_code+0xb0>)
 8000912:	f001 fb9f 	bl	8002054 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d119      	bne.n	8000950 <bootloader_jump_to_user_code+0x6c>
		{
			/*update application area*/
			if(bootloader_app_update(BL_UART)==BL_OK){
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f95b 	bl	8000bd8 <bootloader_app_update>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <bootloader_jump_to_user_code+0x5a>
				/*change flag in signature area*/
				bootloader_update_signature_reset_flag(huart5);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f8eb 	bl	8000b04 <bootloader_update_signature_reset_flag>
				HAL_UART_Transmit(huart5, "Updated\n", strlen("Updated"), HAL_MAX_DELAY);
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	2207      	movs	r2, #7
 8000934:	4918      	ldr	r1, [pc, #96]	; (8000998 <bootloader_jump_to_user_code+0xb4>)
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f002 f863 	bl	8002a02 <HAL_UART_Transmit>
				break;
 800093c:	e011      	b.n	8000962 <bootloader_jump_to_user_code+0x7e>
			}
			else{
				HAL_UART_Transmit(huart5, "Update Failed",strlen("Update Failed"), HAL_MAX_DELAY);
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	220d      	movs	r2, #13
 8000944:	4915      	ldr	r1, [pc, #84]	; (800099c <bootloader_jump_to_user_code+0xb8>)
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f002 f85b 	bl	8002a02 <HAL_UART_Transmit>
				return BL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e01a      	b.n	8000986 <bootloader_jump_to_user_code+0xa2>
		while((HAL_GetTick() - lasttick) <= 5000 ){
 8000950:	f000 fe1a 	bl	8001588 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	f241 3288 	movw	r2, #5000	; 0x1388
 800095e:	4293      	cmp	r3, r2
 8000960:	d9d5      	bls.n	800090e <bootloader_jump_to_user_code+0x2a>
	}

//	bootloader_unlock_flash();

	//set msp
	uint32_t msp_value=*(uint32_t*)FLASH_APPLICATION_AREA;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <bootloader_jump_to_user_code+0xbc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f383 8808 	msr	MSP, r3
}
 8000972:	bf00      	nop
	__set_MSP(msp_value);

	//relocate vector table
	SCB->VTOR=(__IOM uint32_t)FLASH_APPLICATION_AREA;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <bootloader_jump_to_user_code+0xc0>)
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <bootloader_jump_to_user_code+0xbc>)
 8000978:	609a      	str	r2, [r3, #8]

	//create function pointer for reset handler
	void(*reset_handler)(void);

	reset_handler=(void(*)(void))(*(uint32_t *)(FLASH_APPLICATION_AREA+4U));
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <bootloader_jump_to_user_code+0xc4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	60fb      	str	r3, [r7, #12]

	reset_handler();
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4798      	blx	r3

	return BL_ERROR;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	080032a0 	.word	0x080032a0
 8000994:	40020000 	.word	0x40020000
 8000998:	080032cc 	.word	0x080032cc
 800099c:	080032d8 	.word	0x080032d8
 80009a0:	08010000 	.word	0x08010000
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	08010004 	.word	0x08010004

080009ac <bootloader_get_bl_version>:

/*********Bootloader Command Functions*****************************/

BL_StatusTypedef bootloader_get_bl_version(UART_HandleTypeDef*BL_UART)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

}
 80009b4:	bf00      	nop
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <bootloader_write_bin_to_memory>:

BL_StatusTypedef bootloader_write_bin_to_memory(uint8_t *rxbuf ,int size)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	static uint32_t address=FLASH_DOWNLOAD_AREA;

	HAL_FLASH_Unlock();
 80009ce:	f000 ff21 	bl	8001814 <HAL_FLASH_Unlock>

	int i=0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
	while(i < size){
 80009d6:	e01a      	b.n	8000a0e <bootloader_write_bin_to_memory+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,address++, *(rxbuf+i)) == HAL_OK ){
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <bootloader_write_bin_to_memory+0x60>)
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	1c4b      	adds	r3, r1, #1
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <bootloader_write_bin_to_memory+0x60>)
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2200      	movs	r2, #0
 80009ee:	461c      	mov	r4, r3
 80009f0:	4615      	mov	r5, r2
 80009f2:	4622      	mov	r2, r4
 80009f4:	462b      	mov	r3, r5
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 feb8 	bl	800176c <HAL_FLASH_Program>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <bootloader_write_bin_to_memory+0x46>
			i++;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e001      	b.n	8000a0e <bootloader_write_bin_to_memory+0x4a>
		}
		else{
			return BL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e006      	b.n	8000a1c <bootloader_write_bin_to_memory+0x58>
	while(i < size){
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dbe0      	blt.n	80009d8 <bootloader_write_bin_to_memory+0x14>
		}
	}

	HAL_FLASH_Lock();
 8000a16:	f000 ff1f 	bl	8001858 <HAL_FLASH_Lock>
	return BL_OK;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bdb0      	pop	{r4, r5, r7, pc}
 8000a24:	20000000 	.word	0x20000000

08000a28 <bootloader_flash_erase_signature_area>:
BL_StatusTypedef bootloader_flash_erase_signature_area(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0



	/*erase flash*/
	HAL_FLASH_Unlock();
 8000a2c:	f000 fef2 	bl	8001814 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_3,FLASH_VOLTAGE_RANGE_3);
 8000a30:	2102      	movs	r1, #2
 8000a32:	2003      	movs	r0, #3
 8000a34:	f001 f8e4 	bl	8001c00 <FLASH_Erase_Sector>

	HAL_FLASH_Lock();
 8000a38:	f000 ff0e 	bl	8001858 <HAL_FLASH_Lock>

	return BL_OK;
 8000a3c:	2300      	movs	r3, #0

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <bootloader_flash_erase_download_area>:

BL_StatusTypedef bootloader_flash_erase_download_area(){
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialise flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000a58:	f000 fedc 	bl	8001814 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000a5c:	f107 0214 	add.w	r2, r7, #20
 8000a60:	463b      	mov	r3, r7
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f837 	bl	8001ad8 <HAL_FLASHEx_Erase>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <bootloader_flash_erase_download_area+0x32>
		return BL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e002      	b.n	8000a7a <bootloader_flash_erase_download_area+0x38>
	}
	HAL_FLASH_Lock();
 8000a74:	f000 fef0 	bl	8001858 <HAL_FLASH_Lock>

	return BL_OK;
 8000a78:	2300      	movs	r3, #0

}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <bootloader_flash_erase_application_area>:
BL_StatusTypedef bootloader_flash_erase_application_area(){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialize flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000a98:	f000 febc 	bl	8001814 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000a9c:	f107 0214 	add.w	r2, r7, #20
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f817 	bl	8001ad8 <HAL_FLASHEx_Erase>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <bootloader_flash_erase_application_area+0x32>
		return BL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e002      	b.n	8000aba <bootloader_flash_erase_application_area+0x38>
	}
	HAL_FLASH_Lock();
 8000ab4:	f000 fed0 	bl	8001858 <HAL_FLASH_Lock>

	return BL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <bootloader_update_signature_set_flag>:

BL_StatusTypedef bootloader_read_memory(UART_HandleTypeDef*BL_UART){

}

BL_StatusTypedef bootloader_update_signature_set_flag(UART_HandleTypeDef*BL_UART){
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000acc:	f000 f8ba 	bl	8000c44 <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <bootloader_update_signature_set_flag+0x3c>)
 8000ad2:	f107 0408 	add.w	r4, r7, #8
 8000ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
	bootloader_flash_erase_signature_area();
 8000ae0:	f7ff ffa2 	bl	8000a28 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <bootloader_update_signature_set_flag+0x3c>)
 8000ae6:	461c      	mov	r4, r3
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/*update signature*/
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000af2:	f000 f8c3 	bl	8000c7c <bootloader_lock_flash>
}
 8000af6:	bf00      	nop
 8000af8:	4618      	mov	r0, r3
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	0800c000 	.word	0x0800c000

08000b04 <bootloader_update_signature_reset_flag>:
BL_StatusTypedef bootloader_update_signature_reset_flag(UART_HandleTypeDef*BL_UART){
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000b0c:	f000 f89a 	bl	8000c44 <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <bootloader_update_signature_reset_flag+0x3c>)
 8000b12:	f107 0408 	add.w	r4, r7, #8
 8000b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
	/*update signature*/
	bootloader_flash_erase_signature_area();
 8000b20:	f7ff ff82 	bl	8000a28 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <bootloader_update_signature_reset_flag+0x3c>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000b32:	f000 f8a3 	bl	8000c7c <bootloader_lock_flash>
}
 8000b36:	bf00      	nop
 8000b38:	4618      	mov	r0, r3
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	0800c000 	.word	0x0800c000
 8000b44:	00000000 	.word	0x00000000

08000b48 <bootloader_update_signature_app_version>:
BL_StatusTypedef bootloader_update_signature_app_version(UART_HandleTypeDef*BL_UART){
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000b50:	f000 f878 	bl	8000c44 <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <bootloader_update_signature_app_version+0x68>)
 8000b56:	f107 0408 	add.w	r4, r7, #8
 8000b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.app_version+=0.1;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fc94 	bl	8000490 <__aeabi_f2d>
 8000b68:	a30f      	add	r3, pc, #60	; (adr r3, 8000ba8 <bootloader_update_signature_app_version+0x60>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f7ff fb31 	bl	80001d4 <__adddf3>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff fce1 	bl	8000540 <__aeabi_d2f>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	60fb      	str	r3, [r7, #12]

	bootloader_flash_erase_signature_area();
 8000b82:	f7ff ff51 	bl	8000a28 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <bootloader_update_signature_app_version+0x68>)
 8000b88:	461c      	mov	r4, r3
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*update signature*/
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000b94:	f000 f872 	bl	8000c7c <bootloader_lock_flash>
}
 8000b98:	bf00      	nop
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	9999999a 	.word	0x9999999a
 8000bac:	3fb99999 	.word	0x3fb99999
 8000bb0:	0800c000 	.word	0x0800c000

08000bb4 <bootloader_signature_get_reset_flag>:
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
}

int bootloader_signature_get_reset_flag(UART_HandleTypeDef*BL_UART){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

	/*open flash for operation*/
	bootloader_unlock_flash();
 8000bbc:	f000 f842 	bl	8000c44 <bootloader_unlock_flash>

	uint8_t flag=((bl_sig_t *)FLASH_SIGNATURE_AREA)->update_flag;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <bootloader_signature_get_reset_flag+0x20>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	73fb      	strb	r3, [r7, #15]

	/*lock flash operation*/
	bootloader_lock_flash();
 8000bc6:	f000 f859 	bl	8000c7c <bootloader_lock_flash>
	return flag;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	0800c000 	.word	0x0800c000

08000bd8 <bootloader_app_update>:


BL_StatusTypedef bootloader_app_update(UART_HandleTypeDef*BL_UART){
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	/*erase memory in order to write*/
	bootloader_flash_erase_application_area();
 8000be0:	f7ff ff4f 	bl	8000a82 <bootloader_flash_erase_application_area>

	HAL_FLASH_Unlock();
 8000be4:	f000 fe16 	bl	8001814 <HAL_FLASH_Unlock>
	uint32_t address=FLASH_APPLICATION_AREA;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <bootloader_app_update+0x64>)
 8000bea:	60fb      	str	r3, [r7, #12]
	uint32_t *data =FLASH_DOWNLOAD_AREA;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <bootloader_app_update+0x68>)
 8000bee:	60bb      	str	r3, [r7, #8]

	while(*data != 0xffffffff){
 8000bf0:	e017      	b.n	8000c22 <bootloader_app_update+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data)==HAL_ERROR)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	461c      	mov	r4, r3
 8000bfa:	4615      	mov	r5, r2
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	462b      	mov	r3, r5
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 fdb2 	bl	800176c <HAL_FLASH_Program>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d103      	bne.n	8000c16 <bootloader_app_update+0x3e>
		{
			HAL_FLASH_Lock();
 8000c0e:	f000 fe23 	bl	8001858 <HAL_FLASH_Lock>
			return BL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00d      	b.n	8000c32 <bootloader_app_update+0x5a>
		}
		address=address+4;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
		data++;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
	while(*data != 0xffffffff){
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2a:	d1e2      	bne.n	8000bf2 <bootloader_app_update+0x1a>
	}
	HAL_FLASH_Lock();
 8000c2c:	f000 fe14 	bl	8001858 <HAL_FLASH_Lock>
	return BL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08010000 	.word	0x08010000
 8000c40:	08080000 	.word	0x08080000

08000c44 <bootloader_unlock_flash>:
	bootloader_lock_flash();

}


BL_StatusTypedef bootloader_unlock_flash(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000c48:	f000 fde4 	bl	8001814 <HAL_FLASH_Unlock>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c56:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <bootloader_unlock_flash+0x34>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6113      	str	r3, [r2, #16]
}
 8000c70:	bf00      	nop
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <bootloader_lock_flash>:
BL_StatusTypedef bootloader_lock_flash(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	/*disable programming enable bit*/
	FLASH->CR &= (~FLASH_CR_PG);
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <bootloader_lock_flash+0x1c>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <bootloader_lock_flash+0x1c>)
 8000c86:	f023 0301 	bic.w	r3, r3, #1
 8000c8a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8000c8c:	f000 fde4 	bl	8001858 <HAL_FLASH_Lock>
}
 8000c90:	bf00      	nop
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ca0:	f000 fc0c 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f816 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 f89c 	bl	8000de4 <MX_GPIO_Init>
  MX_UART5_Init();
 8000cac:	f000 f870 	bl	8000d90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /*Enter Bootloader mode when User_button is pressed*/
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <main+0x30>)
 8000cb4:	f001 f9ce 	bl	8002054 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <main+0x28>
	  bootloader_mode();
 8000cbe:	f000 f8f1 	bl	8000ea4 <bootloader_mode>
 8000cc2:	e002      	b.n	8000cca <main+0x2e>
  }
  else{
	  bootloader_jump_to_user_code(&huart5);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <main+0x34>)
 8000cc6:	f7ff fe0d 	bl	80008e4 <bootloader_jump_to_user_code>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0x2e>
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	2000002c 	.word	0x2000002c

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	; 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2230      	movs	r2, #48	; 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fac8 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <SystemClock_Config+0xb4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <SystemClock_Config+0xb4>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <SystemClock_Config+0xb4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <SystemClock_Config+0xb8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <SystemClock_Config+0xb8>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SystemClock_Config+0xb8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 f9b7 	bl	80020b8 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d50:	f000 f8fe 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fc1a 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d7a:	f000 f8e9 	bl	8000f50 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3750      	adds	r7, #80	; 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_UART5_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dc8:	f001 fdce 	bl	8002968 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f8bd 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000002c 	.word	0x2000002c
 8000de0:	40005000 	.word	0x40005000

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <MX_GPIO_Init+0xb8>)
 8000e56:	f001 f915 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e6e:	f000 ff55 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0xb8>)
 8000e8c:	f000 ff46 	bl	8001d1c <HAL_GPIO_Init>

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <bootloader_mode>:

/* USER CODE BEGIN 4 */
void bootloader_mode(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000eae:	4821      	ldr	r0, [pc, #132]	; (8000f34 <bootloader_mode+0x90>)
 8000eb0:	f001 f8e8 	bl	8002084 <HAL_GPIO_WritePin>
	/*Use UART5 for bootloader command*/
	HAL_UART_Transmit(&huart5,(uint8_t*) "Welcome to bootloader\r\n", strlen("Welcome to bootloder\r\n"),HAL_MAX_DELAY );
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2216      	movs	r2, #22
 8000eba:	491f      	ldr	r1, [pc, #124]	; (8000f38 <bootloader_mode+0x94>)
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <bootloader_mode+0x98>)
 8000ebe:	f001 fda0 	bl	8002a02 <HAL_UART_Transmit>

	/*poll UART5 to read data*/
	while(1)
	{
		/*Receive command from host*/
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <bootloader_mode+0x9c>)
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <bootloader_mode+0x98>)
 8000ecc:	f001 fe2b 	bl	8002b26 <HAL_UART_Receive>

		//break through cmd
		switch(cmdBuf[0])
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <bootloader_mode+0x9c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b32      	cmp	r3, #50	; 0x32
 8000ed6:	d006      	beq.n	8000ee6 <bootloader_mode+0x42>
 8000ed8:	2b32      	cmp	r3, #50	; 0x32
 8000eda:	dc23      	bgt.n	8000f24 <bootloader_mode+0x80>
 8000edc:	2b30      	cmp	r3, #48	; 0x30
 8000ede:	d006      	beq.n	8000eee <bootloader_mode+0x4a>
 8000ee0:	2b31      	cmp	r3, #49	; 0x31
 8000ee2:	d008      	beq.n	8000ef6 <bootloader_mode+0x52>
 8000ee4:	e01e      	b.n	8000f24 <bootloader_mode+0x80>
		{
		case BL_GET_VERSION:
			bootloader_get_bl_version(&huart5);
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <bootloader_mode+0x98>)
 8000ee8:	f7ff fd60 	bl	80009ac <bootloader_get_bl_version>
			break;
 8000eec:	e021      	b.n	8000f32 <bootloader_mode+0x8e>
		case BL_JMP_TO_USER_CODE:
			bootloader_jump_to_user_code(&huart5);
 8000eee:	4813      	ldr	r0, [pc, #76]	; (8000f3c <bootloader_mode+0x98>)
 8000ef0:	f7ff fcf8 	bl	80008e4 <bootloader_jump_to_user_code>
			break;
 8000ef4:	e01d      	b.n	8000f32 <bootloader_mode+0x8e>
		case BL_WRITE_BIN_TO_MEMORY:
			HAL_UART_Transmit(&huart5,(uint8_t*) "xmodem\n\r", strlen("xmodem\n\r"),HAL_MAX_DELAY );
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2208      	movs	r2, #8
 8000efc:	4911      	ldr	r1, [pc, #68]	; (8000f44 <bootloader_mode+0xa0>)
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <bootloader_mode+0x98>)
 8000f00:	f001 fd7f 	bl	8002a02 <HAL_UART_Transmit>

			bootloader_flash_erase_download_area();
 8000f04:	f7ff fd9d 	bl	8000a42 <bootloader_flash_erase_download_area>
			while(1){
				if(xmodem_receive(&huart5)==XMODEM_ERROR){
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <bootloader_mode+0x98>)
 8000f0a:	f000 f97f 	bl	800120c <xmodem_receive>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1f9      	bne.n	8000f08 <bootloader_mode+0x64>
					HAL_UART_Transmit(&huart5, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2205      	movs	r2, #5
 8000f1a:	490b      	ldr	r1, [pc, #44]	; (8000f48 <bootloader_mode+0xa4>)
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <bootloader_mode+0x98>)
 8000f1e:	f001 fd70 	bl	8002a02 <HAL_UART_Transmit>
					while(1);
 8000f22:	e7fe      	b.n	8000f22 <bootloader_mode+0x7e>
				}
			}
			break;
		default:
			HAL_UART_Transmit(&huart5, "Invalid cmd\n\r", strlen("Invalid cmd\n\r"), HAL_MAX_DELAY);
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	220d      	movs	r2, #13
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <bootloader_mode+0xa8>)
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <bootloader_mode+0x98>)
 8000f2e:	f001 fd68 	bl	8002a02 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8000f32:	e7c6      	b.n	8000ec2 <bootloader_mode+0x1e>
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	080032e8 	.word	0x080032e8
 8000f3c:	2000002c 	.word	0x2000002c
 8000f40:	20000070 	.word	0x20000070
 8000f44:	08003300 	.word	0x08003300
 8000f48:	0800330c 	.word	0x0800330c
 8000f4c:	08003314 	.word	0x08003314

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_UART_MspInit+0xc0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d14a      	bne.n	8001064 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_UART_MspInit+0xc4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001034:	2308      	movs	r3, #8
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <HAL_UART_MspInit+0xc8>)
 8001040:	f000 fe6c 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001044:	2304      	movs	r3, #4
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001054:	2308      	movs	r3, #8
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <HAL_UART_MspInit+0xcc>)
 8001060:	f000 fe5c 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005000 	.word	0x40005000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 fa4a 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <xmodem_calcrc>:
*      | SOH | PKT_num | Data_Size | data | SUM  |
*      +-----+-------+-------+------+-----+------+
*/

uint16_t xmodem_calcrc(unsigned char *ptr, int count)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	uint16_t  crc;
    char i;

    crc = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	81fb      	strh	r3, [r7, #14]
    while (--count >= 0)
 8001102:	e023      	b.n	800114c <xmodem_calcrc+0x58>
    {
        crc = crc ^ *ptr++ << 8;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001114:	4053      	eors	r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	81fb      	strh	r3, [r7, #14]
        i = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	737b      	strb	r3, [r7, #13]
        do
        {
            if (crc & 0x8000)
 800111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	da09      	bge.n	800113a <xmodem_calcrc+0x46>
                crc = crc << 1 ^ 0x1021;
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b21b      	sxth	r3, r3
 800112c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b21b      	sxth	r3, r3
 8001136:	81fb      	strh	r3, [r7, #14]
 8001138:	e002      	b.n	8001140 <xmodem_calcrc+0x4c>
            else
                crc = crc << 1;
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	81fb      	strh	r3, [r7, #14]
        } while(--i);
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	3b01      	subs	r3, #1
 8001144:	737b      	strb	r3, [r7, #13]
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e8      	bne.n	800111e <xmodem_calcrc+0x2a>
    while (--count >= 0)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dad5      	bge.n	8001104 <xmodem_calcrc+0x10>
    }
    SWAP_BYTE(crc);
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	81fb      	strh	r3, [r7, #14]
    return (crc);
 800116c:	89fb      	ldrh	r3, [r7, #14]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <xmodem_ready_to_receive>:

uint8_t xmodem_ready_to_receive(UART_HandleTypeDef *BL_UART){
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	uint8_t header=0,response=X_C;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	2343      	movs	r3, #67	; 0x43
 8001188:	73bb      	strb	r3, [r7, #14]

	while(!(header == STX || header == SOH)){
 800118a:	e00f      	b.n	80011ac <xmodem_ready_to_receive+0x32>
		/*send 'C' to receive as CRC*/
		HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 800118c:	f107 010e 	add.w	r1, r7, #14
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	2201      	movs	r2, #1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f001 fc33 	bl	8002a02 <HAL_UART_Transmit>
		/*Receive & Check Header**/
		HAL_UART_Receive(BL_UART, &header, 1, XMODEM_RX_WAIT_TIME);
 800119c:	f107 010f 	add.w	r1, r7, #15
 80011a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011a4:	2201      	movs	r2, #1
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f001 fcbd 	bl	8002b26 <HAL_UART_Receive>
	while(!(header == STX || header == SOH)){
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d002      	beq.n	80011b8 <xmodem_ready_to_receive+0x3e>
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1e9      	bne.n	800118c <xmodem_ready_to_receive+0x12>
	}
	return header;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <xmodem_ready_to_receive_after_NAK>:

/*if NAK received call this at the time of receiving header*/
uint8_t xmodem_ready_to_receive_after_NAK(UART_HandleTypeDef *BL_UART){
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	uint8_t header=0,response=NAK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	2315      	movs	r3, #21
 80011d0:	73bb      	strb	r3, [r7, #14]
	while(!(header == STX || header == SOH)){
 80011d2:	e00f      	b.n	80011f4 <xmodem_ready_to_receive_after_NAK+0x32>
		HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 80011d4:	f107 010e 	add.w	r1, r7, #14
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	2201      	movs	r2, #1
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f001 fc0f 	bl	8002a02 <HAL_UART_Transmit>
		/*Receive & Check Header**/
		HAL_UART_Receive(BL_UART, &header, 1, XMODEM_RX_WAIT_TIME);
 80011e4:	f107 010f 	add.w	r1, r7, #15
 80011e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011ec:	2201      	movs	r2, #1
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f001 fc99 	bl	8002b26 <HAL_UART_Receive>
	while(!(header == STX || header == SOH)){
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d002      	beq.n	8001200 <xmodem_ready_to_receive_after_NAK+0x3e>
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d1e9      	bne.n	80011d4 <xmodem_ready_to_receive_after_NAK+0x12>
	}
	return header;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <xmodem_receive>:

XMODEM_StatusTypedef xmodem_receive(UART_HandleTypeDef *BL_UART){
 800120c:	b580      	push	{r7, lr}
 800120e:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001212:	af00      	add	r7, sp, #0
 8001214:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001218:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800121c:	6018      	str	r0, [r3, #0]

	uint8_t rxbuf[1050]={0};
 800121e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001222:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	3304      	adds	r3, #4
 800122c:	f240 4216 	movw	r2, #1046	; 0x416
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f002 f820 	bl	8003278 <memset>
	uint8_t header,response;

	static uint8_t received_packet_number=0,comp_packet_number,packet_number=0;
	int size,NAK_Flag=0;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	uint16_t received_crc=0;
 800123e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001242:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001246:	2200      	movs	r2, #0
 8001248:	801a      	strh	r2, [r3, #0]

	packet_number++;
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <xmodem_receive+0x24c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b81      	ldr	r3, [pc, #516]	; (8001458 <xmodem_receive+0x24c>)
 8001254:	701a      	strb	r2, [r3, #0]
	/*try to receive header in differenr context*/
retry:
	if((packet_number-1)==0){
 8001256:	4b80      	ldr	r3, [pc, #512]	; (8001458 <xmodem_receive+0x24c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10e      	bne.n	800127c <xmodem_receive+0x70>
		/*reception of first packet*/
		header=xmodem_ready_to_receive(BL_UART);
 800125e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001262:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f7ff ff87 	bl	800117a <xmodem_ready_to_receive>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001274:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e021      	b.n	80012c0 <xmodem_receive+0xb4>
	}
	else if(NAK_Flag){
 800127c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001280:	2b00      	cmp	r3, #0
 8001282:	d011      	beq.n	80012a8 <xmodem_receive+0x9c>
		/*reception of header if NAK is sent*/
		header=xmodem_ready_to_receive_after_NAK(huart5);
 8001284:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001288:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	f7ff ff98 	bl	80011c2 <xmodem_ready_to_receive_after_NAK>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800129a:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 800129e:	701a      	strb	r2, [r3, #0]
		NAK_Flag=0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80012a6:	e00b      	b.n	80012c0 <xmodem_receive+0xb4>
	}
	else{
		/*reception of header if ACK is sent*/
		HAL_UART_Receive(huart5, &header, 1, XMODEM_RX_WAIT_TIME);
 80012a8:	f107 010b 	add.w	r1, r7, #11
 80012ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80012b0:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 80012b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80012b8:	2201      	movs	r2, #1
 80012ba:	6800      	ldr	r0, [r0, #0]
 80012bc:	f001 fc33 	bl	8002b26 <HAL_UART_Receive>
	}


	switch(header)
 80012c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80012c4:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b17      	cmp	r3, #23
 80012cc:	f000 8088 	beq.w	80013e0 <xmodem_receive+0x1d4>
 80012d0:	2b17      	cmp	r3, #23
 80012d2:	f300 80bb 	bgt.w	800144c <xmodem_receive+0x240>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc02      	bgt.n	80012e0 <xmodem_receive+0xd4>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dc03      	bgt.n	80012e6 <xmodem_receive+0xda>
 80012de:	e0b5      	b.n	800144c <xmodem_receive+0x240>
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d07d      	beq.n	80013e0 <xmodem_receive+0x1d4>
 80012e4:	e0b2      	b.n	800144c <xmodem_receive+0x240>
	 {
	 case SOH:
	 case STX:
		 	 if(header==SOH)
 80012e6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80012ea:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d103      	bne.n	80012fc <xmodem_receive+0xf0>
		 	 {
		 		 size=PKT_SIZE;
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80012fa:	e00a      	b.n	8001312 <xmodem_receive+0x106>
		 	 }
		 	 else if(header==STX)
 80012fc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001300:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d103      	bne.n	8001312 <xmodem_receive+0x106>
		 	 {
		 		 size=PKT_SIZE_1K;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		 	 }
		 	 /*receive PKT_num & size*/
		 	 HAL_UART_Receive(BL_UART, &received_packet_number, 1, XMODEM_RX_WAIT_TIME);
 8001312:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001316:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 800131a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800131e:	2201      	movs	r2, #1
 8001320:	494e      	ldr	r1, [pc, #312]	; (800145c <xmodem_receive+0x250>)
 8001322:	6800      	ldr	r0, [r0, #0]
 8001324:	f001 fbff 	bl	8002b26 <HAL_UART_Receive>
		 	 /*size is of 2 byte*/
		 	 HAL_UART_Receive(BL_UART, &comp_packet_number, 1, XMODEM_RX_WAIT_TIME);
 8001328:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800132c:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 8001330:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001334:	2201      	movs	r2, #1
 8001336:	494a      	ldr	r1, [pc, #296]	; (8001460 <xmodem_receive+0x254>)
 8001338:	6800      	ldr	r0, [r0, #0]
 800133a:	f001 fbf4 	bl	8002b26 <HAL_UART_Receive>
		 	 /*receive DATA*/
		 	 HAL_UART_Receive(BL_UART, rxbuf, size, XMODEM_RX_WAIT_TIME);
 800133e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001342:	b29a      	uxth	r2, r3
 8001344:	f107 010c 	add.w	r1, r7, #12
 8001348:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800134c:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 8001350:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001354:	6800      	ldr	r0, [r0, #0]
 8001356:	f001 fbe6 	bl	8002b26 <HAL_UART_Receive>
		 	 /*receive CRC*/
		 	 HAL_UART_Receive(BL_UART, &received_crc, 2, XMODEM_RX_WAIT_TIME);
 800135a:	f107 0108 	add.w	r1, r7, #8
 800135e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001362:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 8001366:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800136a:	2202      	movs	r2, #2
 800136c:	6800      	ldr	r0, [r0, #0]
 800136e:	f001 fbda 	bl	8002b26 <HAL_UART_Receive>

		 	/*check CRC*/
		 	uint16_t calculated_crc = xmodem_calcrc(rxbuf, size);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff feba 	bl	80010f4 <xmodem_calcrc>
 8001380:	4603      	mov	r3, r0
 8001382:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
		 	 if(calculated_crc != received_crc  && received_packet_number != packet_number){
 8001386:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800138a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8001394:	429a      	cmp	r2, r3
 8001396:	d009      	beq.n	80013ac <xmodem_receive+0x1a0>
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <xmodem_receive+0x250>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <xmodem_receive+0x24c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d003      	beq.n	80013ac <xmodem_receive+0x1a0>
		 		 /*set NAK Flag and retry packet reception*/
		 		NAK_Flag=1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		 		goto retry;
 80013aa:	e754      	b.n	8001256 <xmodem_receive+0x4a>
		 	 }
		 	 else
		 	 {
		 		//send NAK
		 		response=ACK;
 80013ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013b0:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 80013b4:	2206      	movs	r2, #6
 80013b6:	701a      	strb	r2, [r3, #0]
		 		HAL_UART_Transmit(BL_UART, &response, 1, HAL_MAX_DELAY);
 80013b8:	f107 010a 	add.w	r1, r7, #10
 80013bc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013c0:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	2201      	movs	r2, #1
 80013ca:	6800      	ldr	r0, [r0, #0]
 80013cc:	f001 fb19 	bl	8002a02 <HAL_UART_Transmit>
		 	 }
		 	 /*write to flash memory*/
		 	 bootloader_write_bin_to_memory(rxbuf,size);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff faf3 	bl	80009c4 <bootloader_write_bin_to_memory>
		 	char temp[12];
		 	sprintf(temp,"send=%d\n\r",packet_number);
		 	HAL_UART_Transmit(BL_UART, temp, strlen(temp), HAL_MAX_DELAY);
	 		/*debug end*/
#endif
		 	break;
 80013de:	e035      	b.n	800144c <xmodem_receive+0x240>

	 case EOT:
	 case ETB:
		 /*respond ACK*/
		 response=ACK;
 80013e0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013e4:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 80013e8:	2206      	movs	r2, #6
 80013ea:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 80013ec:	f107 010a 	add.w	r1, r7, #10
 80013f0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013f4:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	2201      	movs	r2, #1
 80013fe:	6800      	ldr	r0, [r0, #0]
 8001400:	f001 faff 	bl	8002a02 <HAL_UART_Transmit>

		 /*update APP Version*/
		 bootloader_update_signature_app_version(huart5);
 8001404:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001408:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	f7ff fb9b 	bl	8000b48 <bootloader_update_signature_app_version>
		 /*update signature flag*/
		 bootloader_update_signature_set_flag(huart5);
 8001412:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001416:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f7ff fb52 	bl	8000ac4 <bootloader_update_signature_set_flag>
		 /*Receive of EOT will jump to user app*/
#ifdef DEBUG_XMODEM
		 HAL_UART_Transmit(BL_UART, "Jump to user", 15, HAL_MAX_DELAY);
#endif
		 /*jump to APP */
		 if(bootloader_jump_to_user_code(BL_UART) == BL_ERROR){
 8001420:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001424:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f7ff fa5b 	bl	80008e4 <bootloader_jump_to_user_code>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10b      	bne.n	800144c <xmodem_receive+0x240>
			 HAL_UART_Transmit(BL_UART, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8001434:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001438:	f2a3 402c 	subw	r0, r3, #1068	; 0x42c
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2205      	movs	r2, #5
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <xmodem_receive+0x258>)
 8001444:	6800      	ldr	r0, [r0, #0]
 8001446:	f001 fadc 	bl	8002a02 <HAL_UART_Transmit>
			 while(1);
 800144a:	e7fe      	b.n	800144a <xmodem_receive+0x23e>
		 }

	 }
}
 800144c:	bf00      	nop
 800144e:	4618      	mov	r0, r3
 8001450:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000138 	.word	0x20000138
 800145c:	20000139 	.word	0x20000139
 8001460:	2000013a 	.word	0x2000013a
 8001464:	08003324 	.word	0x08003324

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001492:	f7ff fe1d 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f001 fecb 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fbff 	bl	8000c9c <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014ac:	08003354 	.word	0x08003354
  ldr r2, =_sbss
 80014b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014b4:	20000160 	.word	0x20000160

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f90d 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fd34 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f917 	bl	8001752 <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f8ed 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000004 	.word	0x20000004
 8001558:	2000000c 	.word	0x2000000c
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c
 8001584:	2000013c 	.word	0x2000013c

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000013c 	.word	0x2000013c

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff47 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff5c 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffb0 	bl	80016c0 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_FLASH_Program+0xa0>)
 8001780:	7e1b      	ldrb	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_FLASH_Program+0x1e>
 8001786:	2302      	movs	r3, #2
 8001788:	e03b      	b.n	8001802 <HAL_FLASH_Program+0x96>
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_FLASH_Program+0xa0>)
 800178c:	2201      	movs	r2, #1
 800178e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001794:	f000 f870 	bl	8001878 <FLASH_WaitForLastOperation>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12b      	bne.n	80017fa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80017a8:	783b      	ldrb	r3, [r7, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f000 f91b 	bl	80019e8 <FLASH_Program_Byte>
 80017b2:	e016      	b.n	80017e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80017ba:	883b      	ldrh	r3, [r7, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	f000 f8ee 	bl	80019a0 <FLASH_Program_HalfWord>
 80017c4:	e00d      	b.n	80017e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d105      	bne.n	80017d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	f000 f8c3 	bl	800195c <FLASH_Program_Word>
 80017d6:	e004      	b.n	80017e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80017d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017dc:	68b8      	ldr	r0, [r7, #8]
 80017de:	f000 f88b 	bl	80018f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017e6:	f000 f847 	bl	8001878 <FLASH_WaitForLastOperation>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_FLASH_Program+0xa4>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_FLASH_Program+0xa4>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_FLASH_Program+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001800:	7dfb      	ldrb	r3, [r7, #23]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000140 	.word	0x20000140
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_FLASH_Unlock+0x38>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da0b      	bge.n	800183e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_FLASH_Unlock+0x38>)
 8001828:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_FLASH_Unlock+0x3c>)
 800182a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_FLASH_Unlock+0x38>)
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_FLASH_Unlock+0x40>)
 8001830:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_FLASH_Unlock+0x38>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	da01      	bge.n	800183e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40023c00 	.word	0x40023c00
 8001850:	45670123 	.word	0x45670123
 8001854:	cdef89ab 	.word	0xcdef89ab

08001858 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_FLASH_Lock+0x1c>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_FLASH_Lock+0x1c>)
 8001862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001866:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40023c00 	.word	0x40023c00

08001878 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <FLASH_WaitForLastOperation+0x78>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800188a:	f7ff fe7d 	bl	8001588 <HAL_GetTick>
 800188e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001890:	e010      	b.n	80018b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d00c      	beq.n	80018b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <FLASH_WaitForLastOperation+0x38>
 80018a0:	f7ff fe72 	bl	8001588 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d201      	bcs.n	80018b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e019      	b.n	80018e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <FLASH_WaitForLastOperation+0x7c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e8      	bne.n	8001892 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <FLASH_WaitForLastOperation+0x7c>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <FLASH_WaitForLastOperation+0x7c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <FLASH_WaitForLastOperation+0x7c>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018de:	f000 f8a5 	bl	8001a2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
  
}  
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000140 	.word	0x20000140
 80018f4:	40023c00 	.word	0x40023c00

080018f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 800190a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800190e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	4a10      	ldr	r2, [pc, #64]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 8001916:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800191a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <FLASH_Program_DoubleWord+0x60>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	000a      	movs	r2, r1
 8001942:	2300      	movs	r3, #0
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	3104      	adds	r1, #4
 8001948:	4613      	mov	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40023c00 	.word	0x40023c00

0800195c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <FLASH_Program_Word+0x40>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <FLASH_Program_Word+0x40>)
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <FLASH_Program_Word+0x40>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <FLASH_Program_Word+0x40>)
 8001978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <FLASH_Program_Word+0x40>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <FLASH_Program_Word+0x40>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40023c00 	.word	0x40023c00

080019a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <FLASH_Program_HalfWord+0x44>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00

080019e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <FLASH_Program_Byte+0x40>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <FLASH_Program_Byte+0x40>)
 80019fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <FLASH_Program_Byte+0x40>)
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <FLASH_Program_Byte+0x40>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <FLASH_Program_Byte+0x40>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <FLASH_Program_Byte+0x40>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	701a      	strb	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a46:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a64:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a68:	2220      	movs	r2, #32
 8001a6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001aa0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <FLASH_SetErrorCode+0xa8>)
 8001abe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <FLASH_SetErrorCode+0xa4>)
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	60da      	str	r2, [r3, #12]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	20000140 	.word	0x20000140

08001ad8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_FLASHEx_Erase+0xd8>)
 8001aec:	7e1b      	ldrb	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_FLASHEx_Erase+0x1e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e058      	b.n	8001ba8 <HAL_FLASHEx_Erase+0xd0>
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_FLASHEx_Erase+0xd8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b00:	f7ff feba 	bl	8001878 <FLASH_WaitForLastOperation>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d148      	bne.n	8001ba0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d115      	bne.n	8001b4a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f000 f844 	bl	8001bb8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b34:	f7ff fea0 	bl	8001878 <FLASH_WaitForLastOperation>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_FLASHEx_Erase+0xdc>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_FLASHEx_Erase+0xdc>)
 8001b42:	f023 0304 	bic.w	r3, r3, #4
 8001b46:	6113      	str	r3, [r2, #16]
 8001b48:	e028      	b.n	8001b9c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	e01c      	b.n	8001b8c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68b8      	ldr	r0, [r7, #8]
 8001b5c:	f000 f850 	bl	8001c00 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b64:	f7ff fe88 	bl	8001878 <FLASH_WaitForLastOperation>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_FLASHEx_Erase+0xdc>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_FLASHEx_Erase+0xdc>)
 8001b72:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001b76:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	601a      	str	r2, [r3, #0]
          break;
 8001b84:	e00a      	b.n	8001b9c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3da      	bcc.n	8001b52 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b9c:	f000 f878 	bl	8001c90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_FLASHEx_Erase+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	761a      	strb	r2, [r3, #24]

  return status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000140 	.word	0x20000140
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <FLASH_MassErase+0x44>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <FLASH_MassErase+0x44>)
 8001bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <FLASH_MassErase+0x44>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <FLASH_MassErase+0x44>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <FLASH_MassErase+0x44>)
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	4313      	orrs	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <FLASH_MassErase+0x44>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6113      	str	r3, [r2, #16]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e010      	b.n	8001c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d103      	bne.n	8001c2a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e009      	b.n	8001c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d103      	bne.n	8001c38 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e002      	b.n	8001c3e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	490f      	ldr	r1, [pc, #60]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <FLASH_Erase_Sector+0x8c>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	6113      	str	r3, [r2, #16]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001ca6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001caa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d017      	beq.n	8001d0c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cfe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <FLASH_FlushCaches+0x88>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e16b      	b.n	8002010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 815a 	bne.w	800200a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80b4 	beq.w	800200a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a5b      	ldr	r2, [pc, #364]	; (800202c <HAL_GPIO_Init+0x310>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x318>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x31c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x320>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_GPIO_Init+0x32c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_GPIO_Init+0x330>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x20a>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00e      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	; (800202c <HAL_GPIO_Init+0x310>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x334>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae90 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e267      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e242      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6f      	ldr	r2, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fa0a 	bl	8001588 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fa06 	bl	8001588 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e207      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f9f6 	bl	8001588 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f9f2 	bl	8001588 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f3      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c7      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f9ab 	bl	8001588 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f9a7 	bl	8001588 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a8      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f98a 	bl	8001588 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff f986 	bl	8001588 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e187      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d036      	beq.n	8002310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f96a 	bl	8001588 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff f966 	bl	8001588 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e167      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
 80022d6:	e01b      	b.n	8002310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff f953 	bl	8001588 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	e00e      	b.n	8002304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f94f 	bl	8001588 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d907      	bls.n	8002304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e150      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
 8002300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ea      	bne.n	80022e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8097 	beq.w	800244c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a73      	ldr	r2, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7ff f90f 	bl	8001588 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7ff f90b 	bl	8001588 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e10c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x30c>
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023c4:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f8d0 	bl	8001588 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7ff f8cc 	bl	8001588 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0cb      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCC_OscConfig+0x334>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7ff f8ba 	bl	8001588 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7ff f8b6 	bl	8001588 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b5      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a1 	beq.w	8002598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d05c      	beq.n	800251c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d141      	bne.n	80024ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff f88a 	bl	8001588 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f886 	bl	8001588 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e087      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff f85f 	bl	8001588 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff f85b 	bl	8001588 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e05c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x416>
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f848 	bl	8001588 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f844 	bl	8001588 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e045      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e038      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
 8002530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d028      	beq.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe ff76 	bl	8001588 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe ff72 	bl	8001588 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fed6 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	0800332c 	.word	0x0800332c
 800276c:	20000004 	.word	0x20000004
 8002770:	20000008 	.word	0x20000008

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b090      	sub	sp, #64	; 0x40
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	2300      	movs	r3, #0
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00d      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002798:	2b08      	cmp	r3, #8
 800279a:	f200 80a1 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 80027a6:	e09b      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027ac:	e09b      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027b2:	e098      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d028      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	627a      	str	r2, [r7, #36]	; 0x24
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027dc:	2100      	movs	r1, #0
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027e0:	fb03 f201 	mul.w	r2, r3, r1
 80027e4:	2300      	movs	r3, #0
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027ee:	fba0 1202 	umull	r1, r2, r0, r2
 80027f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f4:	460a      	mov	r2, r1
 80027f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fa:	4413      	add	r3, r2
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	2200      	movs	r2, #0
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800280e:	f7fd fee7 	bl	80005e0 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4613      	mov	r3, r2
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	e053      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	2200      	movs	r2, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	617a      	str	r2, [r7, #20]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800282e:	f04f 0b00 	mov.w	fp, #0
 8002832:	4652      	mov	r2, sl
 8002834:	465b      	mov	r3, fp
 8002836:	f04f 0000 	mov.w	r0, #0
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	0159      	lsls	r1, r3, #5
 8002840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002844:	0150      	lsls	r0, r2, #5
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	ebb2 080a 	subs.w	r8, r2, sl
 800284e:	eb63 090b 	sbc.w	r9, r3, fp
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800285e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002862:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002866:	ebb2 0408 	subs.w	r4, r2, r8
 800286a:	eb63 0509 	sbc.w	r5, r3, r9
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	00eb      	lsls	r3, r5, #3
 8002878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287c:	00e2      	lsls	r2, r4, #3
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	eb14 030a 	adds.w	r3, r4, sl
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	eb45 030b 	adc.w	r3, r5, fp
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289a:	4629      	mov	r1, r5
 800289c:	028b      	lsls	r3, r1, #10
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a4:	4621      	mov	r1, r4
 80028a6:	028a      	lsls	r2, r1, #10
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	2200      	movs	r2, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	60fa      	str	r2, [r7, #12]
 80028b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b8:	f7fd fe92 	bl	80005e0 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3740      	adds	r7, #64	; 0x40
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	017d7840 	.word	0x017d7840

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	0800333c 	.word	0x0800333c

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffdc 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0b5b      	lsrs	r3, r3, #13
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	0800333c 	.word	0x0800333c

08002968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e03f      	b.n	80029fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fb0c 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f9cb 	bl	8002d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08a      	sub	sp, #40	; 0x28
 8002a06:	af02      	add	r7, sp, #8
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d17c      	bne.n	8002b1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_Transmit+0x2c>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e075      	b.n	8002b1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x3e>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e06e      	b.n	8002b1e <HAL_UART_Transmit+0x11c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2221      	movs	r2, #33	; 0x21
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a56:	f7fe fd97 	bl	8001588 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d108      	bne.n	8002a84 <HAL_UART_Transmit+0x82>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e003      	b.n	8002a8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a94:	e02a      	b.n	8002aec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f8e2 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e036      	b.n	8002b1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e007      	b.n	8002ade <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	3301      	adds	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1cf      	bne.n	8002a96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f8b2 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e006      	b.n	8002b1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b08a      	sub	sp, #40	; 0x28
 8002b2a:	af02      	add	r7, sp, #8
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	f040 808c 	bne.w	8002c60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Receive+0x2e>
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e084      	b.n	8002c62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Receive+0x40>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e07d      	b.n	8002c62 <HAL_UART_Receive+0x13c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2222      	movs	r2, #34	; 0x22
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b82:	f7fe fd01 	bl	8001588 <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d108      	bne.n	8002bb0 <HAL_UART_Receive+0x8a>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002bc0:	e043      	b.n	8002c4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2120      	movs	r1, #32
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f84c 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e042      	b.n	8002c62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e01f      	b.n	8002c3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c04:	d007      	beq.n	8002c16 <HAL_UART_Receive+0xf0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_UART_Receive+0xfe>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e008      	b.n	8002c36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1b6      	bne.n	8002bc2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b090      	sub	sp, #64	; 0x40
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7a:	e050      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d04c      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	f7fe fc7d 	bl	8001588 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d241      	bcs.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cba:	637a      	str	r2, [r7, #52]	; 0x34
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e5      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cee:	623a      	str	r2, [r7, #32]
 8002cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	69f9      	ldr	r1, [r7, #28]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d09f      	beq.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3740      	adds	r7, #64	; 0x40
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b0c0      	sub	sp, #256	; 0x100
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	68d9      	ldr	r1, [r3, #12]
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	ea40 0301 	orr.w	r3, r0, r1
 8002d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002da0:	f021 010c 	bic.w	r1, r1, #12
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dae:	430b      	orrs	r3, r1
 8002db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc2:	6999      	ldr	r1, [r3, #24]
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	ea40 0301 	orr.w	r3, r0, r1
 8002dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <UART_SetConfig+0x2cc>)
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d005      	beq.n	8002de8 <UART_SetConfig+0xa0>
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <UART_SetConfig+0x2d0>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d104      	bne.n	8002df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de8:	f7ff fdaa 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8002dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002df0:	e003      	b.n	8002dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002df2:	f7ff fd91 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8002df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	f040 810c 	bne.w	8003020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	1891      	adds	r1, r2, r2
 8002e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e22:	415b      	adcs	r3, r3
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	eb12 0801 	adds.w	r8, r2, r1
 8002e30:	4629      	mov	r1, r5
 8002e32:	eb43 0901 	adc.w	r9, r3, r1
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4a:	4690      	mov	r8, r2
 8002e4c:	4699      	mov	r9, r3
 8002e4e:	4623      	mov	r3, r4
 8002e50:	eb18 0303 	adds.w	r3, r8, r3
 8002e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e58:	462b      	mov	r3, r5
 8002e5a:	eb49 0303 	adc.w	r3, r9, r3
 8002e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e76:	460b      	mov	r3, r1
 8002e78:	18db      	adds	r3, r3, r3
 8002e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	eb42 0303 	adc.w	r3, r2, r3
 8002e82:	657b      	str	r3, [r7, #84]	; 0x54
 8002e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e8c:	f7fd fba8 	bl	80005e0 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b61      	ldr	r3, [pc, #388]	; (800301c <UART_SetConfig+0x2d4>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011c      	lsls	r4, r3, #4
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee0:	4692      	mov	sl, r2
 8002ee2:	469b      	mov	fp, r3
 8002ee4:	4643      	mov	r3, r8
 8002ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8002eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	18db      	adds	r3, r3, r3
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
 8002f12:	4613      	mov	r3, r2
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f22:	f7fd fb5d 	bl	80005e0 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4b3b      	ldr	r3, [pc, #236]	; (800301c <UART_SetConfig+0x2d4>)
 8002f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2264      	movs	r2, #100	; 0x64
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	1acb      	subs	r3, r1, r3
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <UART_SetConfig+0x2d4>)
 8002f44:	fba3 2302 	umull	r2, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f50:	441c      	add	r4, r3
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6339      	str	r1, [r7, #48]	; 0x30
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa8:	464b      	mov	r3, r9
 8002faa:	460a      	mov	r2, r1
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc8:	460b      	mov	r3, r1
 8002fca:	18db      	adds	r3, r3, r3
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	4613      	mov	r3, r2
 8002fd0:	eb42 0303 	adc.w	r3, r2, r3
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fde:	f7fd faff 	bl	80005e0 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <UART_SetConfig+0x2d4>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <UART_SetConfig+0x2d4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4422      	add	r2, r4
 800300e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003010:	e105      	b.n	800321e <UART_SetConfig+0x4d6>
 8003012:	bf00      	nop
 8003014:	40011000 	.word	0x40011000
 8003018:	40011400 	.word	0x40011400
 800301c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800302a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800302e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003032:	4642      	mov	r2, r8
 8003034:	464b      	mov	r3, r9
 8003036:	1891      	adds	r1, r2, r2
 8003038:	6239      	str	r1, [r7, #32]
 800303a:	415b      	adcs	r3, r3
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003042:	4641      	mov	r1, r8
 8003044:	1854      	adds	r4, r2, r1
 8003046:	4649      	mov	r1, r9
 8003048:	eb43 0501 	adc.w	r5, r3, r1
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	00eb      	lsls	r3, r5, #3
 8003056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305a:	00e2      	lsls	r2, r4, #3
 800305c:	4614      	mov	r4, r2
 800305e:	461d      	mov	r5, r3
 8003060:	4643      	mov	r3, r8
 8003062:	18e3      	adds	r3, r4, r3
 8003064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003068:	464b      	mov	r3, r9
 800306a:	eb45 0303 	adc.w	r3, r5, r3
 800306e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800307e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800308e:	4629      	mov	r1, r5
 8003090:	008b      	lsls	r3, r1, #2
 8003092:	4621      	mov	r1, r4
 8003094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003098:	4621      	mov	r1, r4
 800309a:	008a      	lsls	r2, r1, #2
 800309c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030a0:	f7fd fa9e 	bl	80005e0 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <UART_SetConfig+0x4e4>)
 80030aa:	fba3 2302 	umull	r2, r3, r3, r2
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	011c      	lsls	r4, r3, #4
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	61b9      	str	r1, [r7, #24]
 80030cc:	415b      	adcs	r3, r3
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d4:	4641      	mov	r1, r8
 80030d6:	1851      	adds	r1, r2, r1
 80030d8:	6139      	str	r1, [r7, #16]
 80030da:	4649      	mov	r1, r9
 80030dc:	414b      	adcs	r3, r1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ec:	4659      	mov	r1, fp
 80030ee:	00cb      	lsls	r3, r1, #3
 80030f0:	4651      	mov	r1, sl
 80030f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f6:	4651      	mov	r1, sl
 80030f8:	00ca      	lsls	r2, r1, #3
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	4642      	mov	r2, r8
 8003102:	189b      	adds	r3, r3, r2
 8003104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003108:	464b      	mov	r3, r9
 800310a:	460a      	mov	r2, r1
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	67bb      	str	r3, [r7, #120]	; 0x78
 800311e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800312c:	4649      	mov	r1, r9
 800312e:	008b      	lsls	r3, r1, #2
 8003130:	4641      	mov	r1, r8
 8003132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003136:	4641      	mov	r1, r8
 8003138:	008a      	lsls	r2, r1, #2
 800313a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800313e:	f7fd fa4f 	bl	80005e0 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <UART_SetConfig+0x4e4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	3332      	adds	r3, #50	; 0x32
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <UART_SetConfig+0x4e4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003166:	441c      	add	r4, r3
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	673b      	str	r3, [r7, #112]	; 0x70
 8003170:	677a      	str	r2, [r7, #116]	; 0x74
 8003172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003176:	4642      	mov	r2, r8
 8003178:	464b      	mov	r3, r9
 800317a:	1891      	adds	r1, r2, r2
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	415b      	adcs	r3, r3
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003186:	4641      	mov	r1, r8
 8003188:	1851      	adds	r1, r2, r1
 800318a:	6039      	str	r1, [r7, #0]
 800318c:	4649      	mov	r1, r9
 800318e:	414b      	adcs	r3, r1
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800319e:	4659      	mov	r1, fp
 80031a0:	00cb      	lsls	r3, r1, #3
 80031a2:	4651      	mov	r1, sl
 80031a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a8:	4651      	mov	r1, sl
 80031aa:	00ca      	lsls	r2, r1, #3
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	4642      	mov	r2, r8
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	663b      	str	r3, [r7, #96]	; 0x60
 80031cc:	667a      	str	r2, [r7, #100]	; 0x64
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031da:	4649      	mov	r1, r9
 80031dc:	008b      	lsls	r3, r1, #2
 80031de:	4641      	mov	r1, r8
 80031e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e4:	4641      	mov	r1, r8
 80031e6:	008a      	lsls	r2, r1, #2
 80031e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031ec:	f7fd f9f8 	bl	80005e0 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <UART_SetConfig+0x4e4>)
 80031f6:	fba3 1302 	umull	r1, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2164      	movs	r1, #100	; 0x64
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <UART_SetConfig+0x4e4>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4422      	add	r2, r4
 800321c:	609a      	str	r2, [r3, #8]
}
 800321e:	bf00      	nop
 8003220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322a:	bf00      	nop
 800322c:	51eb851f 	.word	0x51eb851f

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4d0d      	ldr	r5, [pc, #52]	; (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2600      	movs	r6, #0
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4d0b      	ldr	r5, [pc, #44]	; (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	; (8003274 <__libc_init_array+0x44>)
 8003244:	f000 f820 	bl	8003288 <_init>
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2600      	movs	r6, #0
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	0800334c 	.word	0x0800334c
 800326c:	0800334c 	.word	0x0800334c
 8003270:	0800334c 	.word	0x0800334c
 8003274:	08003350 	.word	0x08003350

08003278 <memset>:
 8003278:	4402      	add	r2, r0
 800327a:	4603      	mov	r3, r0
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	f803 1b01 	strb.w	r1, [r3], #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <_init>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr

08003294 <_fini>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr
