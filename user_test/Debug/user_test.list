
user_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001528  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080096b0  080096b0  000096b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c0  080096c0  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  080096c0  080096c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c8  080096c8  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c8  080096c8  000096c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096cc  080096cc  000096cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080096d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0001000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0001000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003865  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000de9  00000000  00000000  000138a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  00014690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000368  00000000  00000000  00014a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed3a  00000000  00000000  00014de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004905  00000000  00000000  00033b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbdab  00000000  00000000  00038427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f41d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e18  00000000  00000000  000f4224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	08009698 	.word	0x08009698

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000010 	.word	0x20000010
 80081c4:	08009698 	.word	0x08009698

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081dc:	f000 b974 	b.w	80084c8 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9d08      	ldr	r5, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	468e      	mov	lr, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14d      	bne.n	80082a2 <__udivmoddi4+0xaa>
 8008206:	428a      	cmp	r2, r1
 8008208:	4694      	mov	ip, r2
 800820a:	d969      	bls.n	80082e0 <__udivmoddi4+0xe8>
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b152      	cbz	r2, 8008228 <__udivmoddi4+0x30>
 8008212:	fa01 f302 	lsl.w	r3, r1, r2
 8008216:	f1c2 0120 	rsb	r1, r2, #32
 800821a:	fa20 f101 	lsr.w	r1, r0, r1
 800821e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008222:	ea41 0e03 	orr.w	lr, r1, r3
 8008226:	4094      	lsls	r4, r2
 8008228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800822c:	0c21      	lsrs	r1, r4, #16
 800822e:	fbbe f6f8 	udiv	r6, lr, r8
 8008232:	fa1f f78c 	uxth.w	r7, ip
 8008236:	fb08 e316 	mls	r3, r8, r6, lr
 800823a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800823e:	fb06 f107 	mul.w	r1, r6, r7
 8008242:	4299      	cmp	r1, r3
 8008244:	d90a      	bls.n	800825c <__udivmoddi4+0x64>
 8008246:	eb1c 0303 	adds.w	r3, ip, r3
 800824a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800824e:	f080 811f 	bcs.w	8008490 <__udivmoddi4+0x298>
 8008252:	4299      	cmp	r1, r3
 8008254:	f240 811c 	bls.w	8008490 <__udivmoddi4+0x298>
 8008258:	3e02      	subs	r6, #2
 800825a:	4463      	add	r3, ip
 800825c:	1a5b      	subs	r3, r3, r1
 800825e:	b2a4      	uxth	r4, r4
 8008260:	fbb3 f0f8 	udiv	r0, r3, r8
 8008264:	fb08 3310 	mls	r3, r8, r0, r3
 8008268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800826c:	fb00 f707 	mul.w	r7, r0, r7
 8008270:	42a7      	cmp	r7, r4
 8008272:	d90a      	bls.n	800828a <__udivmoddi4+0x92>
 8008274:	eb1c 0404 	adds.w	r4, ip, r4
 8008278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800827c:	f080 810a 	bcs.w	8008494 <__udivmoddi4+0x29c>
 8008280:	42a7      	cmp	r7, r4
 8008282:	f240 8107 	bls.w	8008494 <__udivmoddi4+0x29c>
 8008286:	4464      	add	r4, ip
 8008288:	3802      	subs	r0, #2
 800828a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800828e:	1be4      	subs	r4, r4, r7
 8008290:	2600      	movs	r6, #0
 8008292:	b11d      	cbz	r5, 800829c <__udivmoddi4+0xa4>
 8008294:	40d4      	lsrs	r4, r2
 8008296:	2300      	movs	r3, #0
 8008298:	e9c5 4300 	strd	r4, r3, [r5]
 800829c:	4631      	mov	r1, r6
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d909      	bls.n	80082ba <__udivmoddi4+0xc2>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	f000 80ef 	beq.w	800848a <__udivmoddi4+0x292>
 80082ac:	2600      	movs	r6, #0
 80082ae:	e9c5 0100 	strd	r0, r1, [r5]
 80082b2:	4630      	mov	r0, r6
 80082b4:	4631      	mov	r1, r6
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	fab3 f683 	clz	r6, r3
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d14a      	bne.n	8008358 <__udivmoddi4+0x160>
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d302      	bcc.n	80082cc <__udivmoddi4+0xd4>
 80082c6:	4282      	cmp	r2, r0
 80082c8:	f200 80f9 	bhi.w	80084be <__udivmoddi4+0x2c6>
 80082cc:	1a84      	subs	r4, r0, r2
 80082ce:	eb61 0303 	sbc.w	r3, r1, r3
 80082d2:	2001      	movs	r0, #1
 80082d4:	469e      	mov	lr, r3
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	d0e0      	beq.n	800829c <__udivmoddi4+0xa4>
 80082da:	e9c5 4e00 	strd	r4, lr, [r5]
 80082de:	e7dd      	b.n	800829c <__udivmoddi4+0xa4>
 80082e0:	b902      	cbnz	r2, 80082e4 <__udivmoddi4+0xec>
 80082e2:	deff      	udf	#255	; 0xff
 80082e4:	fab2 f282 	clz	r2, r2
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	f040 8092 	bne.w	8008412 <__udivmoddi4+0x21a>
 80082ee:	eba1 010c 	sub.w	r1, r1, ip
 80082f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082f6:	fa1f fe8c 	uxth.w	lr, ip
 80082fa:	2601      	movs	r6, #1
 80082fc:	0c20      	lsrs	r0, r4, #16
 80082fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8008302:	fb07 1113 	mls	r1, r7, r3, r1
 8008306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800830a:	fb0e f003 	mul.w	r0, lr, r3
 800830e:	4288      	cmp	r0, r1
 8008310:	d908      	bls.n	8008324 <__udivmoddi4+0x12c>
 8008312:	eb1c 0101 	adds.w	r1, ip, r1
 8008316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800831a:	d202      	bcs.n	8008322 <__udivmoddi4+0x12a>
 800831c:	4288      	cmp	r0, r1
 800831e:	f200 80cb 	bhi.w	80084b8 <__udivmoddi4+0x2c0>
 8008322:	4643      	mov	r3, r8
 8008324:	1a09      	subs	r1, r1, r0
 8008326:	b2a4      	uxth	r4, r4
 8008328:	fbb1 f0f7 	udiv	r0, r1, r7
 800832c:	fb07 1110 	mls	r1, r7, r0, r1
 8008330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008334:	fb0e fe00 	mul.w	lr, lr, r0
 8008338:	45a6      	cmp	lr, r4
 800833a:	d908      	bls.n	800834e <__udivmoddi4+0x156>
 800833c:	eb1c 0404 	adds.w	r4, ip, r4
 8008340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8008344:	d202      	bcs.n	800834c <__udivmoddi4+0x154>
 8008346:	45a6      	cmp	lr, r4
 8008348:	f200 80bb 	bhi.w	80084c2 <__udivmoddi4+0x2ca>
 800834c:	4608      	mov	r0, r1
 800834e:	eba4 040e 	sub.w	r4, r4, lr
 8008352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008356:	e79c      	b.n	8008292 <__udivmoddi4+0x9a>
 8008358:	f1c6 0720 	rsb	r7, r6, #32
 800835c:	40b3      	lsls	r3, r6
 800835e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008362:	ea4c 0c03 	orr.w	ip, ip, r3
 8008366:	fa20 f407 	lsr.w	r4, r0, r7
 800836a:	fa01 f306 	lsl.w	r3, r1, r6
 800836e:	431c      	orrs	r4, r3
 8008370:	40f9      	lsrs	r1, r7
 8008372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008376:	fa00 f306 	lsl.w	r3, r0, r6
 800837a:	fbb1 f8f9 	udiv	r8, r1, r9
 800837e:	0c20      	lsrs	r0, r4, #16
 8008380:	fa1f fe8c 	uxth.w	lr, ip
 8008384:	fb09 1118 	mls	r1, r9, r8, r1
 8008388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800838c:	fb08 f00e 	mul.w	r0, r8, lr
 8008390:	4288      	cmp	r0, r1
 8008392:	fa02 f206 	lsl.w	r2, r2, r6
 8008396:	d90b      	bls.n	80083b0 <__udivmoddi4+0x1b8>
 8008398:	eb1c 0101 	adds.w	r1, ip, r1
 800839c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80083a0:	f080 8088 	bcs.w	80084b4 <__udivmoddi4+0x2bc>
 80083a4:	4288      	cmp	r0, r1
 80083a6:	f240 8085 	bls.w	80084b4 <__udivmoddi4+0x2bc>
 80083aa:	f1a8 0802 	sub.w	r8, r8, #2
 80083ae:	4461      	add	r1, ip
 80083b0:	1a09      	subs	r1, r1, r0
 80083b2:	b2a4      	uxth	r4, r4
 80083b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80083b8:	fb09 1110 	mls	r1, r9, r0, r1
 80083bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80083c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80083c4:	458e      	cmp	lr, r1
 80083c6:	d908      	bls.n	80083da <__udivmoddi4+0x1e2>
 80083c8:	eb1c 0101 	adds.w	r1, ip, r1
 80083cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80083d0:	d26c      	bcs.n	80084ac <__udivmoddi4+0x2b4>
 80083d2:	458e      	cmp	lr, r1
 80083d4:	d96a      	bls.n	80084ac <__udivmoddi4+0x2b4>
 80083d6:	3802      	subs	r0, #2
 80083d8:	4461      	add	r1, ip
 80083da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80083de:	fba0 9402 	umull	r9, r4, r0, r2
 80083e2:	eba1 010e 	sub.w	r1, r1, lr
 80083e6:	42a1      	cmp	r1, r4
 80083e8:	46c8      	mov	r8, r9
 80083ea:	46a6      	mov	lr, r4
 80083ec:	d356      	bcc.n	800849c <__udivmoddi4+0x2a4>
 80083ee:	d053      	beq.n	8008498 <__udivmoddi4+0x2a0>
 80083f0:	b15d      	cbz	r5, 800840a <__udivmoddi4+0x212>
 80083f2:	ebb3 0208 	subs.w	r2, r3, r8
 80083f6:	eb61 010e 	sbc.w	r1, r1, lr
 80083fa:	fa01 f707 	lsl.w	r7, r1, r7
 80083fe:	fa22 f306 	lsr.w	r3, r2, r6
 8008402:	40f1      	lsrs	r1, r6
 8008404:	431f      	orrs	r7, r3
 8008406:	e9c5 7100 	strd	r7, r1, [r5]
 800840a:	2600      	movs	r6, #0
 800840c:	4631      	mov	r1, r6
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f1c2 0320 	rsb	r3, r2, #32
 8008416:	40d8      	lsrs	r0, r3
 8008418:	fa0c fc02 	lsl.w	ip, ip, r2
 800841c:	fa21 f303 	lsr.w	r3, r1, r3
 8008420:	4091      	lsls	r1, r2
 8008422:	4301      	orrs	r1, r0
 8008424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008428:	fa1f fe8c 	uxth.w	lr, ip
 800842c:	fbb3 f0f7 	udiv	r0, r3, r7
 8008430:	fb07 3610 	mls	r6, r7, r0, r3
 8008434:	0c0b      	lsrs	r3, r1, #16
 8008436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800843a:	fb00 f60e 	mul.w	r6, r0, lr
 800843e:	429e      	cmp	r6, r3
 8008440:	fa04 f402 	lsl.w	r4, r4, r2
 8008444:	d908      	bls.n	8008458 <__udivmoddi4+0x260>
 8008446:	eb1c 0303 	adds.w	r3, ip, r3
 800844a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800844e:	d22f      	bcs.n	80084b0 <__udivmoddi4+0x2b8>
 8008450:	429e      	cmp	r6, r3
 8008452:	d92d      	bls.n	80084b0 <__udivmoddi4+0x2b8>
 8008454:	3802      	subs	r0, #2
 8008456:	4463      	add	r3, ip
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	b289      	uxth	r1, r1
 800845c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008460:	fb07 3316 	mls	r3, r7, r6, r3
 8008464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008468:	fb06 f30e 	mul.w	r3, r6, lr
 800846c:	428b      	cmp	r3, r1
 800846e:	d908      	bls.n	8008482 <__udivmoddi4+0x28a>
 8008470:	eb1c 0101 	adds.w	r1, ip, r1
 8008474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008478:	d216      	bcs.n	80084a8 <__udivmoddi4+0x2b0>
 800847a:	428b      	cmp	r3, r1
 800847c:	d914      	bls.n	80084a8 <__udivmoddi4+0x2b0>
 800847e:	3e02      	subs	r6, #2
 8008480:	4461      	add	r1, ip
 8008482:	1ac9      	subs	r1, r1, r3
 8008484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008488:	e738      	b.n	80082fc <__udivmoddi4+0x104>
 800848a:	462e      	mov	r6, r5
 800848c:	4628      	mov	r0, r5
 800848e:	e705      	b.n	800829c <__udivmoddi4+0xa4>
 8008490:	4606      	mov	r6, r0
 8008492:	e6e3      	b.n	800825c <__udivmoddi4+0x64>
 8008494:	4618      	mov	r0, r3
 8008496:	e6f8      	b.n	800828a <__udivmoddi4+0x92>
 8008498:	454b      	cmp	r3, r9
 800849a:	d2a9      	bcs.n	80083f0 <__udivmoddi4+0x1f8>
 800849c:	ebb9 0802 	subs.w	r8, r9, r2
 80084a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80084a4:	3801      	subs	r0, #1
 80084a6:	e7a3      	b.n	80083f0 <__udivmoddi4+0x1f8>
 80084a8:	4646      	mov	r6, r8
 80084aa:	e7ea      	b.n	8008482 <__udivmoddi4+0x28a>
 80084ac:	4620      	mov	r0, r4
 80084ae:	e794      	b.n	80083da <__udivmoddi4+0x1e2>
 80084b0:	4640      	mov	r0, r8
 80084b2:	e7d1      	b.n	8008458 <__udivmoddi4+0x260>
 80084b4:	46d0      	mov	r8, sl
 80084b6:	e77b      	b.n	80083b0 <__udivmoddi4+0x1b8>
 80084b8:	3b02      	subs	r3, #2
 80084ba:	4461      	add	r1, ip
 80084bc:	e732      	b.n	8008324 <__udivmoddi4+0x12c>
 80084be:	4630      	mov	r0, r6
 80084c0:	e709      	b.n	80082d6 <__udivmoddi4+0xde>
 80084c2:	4464      	add	r4, ip
 80084c4:	3802      	subs	r0, #2
 80084c6:	e742      	b.n	800834e <__udivmoddi4+0x156>

080084c8 <__aeabi_idiv0>:
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084d0:	f000 f946 	bl	8008760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084d4:	f000 f81e 	bl	8008514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d8:	f000 f87a 	bl	80085d0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80084dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084e0:	480b      	ldr	r0, [pc, #44]	; (8008510 <main+0x44>)
 80084e2:	f000 fc6e 	bl	8008dc2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80084e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084ea:	4809      	ldr	r0, [pc, #36]	; (8008510 <main+0x44>)
 80084ec:	f000 fc69 	bl	8008dc2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80084f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80084f4:	4806      	ldr	r0, [pc, #24]	; (8008510 <main+0x44>)
 80084f6:	f000 fc64 	bl	8008dc2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80084fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084fe:	4804      	ldr	r0, [pc, #16]	; (8008510 <main+0x44>)
 8008500:	f000 fc5f 	bl	8008dc2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8008504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008508:	f000 f99c 	bl	8008844 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800850c:	e7e6      	b.n	80084dc <main+0x10>
 800850e:	bf00      	nop
 8008510:	40020c00 	.word	0x40020c00

08008514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b094      	sub	sp, #80	; 0x50
 8008518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800851a:	f107 0320 	add.w	r3, r7, #32
 800851e:	2230      	movs	r2, #48	; 0x30
 8008520:	2100      	movs	r1, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f8b0 	bl	8009688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008528:	f107 030c 	add.w	r3, r7, #12
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	605a      	str	r2, [r3, #4]
 8008532:	609a      	str	r2, [r3, #8]
 8008534:	60da      	str	r2, [r3, #12]
 8008536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
 800853c:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <SystemClock_Config+0xb4>)
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	4a21      	ldr	r2, [pc, #132]	; (80085c8 <SystemClock_Config+0xb4>)
 8008542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008546:	6413      	str	r3, [r2, #64]	; 0x40
 8008548:	4b1f      	ldr	r3, [pc, #124]	; (80085c8 <SystemClock_Config+0xb4>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008554:	2300      	movs	r3, #0
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <SystemClock_Config+0xb8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <SystemClock_Config+0xb8>)
 800855e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	4b19      	ldr	r3, [pc, #100]	; (80085cc <SystemClock_Config+0xb8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008570:	2302      	movs	r3, #2
 8008572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008574:	2301      	movs	r3, #1
 8008576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008578:	2310      	movs	r3, #16
 800857a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800857c:	2300      	movs	r3, #0
 800857e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008580:	f107 0320 	add.w	r3, r7, #32
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fc37 	bl	8008df8 <HAL_RCC_OscConfig>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8008590:	f000 f852 	bl	8008638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008594:	230f      	movs	r3, #15
 8008596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008598:	2300      	movs	r3, #0
 800859a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fe9a 	bl	80092e8 <HAL_RCC_ClockConfig>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80085ba:	f000 f83d 	bl	8008638 <Error_Handler>
  }
}
 80085be:	bf00      	nop
 80085c0:	3750      	adds	r7, #80	; 0x50
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40023800 	.word	0x40023800
 80085cc:	40007000 	.word	0x40007000

080085d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	609a      	str	r2, [r3, #8]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085e4:	2300      	movs	r3, #0
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <MX_GPIO_Init+0x60>)
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	4a10      	ldr	r2, [pc, #64]	; (8008630 <MX_GPIO_Init+0x60>)
 80085ee:	f043 0308 	orr.w	r3, r3, #8
 80085f2:	6313      	str	r3, [r2, #48]	; 0x30
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <MX_GPIO_Init+0x60>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008600:	2200      	movs	r2, #0
 8008602:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8008606:	480b      	ldr	r0, [pc, #44]	; (8008634 <MX_GPIO_Init+0x64>)
 8008608:	f000 fbc2 	bl	8008d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800860c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008612:	2301      	movs	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800861e:	1d3b      	adds	r3, r7, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4804      	ldr	r0, [pc, #16]	; (8008634 <MX_GPIO_Init+0x64>)
 8008624:	f000 fa18 	bl	8008a58 <HAL_GPIO_Init>

}
 8008628:	bf00      	nop
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40023800 	.word	0x40023800
 8008634:	40020c00 	.word	0x40020c00

08008638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800863c:	b672      	cpsid	i
}
 800863e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008640:	e7fe      	b.n	8008640 <Error_Handler+0x8>
	...

08008644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800864a:	2300      	movs	r3, #0
 800864c:	607b      	str	r3, [r7, #4]
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <HAL_MspInit+0x4c>)
 8008650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008652:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <HAL_MspInit+0x4c>)
 8008654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008658:	6453      	str	r3, [r2, #68]	; 0x44
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <HAL_MspInit+0x4c>)
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008666:	2300      	movs	r3, #0
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <HAL_MspInit+0x4c>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	4a08      	ldr	r2, [pc, #32]	; (8008690 <HAL_MspInit+0x4c>)
 8008670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008674:	6413      	str	r3, [r2, #64]	; 0x40
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <HAL_MspInit+0x4c>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800

08008694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008698:	e7fe      	b.n	8008698 <NMI_Handler+0x4>

0800869a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800869a:	b480      	push	{r7}
 800869c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800869e:	e7fe      	b.n	800869e <HardFault_Handler+0x4>

080086a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086a4:	e7fe      	b.n	80086a4 <MemManage_Handler+0x4>

080086a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086a6:	b480      	push	{r7}
 80086a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086aa:	e7fe      	b.n	80086aa <BusFault_Handler+0x4>

080086ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086b0:	e7fe      	b.n	80086b0 <UsageFault_Handler+0x4>

080086b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086b2:	b480      	push	{r7}
 80086b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086b6:	bf00      	nop
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086ce:	b480      	push	{r7}
 80086d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086d2:	bf00      	nop
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086e0:	f000 f890 	bl	8008804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086e4:	bf00      	nop
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <SystemInit+0x20>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	4a05      	ldr	r2, [pc, #20]	; (8008708 <SystemInit+0x20>)
 80086f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086fc:	bf00      	nop
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	e000ed00 	.word	0xe000ed00

0800870c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800870c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008710:	480d      	ldr	r0, [pc, #52]	; (8008748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008712:	490e      	ldr	r1, [pc, #56]	; (800874c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008714:	4a0e      	ldr	r2, [pc, #56]	; (8008750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008718:	e002      	b.n	8008720 <LoopCopyDataInit>

0800871a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800871a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800871c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800871e:	3304      	adds	r3, #4

08008720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008724:	d3f9      	bcc.n	800871a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008726:	4a0b      	ldr	r2, [pc, #44]	; (8008754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008728:	4c0b      	ldr	r4, [pc, #44]	; (8008758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800872a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800872c:	e001      	b.n	8008732 <LoopFillZerobss>

0800872e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800872e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008730:	3204      	adds	r2, #4

08008732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008734:	d3fb      	bcc.n	800872e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008736:	f7ff ffd7 	bl	80086e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800873a:	f000 ff81 	bl	8009640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800873e:	f7ff fec5 	bl	80084cc <main>
  bx  lr    
 8008742:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800874c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008750:	080096d0 	.word	0x080096d0
  ldr r2, =_sbss
 8008754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008758:	2000002c 	.word	0x2000002c

0800875c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800875c:	e7fe      	b.n	800875c <ADC_IRQHandler>
	...

08008760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HAL_Init+0x40>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <HAL_Init+0x40>)
 800876a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800876e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <HAL_Init+0x40>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a0a      	ldr	r2, [pc, #40]	; (80087a0 <HAL_Init+0x40>)
 8008776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800877a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800877c:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <HAL_Init+0x40>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a07      	ldr	r2, [pc, #28]	; (80087a0 <HAL_Init+0x40>)
 8008782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008788:	2003      	movs	r0, #3
 800878a:	f000 f931 	bl	80089f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800878e:	200f      	movs	r0, #15
 8008790:	f000 f808 	bl	80087a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008794:	f7ff ff56 	bl	8008644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40023c00 	.word	0x40023c00

080087a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <HAL_InitTick+0x54>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4b12      	ldr	r3, [pc, #72]	; (80087fc <HAL_InitTick+0x58>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80087be:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f93b 	bl	8008a3e <HAL_SYSTICK_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e00e      	b.n	80087f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b0f      	cmp	r3, #15
 80087d6:	d80a      	bhi.n	80087ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087d8:	2200      	movs	r2, #0
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e0:	f000 f911 	bl	8008a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087e4:	4a06      	ldr	r2, [pc, #24]	; (8008800 <HAL_InitTick+0x5c>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e000      	b.n	80087f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000000 	.word	0x20000000
 80087fc:	20000008 	.word	0x20000008
 8008800:	20000004 	.word	0x20000004

08008804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <HAL_IncTick+0x20>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <HAL_IncTick+0x24>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4413      	add	r3, r2
 8008814:	4a04      	ldr	r2, [pc, #16]	; (8008828 <HAL_IncTick+0x24>)
 8008816:	6013      	str	r3, [r2, #0]
}
 8008818:	bf00      	nop
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000008 	.word	0x20000008
 8008828:	20000028 	.word	0x20000028

0800882c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  return uwTick;
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <HAL_GetTick+0x14>)
 8008832:	681b      	ldr	r3, [r3, #0]
}
 8008834:	4618      	mov	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000028 	.word	0x20000028

08008844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800884c:	f7ff ffee 	bl	800882c <HAL_GetTick>
 8008850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800885c:	d005      	beq.n	800886a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800885e:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <HAL_Delay+0x44>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800886a:	bf00      	nop
 800886c:	f7ff ffde 	bl	800882c <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	429a      	cmp	r2, r3
 800887a:	d8f7      	bhi.n	800886c <HAL_Delay+0x28>
  {
  }
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000008 	.word	0x20000008

0800888c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <__NVIC_SetPriorityGrouping+0x44>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088a8:	4013      	ands	r3, r2
 80088aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088be:	4a04      	ldr	r2, [pc, #16]	; (80088d0 <__NVIC_SetPriorityGrouping+0x44>)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	60d3      	str	r3, [r2, #12]
}
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <__NVIC_GetPriorityGrouping+0x18>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	f003 0307 	and.w	r3, r3, #7
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	e000ed00 	.word	0xe000ed00

080088f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008900:	2b00      	cmp	r3, #0
 8008902:	db0a      	blt.n	800891a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	490c      	ldr	r1, [pc, #48]	; (800893c <__NVIC_SetPriority+0x4c>)
 800890a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890e:	0112      	lsls	r2, r2, #4
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	440b      	add	r3, r1
 8008914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008918:	e00a      	b.n	8008930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4908      	ldr	r1, [pc, #32]	; (8008940 <__NVIC_SetPriority+0x50>)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	3b04      	subs	r3, #4
 8008928:	0112      	lsls	r2, r2, #4
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	440b      	add	r3, r1
 800892e:	761a      	strb	r2, [r3, #24]
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	e000e100 	.word	0xe000e100
 8008940:	e000ed00 	.word	0xe000ed00

08008944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f1c3 0307 	rsb	r3, r3, #7
 800895e:	2b04      	cmp	r3, #4
 8008960:	bf28      	it	cs
 8008962:	2304      	movcs	r3, #4
 8008964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	3304      	adds	r3, #4
 800896a:	2b06      	cmp	r3, #6
 800896c:	d902      	bls.n	8008974 <NVIC_EncodePriority+0x30>
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	3b03      	subs	r3, #3
 8008972:	e000      	b.n	8008976 <NVIC_EncodePriority+0x32>
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	401a      	ands	r2, r3
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800898c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	43d9      	mvns	r1, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800899c:	4313      	orrs	r3, r2
         );
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3724      	adds	r7, #36	; 0x24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089bc:	d301      	bcc.n	80089c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089be:	2301      	movs	r3, #1
 80089c0:	e00f      	b.n	80089e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089c2:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <SysTick_Config+0x40>)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089ca:	210f      	movs	r1, #15
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d0:	f7ff ff8e 	bl	80088f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <SysTick_Config+0x40>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089da:	4b04      	ldr	r3, [pc, #16]	; (80089ec <SysTick_Config+0x40>)
 80089dc:	2207      	movs	r2, #7
 80089de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	e000e010 	.word	0xe000e010

080089f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff ff47 	bl	800888c <__NVIC_SetPriorityGrouping>
}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a18:	f7ff ff5c 	bl	80088d4 <__NVIC_GetPriorityGrouping>
 8008a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f7ff ff8e 	bl	8008944 <NVIC_EncodePriority>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff ff5d 	bl	80088f0 <__NVIC_SetPriority>
}
 8008a36:	bf00      	nop
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ffb0 	bl	80089ac <SysTick_Config>
 8008a4c:	4603      	mov	r3, r0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	; 0x24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	e16b      	b.n	8008d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a74:	2201      	movs	r2, #1
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4013      	ands	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	f040 815a 	bne.w	8008d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d005      	beq.n	8008aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d130      	bne.n	8008b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43db      	mvns	r3, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4013      	ands	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	091b      	lsrs	r3, r3, #4
 8008af6:	f003 0201 	and.w	r2, r3, #1
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d017      	beq.n	8008b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	2203      	movs	r2, #3
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d123      	bne.n	8008b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	08da      	lsrs	r2, r3, #3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3208      	adds	r2, #8
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	220f      	movs	r2, #15
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	08da      	lsrs	r2, r3, #3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3208      	adds	r2, #8
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	43db      	mvns	r3, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f003 0203 	and.w	r2, r3, #3
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 80b4 	beq.w	8008d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	4b60      	ldr	r3, [pc, #384]	; (8008d64 <HAL_GPIO_Init+0x30c>)
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	4a5f      	ldr	r2, [pc, #380]	; (8008d64 <HAL_GPIO_Init+0x30c>)
 8008be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bec:	6453      	str	r3, [r2, #68]	; 0x44
 8008bee:	4b5d      	ldr	r3, [pc, #372]	; (8008d64 <HAL_GPIO_Init+0x30c>)
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bfa:	4a5b      	ldr	r2, [pc, #364]	; (8008d68 <HAL_GPIO_Init+0x310>)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	089b      	lsrs	r3, r3, #2
 8008c00:	3302      	adds	r3, #2
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	220f      	movs	r2, #15
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	43db      	mvns	r3, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a52      	ldr	r2, [pc, #328]	; (8008d6c <HAL_GPIO_Init+0x314>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d02b      	beq.n	8008c7e <HAL_GPIO_Init+0x226>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a51      	ldr	r2, [pc, #324]	; (8008d70 <HAL_GPIO_Init+0x318>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d025      	beq.n	8008c7a <HAL_GPIO_Init+0x222>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a50      	ldr	r2, [pc, #320]	; (8008d74 <HAL_GPIO_Init+0x31c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01f      	beq.n	8008c76 <HAL_GPIO_Init+0x21e>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a4f      	ldr	r2, [pc, #316]	; (8008d78 <HAL_GPIO_Init+0x320>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d019      	beq.n	8008c72 <HAL_GPIO_Init+0x21a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a4e      	ldr	r2, [pc, #312]	; (8008d7c <HAL_GPIO_Init+0x324>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <HAL_GPIO_Init+0x216>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a4d      	ldr	r2, [pc, #308]	; (8008d80 <HAL_GPIO_Init+0x328>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00d      	beq.n	8008c6a <HAL_GPIO_Init+0x212>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a4c      	ldr	r2, [pc, #304]	; (8008d84 <HAL_GPIO_Init+0x32c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d007      	beq.n	8008c66 <HAL_GPIO_Init+0x20e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <HAL_GPIO_Init+0x330>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d101      	bne.n	8008c62 <HAL_GPIO_Init+0x20a>
 8008c5e:	2307      	movs	r3, #7
 8008c60:	e00e      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c62:	2308      	movs	r3, #8
 8008c64:	e00c      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c66:	2306      	movs	r3, #6
 8008c68:	e00a      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c6a:	2305      	movs	r3, #5
 8008c6c:	e008      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c6e:	2304      	movs	r3, #4
 8008c70:	e006      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c72:	2303      	movs	r3, #3
 8008c74:	e004      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e002      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <HAL_GPIO_Init+0x228>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f002 0203 	and.w	r2, r2, #3
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	4093      	lsls	r3, r2
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c90:	4935      	ldr	r1, [pc, #212]	; (8008d68 <HAL_GPIO_Init+0x310>)
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	089b      	lsrs	r3, r3, #2
 8008c96:	3302      	adds	r3, #2
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c9e:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cc2:	4a32      	ldr	r2, [pc, #200]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cc8:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cec:	4a27      	ldr	r2, [pc, #156]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d16:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d40:	4a12      	ldr	r2, [pc, #72]	; (8008d8c <HAL_GPIO_Init+0x334>)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	61fb      	str	r3, [r7, #28]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b0f      	cmp	r3, #15
 8008d50:	f67f ae90 	bls.w	8008a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3724      	adds	r7, #36	; 0x24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40023800 	.word	0x40023800
 8008d68:	40013800 	.word	0x40013800
 8008d6c:	40020000 	.word	0x40020000
 8008d70:	40020400 	.word	0x40020400
 8008d74:	40020800 	.word	0x40020800
 8008d78:	40020c00 	.word	0x40020c00
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	40021400 	.word	0x40021400
 8008d84:	40021800 	.word	0x40021800
 8008d88:	40021c00 	.word	0x40021c00
 8008d8c:	40013c00 	.word	0x40013c00

08008d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	807b      	strh	r3, [r7, #2]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008da0:	787b      	ldrb	r3, [r7, #1]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008da6:	887a      	ldrh	r2, [r7, #2]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008dac:	e003      	b.n	8008db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	041a      	lsls	r2, r3, #16
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	619a      	str	r2, [r3, #24]
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008dd4:	887a      	ldrh	r2, [r7, #2]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	041a      	lsls	r2, r3, #16
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	43d9      	mvns	r1, r3
 8008de0:	887b      	ldrh	r3, [r7, #2]
 8008de2:	400b      	ands	r3, r1
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	619a      	str	r2, [r3, #24]
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
	...

08008df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e267      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d075      	beq.n	8008f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e16:	4b88      	ldr	r3, [pc, #544]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 030c 	and.w	r3, r3, #12
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d00c      	beq.n	8008e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e22:	4b85      	ldr	r3, [pc, #532]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d112      	bne.n	8008e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e2e:	4b82      	ldr	r3, [pc, #520]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e3a:	d10b      	bne.n	8008e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e3c:	4b7e      	ldr	r3, [pc, #504]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d05b      	beq.n	8008f00 <HAL_RCC_OscConfig+0x108>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d157      	bne.n	8008f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e242      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e5c:	d106      	bne.n	8008e6c <HAL_RCC_OscConfig+0x74>
 8008e5e:	4b76      	ldr	r3, [pc, #472]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a75      	ldr	r2, [pc, #468]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	e01d      	b.n	8008ea8 <HAL_RCC_OscConfig+0xb0>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e74:	d10c      	bne.n	8008e90 <HAL_RCC_OscConfig+0x98>
 8008e76:	4b70      	ldr	r3, [pc, #448]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a6f      	ldr	r2, [pc, #444]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	4b6d      	ldr	r3, [pc, #436]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a6c      	ldr	r2, [pc, #432]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e00b      	b.n	8008ea8 <HAL_RCC_OscConfig+0xb0>
 8008e90:	4b69      	ldr	r3, [pc, #420]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a68      	ldr	r2, [pc, #416]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	4b66      	ldr	r3, [pc, #408]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a65      	ldr	r2, [pc, #404]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d013      	beq.n	8008ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb0:	f7ff fcbc 	bl	800882c <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eb8:	f7ff fcb8 	bl	800882c <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b64      	cmp	r3, #100	; 0x64
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e207      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eca:	4b5b      	ldr	r3, [pc, #364]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0f0      	beq.n	8008eb8 <HAL_RCC_OscConfig+0xc0>
 8008ed6:	e014      	b.n	8008f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed8:	f7ff fca8 	bl	800882c <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ee0:	f7ff fca4 	bl	800882c <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b64      	cmp	r3, #100	; 0x64
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e1f3      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ef2:	4b51      	ldr	r3, [pc, #324]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0xe8>
 8008efe:	e000      	b.n	8008f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d063      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f0e:	4b4a      	ldr	r3, [pc, #296]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 030c 	and.w	r3, r3, #12
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f1a:	4b47      	ldr	r3, [pc, #284]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f22:	2b08      	cmp	r3, #8
 8008f24:	d11c      	bne.n	8008f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f26:	4b44      	ldr	r3, [pc, #272]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d116      	bne.n	8008f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f32:	4b41      	ldr	r3, [pc, #260]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <HAL_RCC_OscConfig+0x152>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d001      	beq.n	8008f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e1c7      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f4a:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	4937      	ldr	r1, [pc, #220]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f5e:	e03a      	b.n	8008fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d020      	beq.n	8008faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f68:	4b34      	ldr	r3, [pc, #208]	; (800903c <HAL_RCC_OscConfig+0x244>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6e:	f7ff fc5d 	bl	800882c <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f76:	f7ff fc59 	bl	800882c <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e1a8      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f88:	4b2b      	ldr	r3, [pc, #172]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f94:	4b28      	ldr	r3, [pc, #160]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	4925      	ldr	r1, [pc, #148]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	600b      	str	r3, [r1, #0]
 8008fa8:	e015      	b.n	8008fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008faa:	4b24      	ldr	r3, [pc, #144]	; (800903c <HAL_RCC_OscConfig+0x244>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb0:	f7ff fc3c 	bl	800882c <HAL_GetTick>
 8008fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fb8:	f7ff fc38 	bl	800882c <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e187      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f0      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d036      	beq.n	8009050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d016      	beq.n	8009018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <HAL_RCC_OscConfig+0x248>)
 8008fec:	2201      	movs	r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff0:	f7ff fc1c 	bl	800882c <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ff8:	f7ff fc18 	bl	800882c <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e167      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_RCC_OscConfig+0x240>)
 800900c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x200>
 8009016:	e01b      	b.n	8009050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009018:	4b09      	ldr	r3, [pc, #36]	; (8009040 <HAL_RCC_OscConfig+0x248>)
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800901e:	f7ff fc05 	bl	800882c <HAL_GetTick>
 8009022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009024:	e00e      	b.n	8009044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009026:	f7ff fc01 	bl	800882c <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d907      	bls.n	8009044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e150      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
 8009038:	40023800 	.word	0x40023800
 800903c:	42470000 	.word	0x42470000
 8009040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009044:	4b88      	ldr	r3, [pc, #544]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1ea      	bne.n	8009026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8097 	beq.w	800918c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009062:	4b81      	ldr	r3, [pc, #516]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10f      	bne.n	800908e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	4b7d      	ldr	r3, [pc, #500]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	4a7c      	ldr	r2, [pc, #496]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907c:	6413      	str	r3, [r2, #64]	; 0x40
 800907e:	4b7a      	ldr	r3, [pc, #488]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009086:	60bb      	str	r3, [r7, #8]
 8009088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800908a:	2301      	movs	r3, #1
 800908c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800908e:	4b77      	ldr	r3, [pc, #476]	; (800926c <HAL_RCC_OscConfig+0x474>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d118      	bne.n	80090cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800909a:	4b74      	ldr	r3, [pc, #464]	; (800926c <HAL_RCC_OscConfig+0x474>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a73      	ldr	r2, [pc, #460]	; (800926c <HAL_RCC_OscConfig+0x474>)
 80090a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090a6:	f7ff fbc1 	bl	800882c <HAL_GetTick>
 80090aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090ac:	e008      	b.n	80090c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090ae:	f7ff fbbd 	bl	800882c <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e10c      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090c0:	4b6a      	ldr	r3, [pc, #424]	; (800926c <HAL_RCC_OscConfig+0x474>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f0      	beq.n	80090ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d106      	bne.n	80090e2 <HAL_RCC_OscConfig+0x2ea>
 80090d4:	4b64      	ldr	r3, [pc, #400]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d8:	4a63      	ldr	r2, [pc, #396]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	6713      	str	r3, [r2, #112]	; 0x70
 80090e0:	e01c      	b.n	800911c <HAL_RCC_OscConfig+0x324>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d10c      	bne.n	8009104 <HAL_RCC_OscConfig+0x30c>
 80090ea:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	4a5e      	ldr	r2, [pc, #376]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090f0:	f043 0304 	orr.w	r3, r3, #4
 80090f4:	6713      	str	r3, [r2, #112]	; 0x70
 80090f6:	4b5c      	ldr	r3, [pc, #368]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	4a5b      	ldr	r2, [pc, #364]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	6713      	str	r3, [r2, #112]	; 0x70
 8009102:	e00b      	b.n	800911c <HAL_RCC_OscConfig+0x324>
 8009104:	4b58      	ldr	r3, [pc, #352]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a57      	ldr	r2, [pc, #348]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
 8009110:	4b55      	ldr	r3, [pc, #340]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	4a54      	ldr	r2, [pc, #336]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009116:	f023 0304 	bic.w	r3, r3, #4
 800911a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d015      	beq.n	8009150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009124:	f7ff fb82 	bl	800882c <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800912a:	e00a      	b.n	8009142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800912c:	f7ff fb7e 	bl	800882c <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	f241 3288 	movw	r2, #5000	; 0x1388
 800913a:	4293      	cmp	r3, r2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e0cb      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009142:	4b49      	ldr	r3, [pc, #292]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0ee      	beq.n	800912c <HAL_RCC_OscConfig+0x334>
 800914e:	e014      	b.n	800917a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009150:	f7ff fb6c 	bl	800882c <HAL_GetTick>
 8009154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009156:	e00a      	b.n	800916e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009158:	f7ff fb68 	bl	800882c <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	f241 3288 	movw	r2, #5000	; 0x1388
 8009166:	4293      	cmp	r3, r2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e0b5      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800916e:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1ee      	bne.n	8009158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d105      	bne.n	800918c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009180:	4b39      	ldr	r3, [pc, #228]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	4a38      	ldr	r2, [pc, #224]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800918a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 80a1 	beq.w	80092d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009196:	4b34      	ldr	r3, [pc, #208]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 030c 	and.w	r3, r3, #12
 800919e:	2b08      	cmp	r3, #8
 80091a0:	d05c      	beq.n	800925c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d141      	bne.n	800922e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091aa:	4b31      	ldr	r3, [pc, #196]	; (8009270 <HAL_RCC_OscConfig+0x478>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b0:	f7ff fb3c 	bl	800882c <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091b8:	f7ff fb38 	bl	800882c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e087      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ca:	4b27      	ldr	r3, [pc, #156]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f0      	bne.n	80091b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69da      	ldr	r2, [r3, #28]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	019b      	lsls	r3, r3, #6
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	3b01      	subs	r3, #1
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	491b      	ldr	r1, [pc, #108]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009200:	4b1b      	ldr	r3, [pc, #108]	; (8009270 <HAL_RCC_OscConfig+0x478>)
 8009202:	2201      	movs	r2, #1
 8009204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009206:	f7ff fb11 	bl	800882c <HAL_GetTick>
 800920a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800920e:	f7ff fb0d 	bl	800882c <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e05c      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009220:	4b11      	ldr	r3, [pc, #68]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0f0      	beq.n	800920e <HAL_RCC_OscConfig+0x416>
 800922c:	e054      	b.n	80092d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922e:	4b10      	ldr	r3, [pc, #64]	; (8009270 <HAL_RCC_OscConfig+0x478>)
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009234:	f7ff fafa 	bl	800882c <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800923c:	f7ff faf6 	bl	800882c <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e045      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800924e:	4b06      	ldr	r3, [pc, #24]	; (8009268 <HAL_RCC_OscConfig+0x470>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f0      	bne.n	800923c <HAL_RCC_OscConfig+0x444>
 800925a:	e03d      	b.n	80092d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d107      	bne.n	8009274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e038      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
 8009268:	40023800 	.word	0x40023800
 800926c:	40007000 	.word	0x40007000
 8009270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <HAL_RCC_OscConfig+0x4ec>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d028      	beq.n	80092d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800928c:	429a      	cmp	r2, r3
 800928e:	d121      	bne.n	80092d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800929a:	429a      	cmp	r2, r3
 800929c:	d11a      	bne.n	80092d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092a4:	4013      	ands	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d111      	bne.n	80092d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	3b01      	subs	r3, #1
 80092be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d107      	bne.n	80092d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d001      	beq.n	80092d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40023800 	.word	0x40023800

080092e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0cc      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092fc:	4b68      	ldr	r3, [pc, #416]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d90c      	bls.n	8009324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800930a:	4b65      	ldr	r3, [pc, #404]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009312:	4b63      	ldr	r3, [pc, #396]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d001      	beq.n	8009324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0b8      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d020      	beq.n	8009372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800933c:	4b59      	ldr	r3, [pc, #356]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4a58      	ldr	r2, [pc, #352]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009354:	4b53      	ldr	r3, [pc, #332]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	4a52      	ldr	r2, [pc, #328]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800935a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800935e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009360:	4b50      	ldr	r3, [pc, #320]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	494d      	ldr	r1, [pc, #308]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d044      	beq.n	8009408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d107      	bne.n	8009396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009386:	4b47      	ldr	r3, [pc, #284]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d119      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e07f      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d003      	beq.n	80093a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d107      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a6:	4b3f      	ldr	r3, [pc, #252]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e06f      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093b6:	4b3b      	ldr	r3, [pc, #236]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e067      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f023 0203 	bic.w	r2, r3, #3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	4934      	ldr	r1, [pc, #208]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093d8:	f7ff fa28 	bl	800882c <HAL_GetTick>
 80093dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093de:	e00a      	b.n	80093f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e0:	f7ff fa24 	bl	800882c <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e04f      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f6:	4b2b      	ldr	r3, [pc, #172]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 020c 	and.w	r2, r3, #12
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	429a      	cmp	r2, r3
 8009406:	d1eb      	bne.n	80093e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d20c      	bcs.n	8009430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009416:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800941e:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d001      	beq.n	8009430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e032      	b.n	8009496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d008      	beq.n	800944e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800943c:	4b19      	ldr	r3, [pc, #100]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	4916      	ldr	r1, [pc, #88]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800944a:	4313      	orrs	r3, r2
 800944c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0308 	and.w	r3, r3, #8
 8009456:	2b00      	cmp	r3, #0
 8009458:	d009      	beq.n	800946e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	490e      	ldr	r1, [pc, #56]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 800946a:	4313      	orrs	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800946e:	f000 f821 	bl	80094b4 <HAL_RCC_GetSysClockFreq>
 8009472:	4602      	mov	r2, r0
 8009474:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	091b      	lsrs	r3, r3, #4
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	490a      	ldr	r1, [pc, #40]	; (80094a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009480:	5ccb      	ldrb	r3, [r1, r3]
 8009482:	fa22 f303 	lsr.w	r3, r2, r3
 8009486:	4a09      	ldr	r2, [pc, #36]	; (80094ac <HAL_RCC_ClockConfig+0x1c4>)
 8009488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <HAL_RCC_ClockConfig+0x1c8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff f988 	bl	80087a4 <HAL_InitTick>

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40023c00 	.word	0x40023c00
 80094a4:	40023800 	.word	0x40023800
 80094a8:	080096b0 	.word	0x080096b0
 80094ac:	20000000 	.word	0x20000000
 80094b0:	20000004 	.word	0x20000004

080094b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094b8:	b090      	sub	sp, #64	; 0x40
 80094ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
 80094c0:	2300      	movs	r3, #0
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c4:	2300      	movs	r3, #0
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094cc:	4b59      	ldr	r3, [pc, #356]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 030c 	and.w	r3, r3, #12
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d00d      	beq.n	80094f4 <HAL_RCC_GetSysClockFreq+0x40>
 80094d8:	2b08      	cmp	r3, #8
 80094da:	f200 80a1 	bhi.w	8009620 <HAL_RCC_GetSysClockFreq+0x16c>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <HAL_RCC_GetSysClockFreq+0x34>
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d003      	beq.n	80094ee <HAL_RCC_GetSysClockFreq+0x3a>
 80094e6:	e09b      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094e8:	4b53      	ldr	r3, [pc, #332]	; (8009638 <HAL_RCC_GetSysClockFreq+0x184>)
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80094ec:	e09b      	b.n	8009626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094ee:	4b53      	ldr	r3, [pc, #332]	; (800963c <HAL_RCC_GetSysClockFreq+0x188>)
 80094f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80094f2:	e098      	b.n	8009626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094f4:	4b4f      	ldr	r3, [pc, #316]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094fe:	4b4d      	ldr	r3, [pc, #308]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d028      	beq.n	800955c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800950a:	4b4a      	ldr	r3, [pc, #296]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	099b      	lsrs	r3, r3, #6
 8009510:	2200      	movs	r2, #0
 8009512:	623b      	str	r3, [r7, #32]
 8009514:	627a      	str	r2, [r7, #36]	; 0x24
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800951c:	2100      	movs	r1, #0
 800951e:	4b47      	ldr	r3, [pc, #284]	; (800963c <HAL_RCC_GetSysClockFreq+0x188>)
 8009520:	fb03 f201 	mul.w	r2, r3, r1
 8009524:	2300      	movs	r3, #0
 8009526:	fb00 f303 	mul.w	r3, r0, r3
 800952a:	4413      	add	r3, r2
 800952c:	4a43      	ldr	r2, [pc, #268]	; (800963c <HAL_RCC_GetSysClockFreq+0x188>)
 800952e:	fba0 1202 	umull	r1, r2, r0, r2
 8009532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009534:	460a      	mov	r2, r1
 8009536:	62ba      	str	r2, [r7, #40]	; 0x28
 8009538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800953a:	4413      	add	r3, r2
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	2200      	movs	r2, #0
 8009542:	61bb      	str	r3, [r7, #24]
 8009544:	61fa      	str	r2, [r7, #28]
 8009546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800954a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800954e:	f7fe fe3b 	bl	80081c8 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4613      	mov	r3, r2
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955a:	e053      	b.n	8009604 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800955c:	4b35      	ldr	r3, [pc, #212]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	099b      	lsrs	r3, r3, #6
 8009562:	2200      	movs	r2, #0
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	617a      	str	r2, [r7, #20]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800956e:	f04f 0b00 	mov.w	fp, #0
 8009572:	4652      	mov	r2, sl
 8009574:	465b      	mov	r3, fp
 8009576:	f04f 0000 	mov.w	r0, #0
 800957a:	f04f 0100 	mov.w	r1, #0
 800957e:	0159      	lsls	r1, r3, #5
 8009580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009584:	0150      	lsls	r0, r2, #5
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	ebb2 080a 	subs.w	r8, r2, sl
 800958e:	eb63 090b 	sbc.w	r9, r3, fp
 8009592:	f04f 0200 	mov.w	r2, #0
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800959e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80095a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80095a6:	ebb2 0408 	subs.w	r4, r2, r8
 80095aa:	eb63 0509 	sbc.w	r5, r3, r9
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	00eb      	lsls	r3, r5, #3
 80095b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095bc:	00e2      	lsls	r2, r4, #3
 80095be:	4614      	mov	r4, r2
 80095c0:	461d      	mov	r5, r3
 80095c2:	eb14 030a 	adds.w	r3, r4, sl
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	eb45 030b 	adc.w	r3, r5, fp
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095da:	4629      	mov	r1, r5
 80095dc:	028b      	lsls	r3, r1, #10
 80095de:	4621      	mov	r1, r4
 80095e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095e4:	4621      	mov	r1, r4
 80095e6:	028a      	lsls	r2, r1, #10
 80095e8:	4610      	mov	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	2200      	movs	r2, #0
 80095f0:	60bb      	str	r3, [r7, #8]
 80095f2:	60fa      	str	r2, [r7, #12]
 80095f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095f8:	f7fe fde6 	bl	80081c8 <__aeabi_uldivmod>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4613      	mov	r3, r2
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009604:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <HAL_RCC_GetSysClockFreq+0x180>)
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	3301      	adds	r3, #1
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	fbb2 f3f3 	udiv	r3, r2, r3
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800961e:	e002      	b.n	8009626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <HAL_RCC_GetSysClockFreq+0x184>)
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009628:	4618      	mov	r0, r3
 800962a:	3740      	adds	r7, #64	; 0x40
 800962c:	46bd      	mov	sp, r7
 800962e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009632:	bf00      	nop
 8009634:	40023800 	.word	0x40023800
 8009638:	00f42400 	.word	0x00f42400
 800963c:	017d7840 	.word	0x017d7840

08009640 <__libc_init_array>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4d0d      	ldr	r5, [pc, #52]	; (8009678 <__libc_init_array+0x38>)
 8009644:	4c0d      	ldr	r4, [pc, #52]	; (800967c <__libc_init_array+0x3c>)
 8009646:	1b64      	subs	r4, r4, r5
 8009648:	10a4      	asrs	r4, r4, #2
 800964a:	2600      	movs	r6, #0
 800964c:	42a6      	cmp	r6, r4
 800964e:	d109      	bne.n	8009664 <__libc_init_array+0x24>
 8009650:	4d0b      	ldr	r5, [pc, #44]	; (8009680 <__libc_init_array+0x40>)
 8009652:	4c0c      	ldr	r4, [pc, #48]	; (8009684 <__libc_init_array+0x44>)
 8009654:	f000 f820 	bl	8009698 <_init>
 8009658:	1b64      	subs	r4, r4, r5
 800965a:	10a4      	asrs	r4, r4, #2
 800965c:	2600      	movs	r6, #0
 800965e:	42a6      	cmp	r6, r4
 8009660:	d105      	bne.n	800966e <__libc_init_array+0x2e>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	f855 3b04 	ldr.w	r3, [r5], #4
 8009668:	4798      	blx	r3
 800966a:	3601      	adds	r6, #1
 800966c:	e7ee      	b.n	800964c <__libc_init_array+0xc>
 800966e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009672:	4798      	blx	r3
 8009674:	3601      	adds	r6, #1
 8009676:	e7f2      	b.n	800965e <__libc_init_array+0x1e>
 8009678:	080096c8 	.word	0x080096c8
 800967c:	080096c8 	.word	0x080096c8
 8009680:	080096c8 	.word	0x080096c8
 8009684:	080096cc 	.word	0x080096cc

08009688 <memset>:
 8009688:	4402      	add	r2, r0
 800968a:	4603      	mov	r3, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <_init>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr

080096a4 <_fini>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr
