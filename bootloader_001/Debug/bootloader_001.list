
bootloader_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myblock      00000080  20000100  20000100  00030100  2**2
                  ALLOC
  2 .text         00003044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003274  08003274  000201f4  2**0
                  CONTENTS
  5 .ARM          00000008  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800327c  0800327c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  20000180  08003284  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 11 .bss          00000160  200001f4  200001f4  00030100  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000354  20000354  00030100  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096ad  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b8a  00000000  00000000  000298d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007c8  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000710  00000000  00000000  0002bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd5a  00000000  00000000  0002c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009bc2  00000000  00000000  0004c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0c3c  00000000  00000000  00055c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00116890  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000021d0  00000000  00000000  001168e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031bc 	.word	0x080031bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080031bc 	.word	0x080031bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <bootloader_jump_to_user_code>:
 */
#include "bootloader.h"
#include "main.h"
#include "xmodem.h"

BL_StatusTypedef bootloader_jump_to_user_code(UART_HandleTypeDef*BL_UART){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//set msp
	uint32_t msp_value=*(uint32_t*)USER_CODE_SECTION_ADDRESS;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <bootloader_jump_to_user_code+0x34>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f383 8808 	msr	MSP, r3
}
 800059c:	bf00      	nop
	__set_MSP(msp_value);

	//relocate vector table
	SCB->VTOR=(__IOM uint32_t)USER_CODE_SECTION_ADDRESS;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <bootloader_jump_to_user_code+0x38>)
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <bootloader_jump_to_user_code+0x34>)
 80005a2:	609a      	str	r2, [r3, #8]

	//create function pointer for reset handler
	void(*reset_handler)(void);

	reset_handler=(void(*)(void))(*(uint32_t *)RESET_HANDLER_ADDRESS);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <bootloader_jump_to_user_code+0x3c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	613b      	str	r3, [r7, #16]
	reset_handler();
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	4798      	blx	r3

	return BL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08008000 	.word	0x08008000
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	08008004 	.word	0x08008004

080005c4 <bootloader_get_version>:

/*********Bootloader Command Functions*****************************/

BL_StatusTypedef bootloader_get_version(UART_HandleTypeDef*BL_UART)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

}
 80005cc:	bf00      	nop
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <bootloader_write_bin_to_memory>:

BL_StatusTypedef bootloader_write_bin_to_memory(uint8_t *rxbuf ,int size)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	static uint32_t address=FLASH_DOWNLOAD_AREA;

	HAL_FLASH_Unlock();
 80005e6:	f000 fd15 	bl	8001014 <HAL_FLASH_Unlock>
	int i=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
	while(i < size){
 80005ee:	e01a      	b.n	8000626 <bootloader_write_bin_to_memory+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,address++, *(rxbuf+i)) == HAL_OK ){
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <bootloader_write_bin_to_memory+0x60>)
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	1c4b      	adds	r3, r1, #1
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <bootloader_write_bin_to_memory+0x60>)
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2200      	movs	r2, #0
 8000606:	461c      	mov	r4, r3
 8000608:	4615      	mov	r5, r2
 800060a:	4622      	mov	r2, r4
 800060c:	462b      	mov	r3, r5
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fcac 	bl	8000f6c <HAL_FLASH_Program>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <bootloader_write_bin_to_memory+0x46>
			i++;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e001      	b.n	8000626 <bootloader_write_bin_to_memory+0x4a>
		}
		else{
			return BL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	e006      	b.n	8000634 <bootloader_write_bin_to_memory+0x58>
	while(i < size){
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbe0      	blt.n	80005f0 <bootloader_write_bin_to_memory+0x14>
		}
	}
	HAL_FLASH_Lock();
 800062e:	f000 fd13 	bl	8001058 <HAL_FLASH_Lock>
	return BL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bdb0      	pop	{r4, r5, r7, pc}
 800063c:	20000180 	.word	0x20000180

08000640 <bootloader_flash_erase_download_area>:
BL_StatusTypedef bootloader_flash_erase_download_area(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000644:	f000 fce6 	bl	8001014 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_2, FLASH_VOLTAGE_RANGE_3);
 8000648:	2102      	movs	r1, #2
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fe44 	bl	80012d8 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000650:	f000 fd02 	bl	8001058 <HAL_FLASH_Lock>
	return BL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000660:	f000 fb2c 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f816 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f89c 	bl	80007a4 <MX_GPIO_Init>
  MX_UART5_Init();
 800066c:	f000 f870 	bl	8000750 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /*Enter Bootloader mode when User_button is pressed*/
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000670:	2101      	movs	r1, #1
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0x30>)
 8000674:	f001 f814 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d102      	bne.n	8000684 <main+0x28>
	  bootloader_mode();
 800067e:	f000 f8f1 	bl	8000864 <bootloader_mode>
 8000682:	e002      	b.n	800068a <main+0x2e>
  }
  else{
	  bootloader_jump_to_user_code(&huart5);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <main+0x34>)
 8000686:	f7ff ff7d 	bl	8000584 <bootloader_jump_to_user_code>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x2e>
 800068c:	40020000 	.word	0x40020000
 8000690:	20000210 	.word	0x20000210

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f914 	bl	80028d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xb4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xb4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <SystemClock_Config+0xb8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <SystemClock_Config+0xb8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fffd 	bl	8001704 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000710:	f000 f8ee 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fa60 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073a:	f000 f8d9 	bl	80008f0 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_UART5_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_UART5_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_UART5_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_UART5_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_UART5_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_UART5_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_UART5_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_UART5_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_UART5_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_UART5_Init+0x4c>)
 8000788:	f001 fc14 	bl	8001fb4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f8ad 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000210 	.word	0x20000210
 80007a0:	40005000 	.word	0x40005000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xb4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xb4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_GPIO_Init+0xb8>)
 8000816:	f000 ff5b 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0xbc>)
 800082e:	f000 fd9b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000832:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xb8>)
 800084c:	f000 fd8c 	bl	8001368 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020c00 	.word	0x40020c00
 8000860:	40020000 	.word	0x40020000

08000864 <bootloader_mode>:

/* USER CODE BEGIN 4 */
void bootloader_mode(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

	/*Use UART5 for bootloader command*/
	HAL_UART_Transmit(&huart5,(uint8_t*) "Welcome to bootloader\r\n", strlen("Welcome to bootloder\r\n"),HAL_MAX_DELAY );
 8000868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086c:	2216      	movs	r2, #22
 800086e:	491b      	ldr	r1, [pc, #108]	; (80008dc <bootloader_mode+0x78>)
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <bootloader_mode+0x7c>)
 8000872:	f001 fbec 	bl	800204e <HAL_UART_Transmit>

	/*poll UART5 to read data*/
	while(1)
	{
		/*Receive command from host*/
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087a:	2201      	movs	r2, #1
 800087c:	4919      	ldr	r1, [pc, #100]	; (80008e4 <bootloader_mode+0x80>)
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <bootloader_mode+0x7c>)
 8000880:	f001 fc77 	bl	8002172 <HAL_UART_Receive>

		//break through cmd
		switch(cmdBuf[0])
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <bootloader_mode+0x80>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b32      	cmp	r3, #50	; 0x32
 800088a:	d006      	beq.n	800089a <bootloader_mode+0x36>
 800088c:	2b32      	cmp	r3, #50	; 0x32
 800088e:	dc1c      	bgt.n	80008ca <bootloader_mode+0x66>
 8000890:	2b30      	cmp	r3, #48	; 0x30
 8000892:	d006      	beq.n	80008a2 <bootloader_mode+0x3e>
 8000894:	2b31      	cmp	r3, #49	; 0x31
 8000896:	d008      	beq.n	80008aa <bootloader_mode+0x46>
 8000898:	e017      	b.n	80008ca <bootloader_mode+0x66>
		{
		case BL_GET_VERSION:
			bootloader_get_version(&huart5);
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <bootloader_mode+0x7c>)
 800089c:	f7ff fe92 	bl	80005c4 <bootloader_get_version>
			break;
 80008a0:	e01a      	b.n	80008d8 <bootloader_mode+0x74>
		case BL_JMP_TO_USER_CODE:
			bootloader_jump_to_user_code(&huart5);
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <bootloader_mode+0x7c>)
 80008a4:	f7ff fe6e 	bl	8000584 <bootloader_jump_to_user_code>
			break;
 80008a8:	e016      	b.n	80008d8 <bootloader_mode+0x74>
		case BL_WRITE_BIN_TO_MEMORY:
			bootloader_flash_erase_download_area();
 80008aa:	f7ff fec9 	bl	8000640 <bootloader_flash_erase_download_area>
			while(1){
				if(xmodem_receive(&huart5)==XMODEM_ERROR){
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <bootloader_mode+0x7c>)
 80008b0:	f000 f926 	bl	8000b00 <xmodem_receive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d1f9      	bne.n	80008ae <bootloader_mode+0x4a>
					HAL_UART_Transmit(&huart5, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	2205      	movs	r2, #5
 80008c0:	4909      	ldr	r1, [pc, #36]	; (80008e8 <bootloader_mode+0x84>)
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <bootloader_mode+0x7c>)
 80008c4:	f001 fbc3 	bl	800204e <HAL_UART_Transmit>
					while(1);
 80008c8:	e7fe      	b.n	80008c8 <bootloader_mode+0x64>
				}
			}
			break;
		default:
			HAL_UART_Transmit(&huart5, "Invalid cmd\n\r", strlen("Invalid cmd\n\r"), HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ce:	220d      	movs	r2, #13
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <bootloader_mode+0x88>)
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <bootloader_mode+0x7c>)
 80008d4:	f001 fbbb 	bl	800204e <HAL_UART_Transmit>
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 80008d8:	e7cd      	b.n	8000876 <bootloader_mode+0x12>
 80008da:	bf00      	nop
 80008dc:	080031d4 	.word	0x080031d4
 80008e0:	20000210 	.word	0x20000210
 80008e4:	20000254 	.word	0x20000254
 80008e8:	080031ec 	.word	0x080031ec
 80008ec:	080031f4 	.word	0x080031f4

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <HAL_UART_MspInit+0xc0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d14a      	bne.n	8000a04 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 8000978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_UART_MspInit+0xc4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009d4:	2308      	movs	r3, #8
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <HAL_UART_MspInit+0xc8>)
 80009e0:	f000 fcc2 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009e4:	2304      	movs	r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009f4:	2308      	movs	r3, #8
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_UART_MspInit+0xcc>)
 8000a00:	f000 fcb2 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005000 	.word	0x40005000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f97a 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f001 feec 	bl	800287c <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20020000 	.word	0x20020000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	2000031c 	.word	0x2000031c
 8000ad8:	20000358 	.word	0x20000358

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <xmodem_receive>:
*      +-----+-------+-------+------+-----+------+
*      | SOH | PKT_num | Data_Size | data | SUM  |
*      +-----+-------+-------+------+-----+------+
*/

XMODEM_StatusTypedef xmodem_receive(UART_HandleTypeDef *BL_UART){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b0c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8000b10:	6018      	str	r0, [r3, #0]

	uint8_t rxbuf[1050]={0};
 8000b12:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b16:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	f240 4216 	movw	r2, #1046	; 0x416
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fed2 	bl	80028d0 <memset>
	uint8_t header,packet_number=0,size[2];
 8000b2c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b30:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	uint16_t actual_size;

	/*Receive & Check Header**/
	HAL_UART_Receive(BL_UART, &header, 1, HAL_MAX_DELAY);
 8000b38:	f107 011b 	add.w	r1, r7, #27
 8000b3c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b40:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b48:	2201      	movs	r2, #1
 8000b4a:	6800      	ldr	r0, [r0, #0]
 8000b4c:	f001 fb11 	bl	8002172 <HAL_UART_Receive>

	switch(header)
 8000b50:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b54:	f2a3 431d 	subw	r3, r3, #1053	; 0x41d
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	dc02      	bgt.n	8000b64 <xmodem_receive+0x64>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dc03      	bgt.n	8000b6a <xmodem_receive+0x6a>
 8000b62:	e074      	b.n	8000c4e <xmodem_receive+0x14e>
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d051      	beq.n	8000c0c <xmodem_receive+0x10c>
 8000b68:	e071      	b.n	8000c4e <xmodem_receive+0x14e>
	 {
	 case SOH:
	 case STX:
		 	 /*receive PKT_num & size*/
		 	 HAL_UART_Receive(BL_UART, &packet_number, 1, HAL_MAX_DELAY);
 8000b6a:	f107 011a 	add.w	r1, r7, #26
 8000b6e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b72:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	6800      	ldr	r0, [r0, #0]
 8000b7e:	f001 faf8 	bl	8002172 <HAL_UART_Receive>
		 	 /*size is of 2 byte*/
		 	 HAL_UART_Receive(BL_UART, size, 2, HAL_MAX_DELAY);
 8000b82:	f107 0118 	add.w	r1, r7, #24
 8000b86:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000b8a:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b92:	2202      	movs	r2, #2
 8000b94:	6800      	ldr	r0, [r0, #0]
 8000b96:	f001 faec 	bl	8002172 <HAL_UART_Receive>
		 	 /*use size from 1 byte to 2 byte*/
		 	 actual_size=*(uint16_t*)size;
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		 	 /*receive DATA*/
		 	 HAL_UART_Receive(BL_UART, rxbuf, actual_size, HAL_MAX_DELAY);
 8000ba4:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8000ba8:	f107 011c 	add.w	r1, r7, #28
 8000bac:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000bb0:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb8:	6800      	ldr	r0, [r0, #0]
 8000bba:	f001 fada 	bl	8002172 <HAL_UART_Receive>

		 	 /*flash memory*/
		 	bootloader_write_bin_to_memory(rxbuf,actual_size);
 8000bbe:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd07 	bl	80005dc <bootloader_write_bin_to_memory>

#ifdef DEBUG_XMODEM
		 	/*debug*/
		 	char temp[12];
		 	sprintf(temp,"send=%d\n\r",packet_number);
 8000bce:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000bd2:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	491f      	ldr	r1, [pc, #124]	; (8000c5c <xmodem_receive+0x15c>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fe7d 	bl	80028e0 <siprintf>
		 	HAL_UART_Transmit(BL_UART, temp, strlen(temp), HAL_MAX_DELAY);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faf0 	bl	80001d0 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000bfc:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c04:	6800      	ldr	r0, [r0, #0]
 8000c06:	f001 fa22 	bl	800204e <HAL_UART_Transmit>
 8000c0a:	e020      	b.n	8000c4e <xmodem_receive+0x14e>
		 	break;

	 case EOT:
		 /*Receive of EOT will jump to user app*/
#ifdef DEBUG_XMODEM
		 HAL_UART_Transmit(BL_UART, "Jump to user", 15, HAL_MAX_DELAY);
 8000c0c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000c10:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4911      	ldr	r1, [pc, #68]	; (8000c60 <xmodem_receive+0x160>)
 8000c1c:	6800      	ldr	r0, [r0, #0]
 8000c1e:	f001 fa16 	bl	800204e <HAL_UART_Transmit>
#endif
		 if(bootloader_jump_to_user_code(BL_UART) == BL_ERROR){
 8000c22:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000c26:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f7ff fcaa 	bl	8000584 <bootloader_jump_to_user_code>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10b      	bne.n	8000c4e <xmodem_receive+0x14e>
			 HAL_UART_Transmit(BL_UART, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8000c36:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000c3a:	f2a3 4034 	subw	r0, r3, #1076	; 0x434
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c42:	2205      	movs	r2, #5
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <xmodem_receive+0x164>)
 8000c46:	6800      	ldr	r0, [r0, #0]
 8000c48:	f001 fa01 	bl	800204e <HAL_UART_Transmit>
			 while(1);
 8000c4c:	e7fe      	b.n	8000c4c <xmodem_receive+0x14c>
		 }

	 }

}
 8000c4e:	bf00      	nop
 8000c50:	4618      	mov	r0, r3
 8000c52:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	08003204 	.word	0x08003204
 8000c60:	08003210 	.word	0x08003210
 8000c64:	08003220 	.word	0x08003220

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ff23 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f001 fdf7 	bl	8002888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fcdf 	bl	800065c <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8000ca8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000cac:	08003284 	.word	0x08003284
  ldr r2, =_sbss
 8000cb0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000cb4:	20000354 	.word	0x20000354

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f90d 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe04 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f917 	bl	8000f52 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 f8ed 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000184 	.word	0x20000184
 8000d58:	2000018c 	.word	0x2000018c
 8000d5c:	20000188 	.word	0x20000188

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000018c 	.word	0x2000018c
 8000d84:	20000320 	.word	0x20000320

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000320 	.word	0x20000320

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff47 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5c 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb0 	bl	8000ec0 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_FLASH_Program+0x1e>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e03b      	b.n	8001002 <HAL_FLASH_Program+0x96>
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f94:	f000 f870 	bl	8001078 <FLASH_WaitForLastOperation>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d12b      	bne.n	8000ffa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000fa8:	783b      	ldrb	r3, [r7, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f000 f91b 	bl	80011e8 <FLASH_Program_Byte>
 8000fb2:	e016      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d105      	bne.n	8000fc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68b8      	ldr	r0, [r7, #8]
 8000fc0:	f000 f8ee 	bl	80011a0 <FLASH_Program_HalfWord>
 8000fc4:	e00d      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d105      	bne.n	8000fd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	f000 f8c3 	bl	800115c <FLASH_Program_Word>
 8000fd6:	e004      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f000 f88b 	bl	80010f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe6:	f000 f847 	bl	8001078 <FLASH_WaitForLastOperation>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_FLASH_Program+0xa4>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_FLASH_Program+0xa4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000324 	.word	0x20000324
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	da0b      	bge.n	800103e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_FLASH_Unlock+0x3c>)
 800102a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_FLASH_Unlock+0x38>)
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_FLASH_Unlock+0x40>)
 8001030:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da01      	bge.n	800103e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023c00 	.word	0x40023c00
 8001050:	45670123 	.word	0x45670123
 8001054:	cdef89ab 	.word	0xcdef89ab

08001058 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 8001062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001066:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40023c00 	.word	0x40023c00

08001078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <FLASH_WaitForLastOperation+0x78>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800108a:	f7ff fe7d 	bl	8000d88 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001090:	e010      	b.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d00c      	beq.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <FLASH_WaitForLastOperation+0x38>
 80010a0:	f7ff fe72 	bl	8000d88 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d201      	bcs.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e019      	b.n	80010e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e8      	bne.n	8001092 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010de:	f000 f8a5 	bl	800122c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
  
}  
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000324 	.word	0x20000324
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 800110a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800110e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001116:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800111a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800112e:	f3bf 8f6f 	isb	sy
}
 8001132:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	000a      	movs	r2, r1
 8001142:	2300      	movs	r3, #0
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	3104      	adds	r1, #4
 8001148:	4613      	mov	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023c00 	.word	0x40023c00

0800115c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <FLASH_Program_Word+0x40>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <FLASH_Program_Word+0x40>)
 800116c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001170:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <FLASH_Program_Word+0x40>)
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <FLASH_Program_Word+0x40>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <FLASH_Program_Word+0x40>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <FLASH_Program_Word+0x40>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023c00 	.word	0x40023c00

080011a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	801a      	strh	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <FLASH_Program_Byte+0x40>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <FLASH_Program_Byte+0x40>)
 80011fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <FLASH_Program_Byte+0x40>)
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <FLASH_Program_Byte+0x40>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <FLASH_Program_Byte+0x40>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <FLASH_Program_Byte+0x40>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	78fa      	ldrb	r2, [r7, #3]
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 8001246:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 800124a:	2210      	movs	r2, #16
 800124c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 8001264:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 8001268:	2220      	movs	r2, #32
 800126a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 8001282:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 80012a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <FLASH_SetErrorCode+0xa8>)
 80012be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <FLASH_SetErrorCode+0xa4>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	60da      	str	r2, [r3, #12]
  }
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023c00 	.word	0x40023c00
 80012d4:	20000324 	.word	0x20000324

080012d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e010      	b.n	8001316 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d103      	bne.n	8001302 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e009      	b.n	8001316 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d103      	bne.n	8001310 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e002      	b.n	8001316 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001314:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 800131c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	490f      	ldr	r1, [pc, #60]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001334:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001338:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4313      	orrs	r3, r2
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <FLASH_Erase_Sector+0x8c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6113      	str	r3, [r2, #16]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e16b      	b.n	800165c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 815a 	bne.w	8001656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80b4 	beq.w	8001656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x310>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x324>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x328>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x330>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20a>
 800156e:	2307      	movs	r3, #7
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001572:	2308      	movs	r3, #8
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x310>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_GPIO_Init+0x334>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_GPIO_Init+0x334>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_GPIO_Init+0x334>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_GPIO_Init+0x334>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_GPIO_Init+0x334>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_GPIO_Init+0x334>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_GPIO_Init+0x334>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_GPIO_Init+0x334>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae90 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fae4 	bl	8000d88 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fae0 	bl	8000d88 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fad0 	bl	8000d88 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff facc 	bl	8000d88 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa85 	bl	8000d88 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fa81 	bl	8000d88 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa64 	bl	8000d88 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fa60 	bl	8000d88 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fa44 	bl	8000d88 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fa40 	bl	8000d88 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fa2d 	bl	8000d88 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fa29 	bl	8000d88 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff f9e9 	bl	8000d88 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff f9e5 	bl	8000d88 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f9aa 	bl	8000d88 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f9a6 	bl	8000d88 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f994 	bl	8000d88 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f990 	bl	8000d88 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff f964 	bl	8000d88 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f960 	bl	8000d88 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f939 	bl	8000d88 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f935 	bl	8000d88 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f922 	bl	8000d88 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f91e 	bl	8000d88 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f850 	bl	8000d88 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f84c 	bl	8000d88 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ffb0 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08003228 	.word	0x08003228
 8001db8:	20000184 	.word	0x20000184
 8001dbc:	20000188 	.word	0x20000188

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b090      	sub	sp, #64	; 0x40
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80a1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e09b      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001df8:	e09b      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dfe:	e098      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	627a      	str	r2, [r7, #36]	; 0x24
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e2c:	fb03 f201 	mul.w	r2, r3, r1
 8001e30:	2300      	movs	r3, #0
 8001e32:	fb00 f303 	mul.w	r3, r0, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e40:	460a      	mov	r2, r1
 8001e42:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e46:	4413      	add	r3, r2
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	61fa      	str	r2, [r7, #28]
 8001e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e5a:	f7fe fa11 	bl	8000280 <__aeabi_uldivmod>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4613      	mov	r3, r2
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e66:	e053      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	2200      	movs	r2, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	617a      	str	r2, [r7, #20]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e7a:	f04f 0b00 	mov.w	fp, #0
 8001e7e:	4652      	mov	r2, sl
 8001e80:	465b      	mov	r3, fp
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	0159      	lsls	r1, r3, #5
 8001e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e90:	0150      	lsls	r0, r2, #5
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	ebb2 080a 	subs.w	r8, r2, sl
 8001e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8001eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	00eb      	lsls	r3, r5, #3
 8001ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec8:	00e2      	lsls	r2, r4, #3
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	eb14 030a 	adds.w	r3, r4, sl
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	eb45 030b 	adc.w	r3, r5, fp
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	2200      	movs	r2, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f04:	f7fe f9bc 	bl	8000280 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3740      	adds	r7, #64	; 0x40
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	017d7840 	.word	0x017d7840

08001f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000184 	.word	0x20000184

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08003238 	.word	0x08003238

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f90:	f7ff ffdc 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0b5b      	lsrs	r3, r3, #13
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08003238 	.word	0x08003238

08001fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e03f      	b.n	8002046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fcb6 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f9cb 	bl	8002394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b08a      	sub	sp, #40	; 0x28
 8002052:	af02      	add	r7, sp, #8
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	d17c      	bne.n	8002168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_UART_Transmit+0x2c>
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e075      	b.n	800216a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_UART_Transmit+0x3e>
 8002088:	2302      	movs	r3, #2
 800208a:	e06e      	b.n	800216a <HAL_UART_Transmit+0x11c>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2221      	movs	r2, #33	; 0x21
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fe71 	bl	8000d88 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	88fa      	ldrh	r2, [r7, #6]
 80020ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020bc:	d108      	bne.n	80020d0 <HAL_UART_Transmit+0x82>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d104      	bne.n	80020d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	e003      	b.n	80020d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020e0:	e02a      	b.n	8002138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f8e2 	bl	80022b6 <UART_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e036      	b.n	800216a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	3302      	adds	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	e007      	b.n	800212a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3301      	adds	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1cf      	bne.n	80020e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f8b2 	bl	80022b6 <UART_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e006      	b.n	800216a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e000      	b.n	800216a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b08a      	sub	sp, #40	; 0x28
 8002176:	af02      	add	r7, sp, #8
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	f040 808c 	bne.w	80022ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_UART_Receive+0x2e>
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e084      	b.n	80022ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_UART_Receive+0x40>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e07d      	b.n	80022ae <HAL_UART_Receive+0x13c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2222      	movs	r2, #34	; 0x22
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fddb 	bl	8000d88 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d108      	bne.n	80021fc <HAL_UART_Receive+0x8a>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e003      	b.n	8002204 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800220c:	e043      	b.n	8002296 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	2120      	movs	r1, #32
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f84c 	bl	80022b6 <UART_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e042      	b.n	80022ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223a:	b29a      	uxth	r2, r3
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	3302      	adds	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e01f      	b.n	8002288 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d007      	beq.n	8002262 <HAL_UART_Receive+0xf0>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_UART_Receive+0xfe>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e008      	b.n	8002282 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800227c:	b2da      	uxtb	r2, r3
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1b6      	bne.n	800220e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b090      	sub	sp, #64	; 0x40
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c6:	e050      	b.n	800236a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ce:	d04c      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022d6:	f7fe fd57 	bl	8000d88 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d241      	bcs.n	800236a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	330c      	adds	r3, #12
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	e853 3f00 	ldrex	r3, [r3]
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002306:	637a      	str	r2, [r7, #52]	; 0x34
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800230c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800230e:	e841 2300 	strex	r3, r2, [r1]
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1e5      	bne.n	80022e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3314      	adds	r3, #20
 8002320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	613b      	str	r3, [r7, #16]
   return(result);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3314      	adds	r3, #20
 8002338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800233a:	623a      	str	r2, [r7, #32]
 800233c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233e:	69f9      	ldr	r1, [r7, #28]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	e841 2300 	strex	r3, r2, [r1]
 8002346:	61bb      	str	r3, [r7, #24]
   return(result);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e5      	bne.n	800231a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e00f      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4013      	ands	r3, r2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	429a      	cmp	r2, r3
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	429a      	cmp	r2, r3
 8002386:	d09f      	beq.n	80022c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3740      	adds	r7, #64	; 0x40
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b0c0      	sub	sp, #256	; 0x100
 800239a:	af00      	add	r7, sp, #0
 800239c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	ea40 0301 	orr.w	r3, r0, r1
 80023bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023ec:	f021 010c 	bic.w	r1, r1, #12
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023fa:	430b      	orrs	r3, r1
 80023fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800240a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240e:	6999      	ldr	r1, [r3, #24]
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	ea40 0301 	orr.w	r3, r0, r1
 800241a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <UART_SetConfig+0x2cc>)
 8002424:	429a      	cmp	r2, r3
 8002426:	d005      	beq.n	8002434 <UART_SetConfig+0xa0>
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b8d      	ldr	r3, [pc, #564]	; (8002664 <UART_SetConfig+0x2d0>)
 8002430:	429a      	cmp	r2, r3
 8002432:	d104      	bne.n	800243e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002434:	f7ff fdaa 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8002438:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800243c:	e003      	b.n	8002446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800243e:	f7ff fd91 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 8002442:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002450:	f040 810c 	bne.w	800266c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002458:	2200      	movs	r2, #0
 800245a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800245e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	1891      	adds	r1, r2, r2
 800246c:	65b9      	str	r1, [r7, #88]	; 0x58
 800246e:	415b      	adcs	r3, r3
 8002470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002476:	4621      	mov	r1, r4
 8002478:	eb12 0801 	adds.w	r8, r2, r1
 800247c:	4629      	mov	r1, r5
 800247e:	eb43 0901 	adc.w	r9, r3, r1
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800248e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002496:	4690      	mov	r8, r2
 8002498:	4699      	mov	r9, r3
 800249a:	4623      	mov	r3, r4
 800249c:	eb18 0303 	adds.w	r3, r8, r3
 80024a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024a4:	462b      	mov	r3, r5
 80024a6:	eb49 0303 	adc.w	r3, r9, r3
 80024aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024c2:	460b      	mov	r3, r1
 80024c4:	18db      	adds	r3, r3, r3
 80024c6:	653b      	str	r3, [r7, #80]	; 0x50
 80024c8:	4613      	mov	r3, r2
 80024ca:	eb42 0303 	adc.w	r3, r2, r3
 80024ce:	657b      	str	r3, [r7, #84]	; 0x54
 80024d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024d8:	f7fd fed2 	bl	8000280 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <UART_SetConfig+0x2d4>)
 80024e2:	fba3 2302 	umull	r2, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	011c      	lsls	r4, r3, #4
 80024ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ee:	2200      	movs	r2, #0
 80024f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	1891      	adds	r1, r2, r2
 8002502:	64b9      	str	r1, [r7, #72]	; 0x48
 8002504:	415b      	adcs	r3, r3
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800250c:	4641      	mov	r1, r8
 800250e:	eb12 0a01 	adds.w	sl, r2, r1
 8002512:	4649      	mov	r1, r9
 8002514:	eb43 0b01 	adc.w	fp, r3, r1
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800252c:	4692      	mov	sl, r2
 800252e:	469b      	mov	fp, r3
 8002530:	4643      	mov	r3, r8
 8002532:	eb1a 0303 	adds.w	r3, sl, r3
 8002536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800253a:	464b      	mov	r3, r9
 800253c:	eb4b 0303 	adc.w	r3, fp, r3
 8002540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002550:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002558:	460b      	mov	r3, r1
 800255a:	18db      	adds	r3, r3, r3
 800255c:	643b      	str	r3, [r7, #64]	; 0x40
 800255e:	4613      	mov	r3, r2
 8002560:	eb42 0303 	adc.w	r3, r2, r3
 8002564:	647b      	str	r3, [r7, #68]	; 0x44
 8002566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800256a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800256e:	f7fd fe87 	bl	8000280 <__aeabi_uldivmod>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4611      	mov	r1, r2
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <UART_SetConfig+0x2d4>)
 800257a:	fba3 2301 	umull	r2, r3, r3, r1
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2264      	movs	r2, #100	; 0x64
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	1acb      	subs	r3, r1, r3
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <UART_SetConfig+0x2d4>)
 8002590:	fba3 2302 	umull	r2, r3, r3, r2
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800259c:	441c      	add	r4, r3
 800259e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025b0:	4642      	mov	r2, r8
 80025b2:	464b      	mov	r3, r9
 80025b4:	1891      	adds	r1, r2, r2
 80025b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025b8:	415b      	adcs	r3, r3
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025c0:	4641      	mov	r1, r8
 80025c2:	1851      	adds	r1, r2, r1
 80025c4:	6339      	str	r1, [r7, #48]	; 0x30
 80025c6:	4649      	mov	r1, r9
 80025c8:	414b      	adcs	r3, r1
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025d8:	4659      	mov	r1, fp
 80025da:	00cb      	lsls	r3, r1, #3
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e2:	4651      	mov	r1, sl
 80025e4:	00ca      	lsls	r2, r1, #3
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	4642      	mov	r2, r8
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025f4:	464b      	mov	r3, r9
 80025f6:	460a      	mov	r2, r1
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800260c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002614:	460b      	mov	r3, r1
 8002616:	18db      	adds	r3, r3, r3
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
 800261a:	4613      	mov	r3, r2
 800261c:	eb42 0303 	adc.w	r3, r2, r3
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800262a:	f7fd fe29 	bl	8000280 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <UART_SetConfig+0x2d4>)
 8002634:	fba3 1302 	umull	r1, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2164      	movs	r1, #100	; 0x64
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <UART_SetConfig+0x2d4>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	f003 0207 	and.w	r2, r3, #7
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4422      	add	r2, r4
 800265a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800265c:	e105      	b.n	800286a <UART_SetConfig+0x4d6>
 800265e:	bf00      	nop
 8002660:	40011000 	.word	0x40011000
 8002664:	40011400 	.word	0x40011400
 8002668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800267a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800267e:	4642      	mov	r2, r8
 8002680:	464b      	mov	r3, r9
 8002682:	1891      	adds	r1, r2, r2
 8002684:	6239      	str	r1, [r7, #32]
 8002686:	415b      	adcs	r3, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800268e:	4641      	mov	r1, r8
 8002690:	1854      	adds	r4, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0501 	adc.w	r5, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	00eb      	lsls	r3, r5, #3
 80026a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a6:	00e2      	lsls	r2, r4, #3
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	4643      	mov	r3, r8
 80026ae:	18e3      	adds	r3, r4, r3
 80026b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026b4:	464b      	mov	r3, r9
 80026b6:	eb45 0303 	adc.w	r3, r5, r3
 80026ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026da:	4629      	mov	r1, r5
 80026dc:	008b      	lsls	r3, r1, #2
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e4:	4621      	mov	r1, r4
 80026e6:	008a      	lsls	r2, r1, #2
 80026e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026ec:	f7fd fdc8 	bl	8000280 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <UART_SetConfig+0x4e4>)
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	011c      	lsls	r4, r3, #4
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800270c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	1891      	adds	r1, r2, r2
 8002716:	61b9      	str	r1, [r7, #24]
 8002718:	415b      	adcs	r3, r3
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	4641      	mov	r1, r8
 8002722:	1851      	adds	r1, r2, r1
 8002724:	6139      	str	r1, [r7, #16]
 8002726:	4649      	mov	r1, r9
 8002728:	414b      	adcs	r3, r1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002738:	4659      	mov	r1, fp
 800273a:	00cb      	lsls	r3, r1, #3
 800273c:	4651      	mov	r1, sl
 800273e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002742:	4651      	mov	r1, sl
 8002744:	00ca      	lsls	r2, r1, #3
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	4603      	mov	r3, r0
 800274c:	4642      	mov	r2, r8
 800274e:	189b      	adds	r3, r3, r2
 8002750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002754:	464b      	mov	r3, r9
 8002756:	460a      	mov	r2, r1
 8002758:	eb42 0303 	adc.w	r3, r2, r3
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	67bb      	str	r3, [r7, #120]	; 0x78
 800276a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002778:	4649      	mov	r1, r9
 800277a:	008b      	lsls	r3, r1, #2
 800277c:	4641      	mov	r1, r8
 800277e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002782:	4641      	mov	r1, r8
 8002784:	008a      	lsls	r2, r1, #2
 8002786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800278a:	f7fd fd79 	bl	8000280 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <UART_SetConfig+0x4e4>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <UART_SetConfig+0x4e4>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b2:	441c      	add	r4, r3
 80027b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b8:	2200      	movs	r2, #0
 80027ba:	673b      	str	r3, [r7, #112]	; 0x70
 80027bc:	677a      	str	r2, [r7, #116]	; 0x74
 80027be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027c2:	4642      	mov	r2, r8
 80027c4:	464b      	mov	r3, r9
 80027c6:	1891      	adds	r1, r2, r2
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	415b      	adcs	r3, r3
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d2:	4641      	mov	r1, r8
 80027d4:	1851      	adds	r1, r2, r1
 80027d6:	6039      	str	r1, [r7, #0]
 80027d8:	4649      	mov	r1, r9
 80027da:	414b      	adcs	r3, r1
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027ea:	4659      	mov	r1, fp
 80027ec:	00cb      	lsls	r3, r1, #3
 80027ee:	4651      	mov	r1, sl
 80027f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f4:	4651      	mov	r1, sl
 80027f6:	00ca      	lsls	r2, r1, #3
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	4642      	mov	r2, r8
 8002800:	189b      	adds	r3, r3, r2
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
 8002804:	464b      	mov	r3, r9
 8002806:	460a      	mov	r2, r1
 8002808:	eb42 0303 	adc.w	r3, r2, r3
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	663b      	str	r3, [r7, #96]	; 0x60
 8002818:	667a      	str	r2, [r7, #100]	; 0x64
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002826:	4649      	mov	r1, r9
 8002828:	008b      	lsls	r3, r1, #2
 800282a:	4641      	mov	r1, r8
 800282c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002830:	4641      	mov	r1, r8
 8002832:	008a      	lsls	r2, r1, #2
 8002834:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002838:	f7fd fd22 	bl	8000280 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <UART_SetConfig+0x4e4>)
 8002842:	fba3 1302 	umull	r1, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <UART_SetConfig+0x4e4>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4422      	add	r2, r4
 8002868:	609a      	str	r2, [r3, #8]
}
 800286a:	bf00      	nop
 800286c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	51eb851f 	.word	0x51eb851f

0800287c <__errno>:
 800287c:	4b01      	ldr	r3, [pc, #4]	; (8002884 <__errno+0x8>)
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000190 	.word	0x20000190

08002888 <__libc_init_array>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	4d0d      	ldr	r5, [pc, #52]	; (80028c0 <__libc_init_array+0x38>)
 800288c:	4c0d      	ldr	r4, [pc, #52]	; (80028c4 <__libc_init_array+0x3c>)
 800288e:	1b64      	subs	r4, r4, r5
 8002890:	10a4      	asrs	r4, r4, #2
 8002892:	2600      	movs	r6, #0
 8002894:	42a6      	cmp	r6, r4
 8002896:	d109      	bne.n	80028ac <__libc_init_array+0x24>
 8002898:	4d0b      	ldr	r5, [pc, #44]	; (80028c8 <__libc_init_array+0x40>)
 800289a:	4c0c      	ldr	r4, [pc, #48]	; (80028cc <__libc_init_array+0x44>)
 800289c:	f000 fc8e 	bl	80031bc <_init>
 80028a0:	1b64      	subs	r4, r4, r5
 80028a2:	10a4      	asrs	r4, r4, #2
 80028a4:	2600      	movs	r6, #0
 80028a6:	42a6      	cmp	r6, r4
 80028a8:	d105      	bne.n	80028b6 <__libc_init_array+0x2e>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b0:	4798      	blx	r3
 80028b2:	3601      	adds	r6, #1
 80028b4:	e7ee      	b.n	8002894 <__libc_init_array+0xc>
 80028b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ba:	4798      	blx	r3
 80028bc:	3601      	adds	r6, #1
 80028be:	e7f2      	b.n	80028a6 <__libc_init_array+0x1e>
 80028c0:	0800327c 	.word	0x0800327c
 80028c4:	0800327c 	.word	0x0800327c
 80028c8:	0800327c 	.word	0x0800327c
 80028cc:	08003280 	.word	0x08003280

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <siprintf>:
 80028e0:	b40e      	push	{r1, r2, r3}
 80028e2:	b500      	push	{lr}
 80028e4:	b09c      	sub	sp, #112	; 0x70
 80028e6:	ab1d      	add	r3, sp, #116	; 0x74
 80028e8:	9002      	str	r0, [sp, #8]
 80028ea:	9006      	str	r0, [sp, #24]
 80028ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <siprintf+0x38>)
 80028f2:	9107      	str	r1, [sp, #28]
 80028f4:	9104      	str	r1, [sp, #16]
 80028f6:	4909      	ldr	r1, [pc, #36]	; (800291c <siprintf+0x3c>)
 80028f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80028fc:	9105      	str	r1, [sp, #20]
 80028fe:	6800      	ldr	r0, [r0, #0]
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	a902      	add	r1, sp, #8
 8002904:	f000 f868 	bl	80029d8 <_svfiprintf_r>
 8002908:	9b02      	ldr	r3, [sp, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	b01c      	add	sp, #112	; 0x70
 8002910:	f85d eb04 	ldr.w	lr, [sp], #4
 8002914:	b003      	add	sp, #12
 8002916:	4770      	bx	lr
 8002918:	20000190 	.word	0x20000190
 800291c:	ffff0208 	.word	0xffff0208

08002920 <__ssputs_r>:
 8002920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002924:	688e      	ldr	r6, [r1, #8]
 8002926:	429e      	cmp	r6, r3
 8002928:	4682      	mov	sl, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4690      	mov	r8, r2
 800292e:	461f      	mov	r7, r3
 8002930:	d838      	bhi.n	80029a4 <__ssputs_r+0x84>
 8002932:	898a      	ldrh	r2, [r1, #12]
 8002934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002938:	d032      	beq.n	80029a0 <__ssputs_r+0x80>
 800293a:	6825      	ldr	r5, [r4, #0]
 800293c:	6909      	ldr	r1, [r1, #16]
 800293e:	eba5 0901 	sub.w	r9, r5, r1
 8002942:	6965      	ldr	r5, [r4, #20]
 8002944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800294c:	3301      	adds	r3, #1
 800294e:	444b      	add	r3, r9
 8002950:	106d      	asrs	r5, r5, #1
 8002952:	429d      	cmp	r5, r3
 8002954:	bf38      	it	cc
 8002956:	461d      	movcc	r5, r3
 8002958:	0553      	lsls	r3, r2, #21
 800295a:	d531      	bpl.n	80029c0 <__ssputs_r+0xa0>
 800295c:	4629      	mov	r1, r5
 800295e:	f000 fb63 	bl	8003028 <_malloc_r>
 8002962:	4606      	mov	r6, r0
 8002964:	b950      	cbnz	r0, 800297c <__ssputs_r+0x5c>
 8002966:	230c      	movs	r3, #12
 8002968:	f8ca 3000 	str.w	r3, [sl]
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800297c:	6921      	ldr	r1, [r4, #16]
 800297e:	464a      	mov	r2, r9
 8002980:	f000 fabe 	bl	8002f00 <memcpy>
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	6126      	str	r6, [r4, #16]
 8002992:	6165      	str	r5, [r4, #20]
 8002994:	444e      	add	r6, r9
 8002996:	eba5 0509 	sub.w	r5, r5, r9
 800299a:	6026      	str	r6, [r4, #0]
 800299c:	60a5      	str	r5, [r4, #8]
 800299e:	463e      	mov	r6, r7
 80029a0:	42be      	cmp	r6, r7
 80029a2:	d900      	bls.n	80029a6 <__ssputs_r+0x86>
 80029a4:	463e      	mov	r6, r7
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	4632      	mov	r2, r6
 80029aa:	4641      	mov	r1, r8
 80029ac:	f000 fab6 	bl	8002f1c <memmove>
 80029b0:	68a3      	ldr	r3, [r4, #8]
 80029b2:	1b9b      	subs	r3, r3, r6
 80029b4:	60a3      	str	r3, [r4, #8]
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	4433      	add	r3, r6
 80029ba:	6023      	str	r3, [r4, #0]
 80029bc:	2000      	movs	r0, #0
 80029be:	e7db      	b.n	8002978 <__ssputs_r+0x58>
 80029c0:	462a      	mov	r2, r5
 80029c2:	f000 fba5 	bl	8003110 <_realloc_r>
 80029c6:	4606      	mov	r6, r0
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d1e1      	bne.n	8002990 <__ssputs_r+0x70>
 80029cc:	6921      	ldr	r1, [r4, #16]
 80029ce:	4650      	mov	r0, sl
 80029d0:	f000 fabe 	bl	8002f50 <_free_r>
 80029d4:	e7c7      	b.n	8002966 <__ssputs_r+0x46>
	...

080029d8 <_svfiprintf_r>:
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	4698      	mov	r8, r3
 80029de:	898b      	ldrh	r3, [r1, #12]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	b09d      	sub	sp, #116	; 0x74
 80029e4:	4607      	mov	r7, r0
 80029e6:	460d      	mov	r5, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	d50e      	bpl.n	8002a0a <_svfiprintf_r+0x32>
 80029ec:	690b      	ldr	r3, [r1, #16]
 80029ee:	b963      	cbnz	r3, 8002a0a <_svfiprintf_r+0x32>
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	f000 fb19 	bl	8003028 <_malloc_r>
 80029f6:	6028      	str	r0, [r5, #0]
 80029f8:	6128      	str	r0, [r5, #16]
 80029fa:	b920      	cbnz	r0, 8002a06 <_svfiprintf_r+0x2e>
 80029fc:	230c      	movs	r3, #12
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a04:	e0d1      	b.n	8002baa <_svfiprintf_r+0x1d2>
 8002a06:	2340      	movs	r3, #64	; 0x40
 8002a08:	616b      	str	r3, [r5, #20]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0e:	2320      	movs	r3, #32
 8002a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a18:	2330      	movs	r3, #48	; 0x30
 8002a1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002bc4 <_svfiprintf_r+0x1ec>
 8002a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a22:	f04f 0901 	mov.w	r9, #1
 8002a26:	4623      	mov	r3, r4
 8002a28:	469a      	mov	sl, r3
 8002a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a2e:	b10a      	cbz	r2, 8002a34 <_svfiprintf_r+0x5c>
 8002a30:	2a25      	cmp	r2, #37	; 0x25
 8002a32:	d1f9      	bne.n	8002a28 <_svfiprintf_r+0x50>
 8002a34:	ebba 0b04 	subs.w	fp, sl, r4
 8002a38:	d00b      	beq.n	8002a52 <_svfiprintf_r+0x7a>
 8002a3a:	465b      	mov	r3, fp
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4638      	mov	r0, r7
 8002a42:	f7ff ff6d 	bl	8002920 <__ssputs_r>
 8002a46:	3001      	adds	r0, #1
 8002a48:	f000 80aa 	beq.w	8002ba0 <_svfiprintf_r+0x1c8>
 8002a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a4e:	445a      	add	r2, fp
 8002a50:	9209      	str	r2, [sp, #36]	; 0x24
 8002a52:	f89a 3000 	ldrb.w	r3, [sl]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80a2 	beq.w	8002ba0 <_svfiprintf_r+0x1c8>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a66:	f10a 0a01 	add.w	sl, sl, #1
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	9307      	str	r3, [sp, #28]
 8002a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a72:	931a      	str	r3, [sp, #104]	; 0x68
 8002a74:	4654      	mov	r4, sl
 8002a76:	2205      	movs	r2, #5
 8002a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a7c:	4851      	ldr	r0, [pc, #324]	; (8002bc4 <_svfiprintf_r+0x1ec>)
 8002a7e:	f7fd fbaf 	bl	80001e0 <memchr>
 8002a82:	9a04      	ldr	r2, [sp, #16]
 8002a84:	b9d8      	cbnz	r0, 8002abe <_svfiprintf_r+0xe6>
 8002a86:	06d0      	lsls	r0, r2, #27
 8002a88:	bf44      	itt	mi
 8002a8a:	2320      	movmi	r3, #32
 8002a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a90:	0711      	lsls	r1, r2, #28
 8002a92:	bf44      	itt	mi
 8002a94:	232b      	movmi	r3, #43	; 0x2b
 8002a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002aa0:	d015      	beq.n	8002ace <_svfiprintf_r+0xf6>
 8002aa2:	9a07      	ldr	r2, [sp, #28]
 8002aa4:	4654      	mov	r4, sl
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f04f 0c0a 	mov.w	ip, #10
 8002aac:	4621      	mov	r1, r4
 8002aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ab2:	3b30      	subs	r3, #48	; 0x30
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d94e      	bls.n	8002b56 <_svfiprintf_r+0x17e>
 8002ab8:	b1b0      	cbz	r0, 8002ae8 <_svfiprintf_r+0x110>
 8002aba:	9207      	str	r2, [sp, #28]
 8002abc:	e014      	b.n	8002ae8 <_svfiprintf_r+0x110>
 8002abe:	eba0 0308 	sub.w	r3, r0, r8
 8002ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	9304      	str	r3, [sp, #16]
 8002aca:	46a2      	mov	sl, r4
 8002acc:	e7d2      	b.n	8002a74 <_svfiprintf_r+0x9c>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	1d19      	adds	r1, r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	9103      	str	r1, [sp, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfbb      	ittet	lt
 8002ada:	425b      	neglt	r3, r3
 8002adc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ae0:	9307      	strge	r3, [sp, #28]
 8002ae2:	9307      	strlt	r3, [sp, #28]
 8002ae4:	bfb8      	it	lt
 8002ae6:	9204      	strlt	r2, [sp, #16]
 8002ae8:	7823      	ldrb	r3, [r4, #0]
 8002aea:	2b2e      	cmp	r3, #46	; 0x2e
 8002aec:	d10c      	bne.n	8002b08 <_svfiprintf_r+0x130>
 8002aee:	7863      	ldrb	r3, [r4, #1]
 8002af0:	2b2a      	cmp	r3, #42	; 0x2a
 8002af2:	d135      	bne.n	8002b60 <_svfiprintf_r+0x188>
 8002af4:	9b03      	ldr	r3, [sp, #12]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bfb8      	it	lt
 8002b00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b04:	3402      	adds	r4, #2
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002bd4 <_svfiprintf_r+0x1fc>
 8002b0c:	7821      	ldrb	r1, [r4, #0]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4650      	mov	r0, sl
 8002b12:	f7fd fb65 	bl	80001e0 <memchr>
 8002b16:	b140      	cbz	r0, 8002b2a <_svfiprintf_r+0x152>
 8002b18:	2340      	movs	r3, #64	; 0x40
 8002b1a:	eba0 000a 	sub.w	r0, r0, sl
 8002b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b22:	9b04      	ldr	r3, [sp, #16]
 8002b24:	4303      	orrs	r3, r0
 8002b26:	3401      	adds	r4, #1
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2e:	4826      	ldr	r0, [pc, #152]	; (8002bc8 <_svfiprintf_r+0x1f0>)
 8002b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b34:	2206      	movs	r2, #6
 8002b36:	f7fd fb53 	bl	80001e0 <memchr>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d038      	beq.n	8002bb0 <_svfiprintf_r+0x1d8>
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <_svfiprintf_r+0x1f4>)
 8002b40:	bb1b      	cbnz	r3, 8002b8a <_svfiprintf_r+0x1b2>
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	3307      	adds	r3, #7
 8002b46:	f023 0307 	bic.w	r3, r3, #7
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	9303      	str	r3, [sp, #12]
 8002b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b50:	4433      	add	r3, r6
 8002b52:	9309      	str	r3, [sp, #36]	; 0x24
 8002b54:	e767      	b.n	8002a26 <_svfiprintf_r+0x4e>
 8002b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	e7a5      	b.n	8002aac <_svfiprintf_r+0xd4>
 8002b60:	2300      	movs	r3, #0
 8002b62:	3401      	adds	r4, #1
 8002b64:	9305      	str	r3, [sp, #20]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 0c0a 	mov.w	ip, #10
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b72:	3a30      	subs	r2, #48	; 0x30
 8002b74:	2a09      	cmp	r2, #9
 8002b76:	d903      	bls.n	8002b80 <_svfiprintf_r+0x1a8>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0c5      	beq.n	8002b08 <_svfiprintf_r+0x130>
 8002b7c:	9105      	str	r1, [sp, #20]
 8002b7e:	e7c3      	b.n	8002b08 <_svfiprintf_r+0x130>
 8002b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b84:	4604      	mov	r4, r0
 8002b86:	2301      	movs	r3, #1
 8002b88:	e7f0      	b.n	8002b6c <_svfiprintf_r+0x194>
 8002b8a:	ab03      	add	r3, sp, #12
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	462a      	mov	r2, r5
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <_svfiprintf_r+0x1f8>)
 8002b92:	a904      	add	r1, sp, #16
 8002b94:	4638      	mov	r0, r7
 8002b96:	f3af 8000 	nop.w
 8002b9a:	1c42      	adds	r2, r0, #1
 8002b9c:	4606      	mov	r6, r0
 8002b9e:	d1d6      	bne.n	8002b4e <_svfiprintf_r+0x176>
 8002ba0:	89ab      	ldrh	r3, [r5, #12]
 8002ba2:	065b      	lsls	r3, r3, #25
 8002ba4:	f53f af2c 	bmi.w	8002a00 <_svfiprintf_r+0x28>
 8002ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002baa:	b01d      	add	sp, #116	; 0x74
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb0:	ab03      	add	r3, sp, #12
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	462a      	mov	r2, r5
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <_svfiprintf_r+0x1f8>)
 8002bb8:	a904      	add	r1, sp, #16
 8002bba:	4638      	mov	r0, r7
 8002bbc:	f000 f87a 	bl	8002cb4 <_printf_i>
 8002bc0:	e7eb      	b.n	8002b9a <_svfiprintf_r+0x1c2>
 8002bc2:	bf00      	nop
 8002bc4:	08003240 	.word	0x08003240
 8002bc8:	0800324a 	.word	0x0800324a
 8002bcc:	00000000 	.word	0x00000000
 8002bd0:	08002921 	.word	0x08002921
 8002bd4:	08003246 	.word	0x08003246

08002bd8 <_printf_common>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	4616      	mov	r6, r2
 8002bde:	4699      	mov	r9, r3
 8002be0:	688a      	ldr	r2, [r1, #8]
 8002be2:	690b      	ldr	r3, [r1, #16]
 8002be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bfb8      	it	lt
 8002bec:	4613      	movlt	r3, r2
 8002bee:	6033      	str	r3, [r6, #0]
 8002bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bf4:	4607      	mov	r7, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	b10a      	cbz	r2, 8002bfe <_printf_common+0x26>
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	6033      	str	r3, [r6, #0]
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	0699      	lsls	r1, r3, #26
 8002c02:	bf42      	ittt	mi
 8002c04:	6833      	ldrmi	r3, [r6, #0]
 8002c06:	3302      	addmi	r3, #2
 8002c08:	6033      	strmi	r3, [r6, #0]
 8002c0a:	6825      	ldr	r5, [r4, #0]
 8002c0c:	f015 0506 	ands.w	r5, r5, #6
 8002c10:	d106      	bne.n	8002c20 <_printf_common+0x48>
 8002c12:	f104 0a19 	add.w	sl, r4, #25
 8002c16:	68e3      	ldr	r3, [r4, #12]
 8002c18:	6832      	ldr	r2, [r6, #0]
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	42ab      	cmp	r3, r5
 8002c1e:	dc26      	bgt.n	8002c6e <_printf_common+0x96>
 8002c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c24:	1e13      	subs	r3, r2, #0
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	bf18      	it	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	0692      	lsls	r2, r2, #26
 8002c2e:	d42b      	bmi.n	8002c88 <_printf_common+0xb0>
 8002c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c34:	4649      	mov	r1, r9
 8002c36:	4638      	mov	r0, r7
 8002c38:	47c0      	blx	r8
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d01e      	beq.n	8002c7c <_printf_common+0xa4>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	68e5      	ldr	r5, [r4, #12]
 8002c42:	6832      	ldr	r2, [r6, #0]
 8002c44:	f003 0306 	and.w	r3, r3, #6
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	bf08      	it	eq
 8002c4c:	1aad      	subeq	r5, r5, r2
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	6922      	ldr	r2, [r4, #16]
 8002c52:	bf0c      	ite	eq
 8002c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c58:	2500      	movne	r5, #0
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	bfc4      	itt	gt
 8002c5e:	1a9b      	subgt	r3, r3, r2
 8002c60:	18ed      	addgt	r5, r5, r3
 8002c62:	2600      	movs	r6, #0
 8002c64:	341a      	adds	r4, #26
 8002c66:	42b5      	cmp	r5, r6
 8002c68:	d11a      	bne.n	8002ca0 <_printf_common+0xc8>
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e008      	b.n	8002c80 <_printf_common+0xa8>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	4652      	mov	r2, sl
 8002c72:	4649      	mov	r1, r9
 8002c74:	4638      	mov	r0, r7
 8002c76:	47c0      	blx	r8
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d103      	bne.n	8002c84 <_printf_common+0xac>
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c84:	3501      	adds	r5, #1
 8002c86:	e7c6      	b.n	8002c16 <_printf_common+0x3e>
 8002c88:	18e1      	adds	r1, r4, r3
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	2030      	movs	r0, #48	; 0x30
 8002c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c92:	4422      	add	r2, r4
 8002c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	e7c7      	b.n	8002c30 <_printf_common+0x58>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	47c0      	blx	r8
 8002caa:	3001      	adds	r0, #1
 8002cac:	d0e6      	beq.n	8002c7c <_printf_common+0xa4>
 8002cae:	3601      	adds	r6, #1
 8002cb0:	e7d9      	b.n	8002c66 <_printf_common+0x8e>
	...

08002cb4 <_printf_i>:
 8002cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb8:	7e0f      	ldrb	r7, [r1, #24]
 8002cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cbc:	2f78      	cmp	r7, #120	; 0x78
 8002cbe:	4691      	mov	r9, r2
 8002cc0:	4680      	mov	r8, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	469a      	mov	sl, r3
 8002cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cca:	d807      	bhi.n	8002cdc <_printf_i+0x28>
 8002ccc:	2f62      	cmp	r7, #98	; 0x62
 8002cce:	d80a      	bhi.n	8002ce6 <_printf_i+0x32>
 8002cd0:	2f00      	cmp	r7, #0
 8002cd2:	f000 80d8 	beq.w	8002e86 <_printf_i+0x1d2>
 8002cd6:	2f58      	cmp	r7, #88	; 0x58
 8002cd8:	f000 80a3 	beq.w	8002e22 <_printf_i+0x16e>
 8002cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ce4:	e03a      	b.n	8002d5c <_printf_i+0xa8>
 8002ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cea:	2b15      	cmp	r3, #21
 8002cec:	d8f6      	bhi.n	8002cdc <_printf_i+0x28>
 8002cee:	a101      	add	r1, pc, #4	; (adr r1, 8002cf4 <_printf_i+0x40>)
 8002cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cf4:	08002d4d 	.word	0x08002d4d
 8002cf8:	08002d61 	.word	0x08002d61
 8002cfc:	08002cdd 	.word	0x08002cdd
 8002d00:	08002cdd 	.word	0x08002cdd
 8002d04:	08002cdd 	.word	0x08002cdd
 8002d08:	08002cdd 	.word	0x08002cdd
 8002d0c:	08002d61 	.word	0x08002d61
 8002d10:	08002cdd 	.word	0x08002cdd
 8002d14:	08002cdd 	.word	0x08002cdd
 8002d18:	08002cdd 	.word	0x08002cdd
 8002d1c:	08002cdd 	.word	0x08002cdd
 8002d20:	08002e6d 	.word	0x08002e6d
 8002d24:	08002d91 	.word	0x08002d91
 8002d28:	08002e4f 	.word	0x08002e4f
 8002d2c:	08002cdd 	.word	0x08002cdd
 8002d30:	08002cdd 	.word	0x08002cdd
 8002d34:	08002e8f 	.word	0x08002e8f
 8002d38:	08002cdd 	.word	0x08002cdd
 8002d3c:	08002d91 	.word	0x08002d91
 8002d40:	08002cdd 	.word	0x08002cdd
 8002d44:	08002cdd 	.word	0x08002cdd
 8002d48:	08002e57 	.word	0x08002e57
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	602a      	str	r2, [r5, #0]
 8002d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0a3      	b.n	8002ea8 <_printf_i+0x1f4>
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	6829      	ldr	r1, [r5, #0]
 8002d64:	0606      	lsls	r6, r0, #24
 8002d66:	f101 0304 	add.w	r3, r1, #4
 8002d6a:	d50a      	bpl.n	8002d82 <_printf_i+0xce>
 8002d6c:	680e      	ldr	r6, [r1, #0]
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	2e00      	cmp	r6, #0
 8002d72:	da03      	bge.n	8002d7c <_printf_i+0xc8>
 8002d74:	232d      	movs	r3, #45	; 0x2d
 8002d76:	4276      	negs	r6, r6
 8002d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d7c:	485e      	ldr	r0, [pc, #376]	; (8002ef8 <_printf_i+0x244>)
 8002d7e:	230a      	movs	r3, #10
 8002d80:	e019      	b.n	8002db6 <_printf_i+0x102>
 8002d82:	680e      	ldr	r6, [r1, #0]
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d8a:	bf18      	it	ne
 8002d8c:	b236      	sxthne	r6, r6
 8002d8e:	e7ef      	b.n	8002d70 <_printf_i+0xbc>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	1d19      	adds	r1, r3, #4
 8002d96:	6029      	str	r1, [r5, #0]
 8002d98:	0601      	lsls	r1, r0, #24
 8002d9a:	d501      	bpl.n	8002da0 <_printf_i+0xec>
 8002d9c:	681e      	ldr	r6, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <_printf_i+0xf2>
 8002da0:	0646      	lsls	r6, r0, #25
 8002da2:	d5fb      	bpl.n	8002d9c <_printf_i+0xe8>
 8002da4:	881e      	ldrh	r6, [r3, #0]
 8002da6:	4854      	ldr	r0, [pc, #336]	; (8002ef8 <_printf_i+0x244>)
 8002da8:	2f6f      	cmp	r7, #111	; 0x6f
 8002daa:	bf0c      	ite	eq
 8002dac:	2308      	moveq	r3, #8
 8002dae:	230a      	movne	r3, #10
 8002db0:	2100      	movs	r1, #0
 8002db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002db6:	6865      	ldr	r5, [r4, #4]
 8002db8:	60a5      	str	r5, [r4, #8]
 8002dba:	2d00      	cmp	r5, #0
 8002dbc:	bfa2      	ittt	ge
 8002dbe:	6821      	ldrge	r1, [r4, #0]
 8002dc0:	f021 0104 	bicge.w	r1, r1, #4
 8002dc4:	6021      	strge	r1, [r4, #0]
 8002dc6:	b90e      	cbnz	r6, 8002dcc <_printf_i+0x118>
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	d04d      	beq.n	8002e68 <_printf_i+0x1b4>
 8002dcc:	4615      	mov	r5, r2
 8002dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8002dd6:	5dc7      	ldrb	r7, [r0, r7]
 8002dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ddc:	4637      	mov	r7, r6
 8002dde:	42bb      	cmp	r3, r7
 8002de0:	460e      	mov	r6, r1
 8002de2:	d9f4      	bls.n	8002dce <_printf_i+0x11a>
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d10b      	bne.n	8002e00 <_printf_i+0x14c>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	07de      	lsls	r6, r3, #31
 8002dec:	d508      	bpl.n	8002e00 <_printf_i+0x14c>
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	6861      	ldr	r1, [r4, #4]
 8002df2:	4299      	cmp	r1, r3
 8002df4:	bfde      	ittt	le
 8002df6:	2330      	movle	r3, #48	; 0x30
 8002df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e00:	1b52      	subs	r2, r2, r5
 8002e02:	6122      	str	r2, [r4, #16]
 8002e04:	f8cd a000 	str.w	sl, [sp]
 8002e08:	464b      	mov	r3, r9
 8002e0a:	aa03      	add	r2, sp, #12
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f7ff fee2 	bl	8002bd8 <_printf_common>
 8002e14:	3001      	adds	r0, #1
 8002e16:	d14c      	bne.n	8002eb2 <_printf_i+0x1fe>
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	b004      	add	sp, #16
 8002e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e22:	4835      	ldr	r0, [pc, #212]	; (8002ef8 <_printf_i+0x244>)
 8002e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e28:	6829      	ldr	r1, [r5, #0]
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e30:	6029      	str	r1, [r5, #0]
 8002e32:	061d      	lsls	r5, r3, #24
 8002e34:	d514      	bpl.n	8002e60 <_printf_i+0x1ac>
 8002e36:	07df      	lsls	r7, r3, #31
 8002e38:	bf44      	itt	mi
 8002e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e3e:	6023      	strmi	r3, [r4, #0]
 8002e40:	b91e      	cbnz	r6, 8002e4a <_printf_i+0x196>
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	f023 0320 	bic.w	r3, r3, #32
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	e7b0      	b.n	8002db0 <_printf_i+0xfc>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	2378      	movs	r3, #120	; 0x78
 8002e58:	4828      	ldr	r0, [pc, #160]	; (8002efc <_printf_i+0x248>)
 8002e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e5e:	e7e3      	b.n	8002e28 <_printf_i+0x174>
 8002e60:	0659      	lsls	r1, r3, #25
 8002e62:	bf48      	it	mi
 8002e64:	b2b6      	uxthmi	r6, r6
 8002e66:	e7e6      	b.n	8002e36 <_printf_i+0x182>
 8002e68:	4615      	mov	r5, r2
 8002e6a:	e7bb      	b.n	8002de4 <_printf_i+0x130>
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	6826      	ldr	r6, [r4, #0]
 8002e70:	6961      	ldr	r1, [r4, #20]
 8002e72:	1d18      	adds	r0, r3, #4
 8002e74:	6028      	str	r0, [r5, #0]
 8002e76:	0635      	lsls	r5, r6, #24
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	d501      	bpl.n	8002e80 <_printf_i+0x1cc>
 8002e7c:	6019      	str	r1, [r3, #0]
 8002e7e:	e002      	b.n	8002e86 <_printf_i+0x1d2>
 8002e80:	0670      	lsls	r0, r6, #25
 8002e82:	d5fb      	bpl.n	8002e7c <_printf_i+0x1c8>
 8002e84:	8019      	strh	r1, [r3, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	4615      	mov	r5, r2
 8002e8c:	e7ba      	b.n	8002e04 <_printf_i+0x150>
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	1d1a      	adds	r2, r3, #4
 8002e92:	602a      	str	r2, [r5, #0]
 8002e94:	681d      	ldr	r5, [r3, #0]
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7fd f9a0 	bl	80001e0 <memchr>
 8002ea0:	b108      	cbz	r0, 8002ea6 <_printf_i+0x1f2>
 8002ea2:	1b40      	subs	r0, r0, r5
 8002ea4:	6060      	str	r0, [r4, #4]
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	6123      	str	r3, [r4, #16]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb0:	e7a8      	b.n	8002e04 <_printf_i+0x150>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	462a      	mov	r2, r5
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4640      	mov	r0, r8
 8002eba:	47d0      	blx	sl
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d0ab      	beq.n	8002e18 <_printf_i+0x164>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	079b      	lsls	r3, r3, #30
 8002ec4:	d413      	bmi.n	8002eee <_printf_i+0x23a>
 8002ec6:	68e0      	ldr	r0, [r4, #12]
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	bfb8      	it	lt
 8002ece:	4618      	movlt	r0, r3
 8002ed0:	e7a4      	b.n	8002e1c <_printf_i+0x168>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	4640      	mov	r0, r8
 8002eda:	47d0      	blx	sl
 8002edc:	3001      	adds	r0, #1
 8002ede:	d09b      	beq.n	8002e18 <_printf_i+0x164>
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	68e3      	ldr	r3, [r4, #12]
 8002ee4:	9903      	ldr	r1, [sp, #12]
 8002ee6:	1a5b      	subs	r3, r3, r1
 8002ee8:	42ab      	cmp	r3, r5
 8002eea:	dcf2      	bgt.n	8002ed2 <_printf_i+0x21e>
 8002eec:	e7eb      	b.n	8002ec6 <_printf_i+0x212>
 8002eee:	2500      	movs	r5, #0
 8002ef0:	f104 0619 	add.w	r6, r4, #25
 8002ef4:	e7f5      	b.n	8002ee2 <_printf_i+0x22e>
 8002ef6:	bf00      	nop
 8002ef8:	08003251 	.word	0x08003251
 8002efc:	08003262 	.word	0x08003262

08002f00 <memcpy>:
 8002f00:	440a      	add	r2, r1
 8002f02:	4291      	cmp	r1, r2
 8002f04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f08:	d100      	bne.n	8002f0c <memcpy+0xc>
 8002f0a:	4770      	bx	lr
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d1f9      	bne.n	8002f0e <memcpy+0xe>
 8002f1a:	bd10      	pop	{r4, pc}

08002f1c <memmove>:
 8002f1c:	4288      	cmp	r0, r1
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	eb01 0402 	add.w	r4, r1, r2
 8002f24:	d902      	bls.n	8002f2c <memmove+0x10>
 8002f26:	4284      	cmp	r4, r0
 8002f28:	4623      	mov	r3, r4
 8002f2a:	d807      	bhi.n	8002f3c <memmove+0x20>
 8002f2c:	1e43      	subs	r3, r0, #1
 8002f2e:	42a1      	cmp	r1, r4
 8002f30:	d008      	beq.n	8002f44 <memmove+0x28>
 8002f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f3a:	e7f8      	b.n	8002f2e <memmove+0x12>
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4601      	mov	r1, r0
 8002f40:	428a      	cmp	r2, r1
 8002f42:	d100      	bne.n	8002f46 <memmove+0x2a>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f4e:	e7f7      	b.n	8002f40 <memmove+0x24>

08002f50 <_free_r>:
 8002f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d044      	beq.n	8002fe0 <_free_r+0x90>
 8002f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f5a:	9001      	str	r0, [sp, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8002f62:	bfb8      	it	lt
 8002f64:	18e4      	addlt	r4, r4, r3
 8002f66:	f000 f913 	bl	8003190 <__malloc_lock>
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <_free_r+0x94>)
 8002f6c:	9801      	ldr	r0, [sp, #4]
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	b933      	cbnz	r3, 8002f80 <_free_r+0x30>
 8002f72:	6063      	str	r3, [r4, #4]
 8002f74:	6014      	str	r4, [r2, #0]
 8002f76:	b003      	add	sp, #12
 8002f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f7c:	f000 b90e 	b.w	800319c <__malloc_unlock>
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	d908      	bls.n	8002f96 <_free_r+0x46>
 8002f84:	6825      	ldr	r5, [r4, #0]
 8002f86:	1961      	adds	r1, r4, r5
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	bf01      	itttt	eq
 8002f8c:	6819      	ldreq	r1, [r3, #0]
 8002f8e:	685b      	ldreq	r3, [r3, #4]
 8002f90:	1949      	addeq	r1, r1, r5
 8002f92:	6021      	streq	r1, [r4, #0]
 8002f94:	e7ed      	b.n	8002f72 <_free_r+0x22>
 8002f96:	461a      	mov	r2, r3
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	b10b      	cbz	r3, 8002fa0 <_free_r+0x50>
 8002f9c:	42a3      	cmp	r3, r4
 8002f9e:	d9fa      	bls.n	8002f96 <_free_r+0x46>
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	1855      	adds	r5, r2, r1
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d10b      	bne.n	8002fc0 <_free_r+0x70>
 8002fa8:	6824      	ldr	r4, [r4, #0]
 8002faa:	4421      	add	r1, r4
 8002fac:	1854      	adds	r4, r2, r1
 8002fae:	42a3      	cmp	r3, r4
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	d1e0      	bne.n	8002f76 <_free_r+0x26>
 8002fb4:	681c      	ldr	r4, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	6053      	str	r3, [r2, #4]
 8002fba:	4421      	add	r1, r4
 8002fbc:	6011      	str	r1, [r2, #0]
 8002fbe:	e7da      	b.n	8002f76 <_free_r+0x26>
 8002fc0:	d902      	bls.n	8002fc8 <_free_r+0x78>
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	6003      	str	r3, [r0, #0]
 8002fc6:	e7d6      	b.n	8002f76 <_free_r+0x26>
 8002fc8:	6825      	ldr	r5, [r4, #0]
 8002fca:	1961      	adds	r1, r4, r5
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	bf04      	itt	eq
 8002fd0:	6819      	ldreq	r1, [r3, #0]
 8002fd2:	685b      	ldreq	r3, [r3, #4]
 8002fd4:	6063      	str	r3, [r4, #4]
 8002fd6:	bf04      	itt	eq
 8002fd8:	1949      	addeq	r1, r1, r5
 8002fda:	6021      	streq	r1, [r4, #0]
 8002fdc:	6054      	str	r4, [r2, #4]
 8002fde:	e7ca      	b.n	8002f76 <_free_r+0x26>
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bd30      	pop	{r4, r5, pc}
 8002fe4:	20000344 	.word	0x20000344

08002fe8 <sbrk_aligned>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4e0e      	ldr	r6, [pc, #56]	; (8003024 <sbrk_aligned+0x3c>)
 8002fec:	460c      	mov	r4, r1
 8002fee:	6831      	ldr	r1, [r6, #0]
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	b911      	cbnz	r1, 8002ffa <sbrk_aligned+0x12>
 8002ff4:	f000 f8bc 	bl	8003170 <_sbrk_r>
 8002ff8:	6030      	str	r0, [r6, #0]
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f8b7 	bl	8003170 <_sbrk_r>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d00a      	beq.n	800301c <sbrk_aligned+0x34>
 8003006:	1cc4      	adds	r4, r0, #3
 8003008:	f024 0403 	bic.w	r4, r4, #3
 800300c:	42a0      	cmp	r0, r4
 800300e:	d007      	beq.n	8003020 <sbrk_aligned+0x38>
 8003010:	1a21      	subs	r1, r4, r0
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f8ac 	bl	8003170 <_sbrk_r>
 8003018:	3001      	adds	r0, #1
 800301a:	d101      	bne.n	8003020 <sbrk_aligned+0x38>
 800301c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003020:	4620      	mov	r0, r4
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	20000348 	.word	0x20000348

08003028 <_malloc_r>:
 8003028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302c:	1ccd      	adds	r5, r1, #3
 800302e:	f025 0503 	bic.w	r5, r5, #3
 8003032:	3508      	adds	r5, #8
 8003034:	2d0c      	cmp	r5, #12
 8003036:	bf38      	it	cc
 8003038:	250c      	movcc	r5, #12
 800303a:	2d00      	cmp	r5, #0
 800303c:	4607      	mov	r7, r0
 800303e:	db01      	blt.n	8003044 <_malloc_r+0x1c>
 8003040:	42a9      	cmp	r1, r5
 8003042:	d905      	bls.n	8003050 <_malloc_r+0x28>
 8003044:	230c      	movs	r3, #12
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	2600      	movs	r6, #0
 800304a:	4630      	mov	r0, r6
 800304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003050:	4e2e      	ldr	r6, [pc, #184]	; (800310c <_malloc_r+0xe4>)
 8003052:	f000 f89d 	bl	8003190 <__malloc_lock>
 8003056:	6833      	ldr	r3, [r6, #0]
 8003058:	461c      	mov	r4, r3
 800305a:	bb34      	cbnz	r4, 80030aa <_malloc_r+0x82>
 800305c:	4629      	mov	r1, r5
 800305e:	4638      	mov	r0, r7
 8003060:	f7ff ffc2 	bl	8002fe8 <sbrk_aligned>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	4604      	mov	r4, r0
 8003068:	d14d      	bne.n	8003106 <_malloc_r+0xde>
 800306a:	6834      	ldr	r4, [r6, #0]
 800306c:	4626      	mov	r6, r4
 800306e:	2e00      	cmp	r6, #0
 8003070:	d140      	bne.n	80030f4 <_malloc_r+0xcc>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	4631      	mov	r1, r6
 8003076:	4638      	mov	r0, r7
 8003078:	eb04 0803 	add.w	r8, r4, r3
 800307c:	f000 f878 	bl	8003170 <_sbrk_r>
 8003080:	4580      	cmp	r8, r0
 8003082:	d13a      	bne.n	80030fa <_malloc_r+0xd2>
 8003084:	6821      	ldr	r1, [r4, #0]
 8003086:	3503      	adds	r5, #3
 8003088:	1a6d      	subs	r5, r5, r1
 800308a:	f025 0503 	bic.w	r5, r5, #3
 800308e:	3508      	adds	r5, #8
 8003090:	2d0c      	cmp	r5, #12
 8003092:	bf38      	it	cc
 8003094:	250c      	movcc	r5, #12
 8003096:	4629      	mov	r1, r5
 8003098:	4638      	mov	r0, r7
 800309a:	f7ff ffa5 	bl	8002fe8 <sbrk_aligned>
 800309e:	3001      	adds	r0, #1
 80030a0:	d02b      	beq.n	80030fa <_malloc_r+0xd2>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	442b      	add	r3, r5
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	e00e      	b.n	80030c8 <_malloc_r+0xa0>
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	1b52      	subs	r2, r2, r5
 80030ae:	d41e      	bmi.n	80030ee <_malloc_r+0xc6>
 80030b0:	2a0b      	cmp	r2, #11
 80030b2:	d916      	bls.n	80030e2 <_malloc_r+0xba>
 80030b4:	1961      	adds	r1, r4, r5
 80030b6:	42a3      	cmp	r3, r4
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	bf18      	it	ne
 80030bc:	6059      	strne	r1, [r3, #4]
 80030be:	6863      	ldr	r3, [r4, #4]
 80030c0:	bf08      	it	eq
 80030c2:	6031      	streq	r1, [r6, #0]
 80030c4:	5162      	str	r2, [r4, r5]
 80030c6:	604b      	str	r3, [r1, #4]
 80030c8:	4638      	mov	r0, r7
 80030ca:	f104 060b 	add.w	r6, r4, #11
 80030ce:	f000 f865 	bl	800319c <__malloc_unlock>
 80030d2:	f026 0607 	bic.w	r6, r6, #7
 80030d6:	1d23      	adds	r3, r4, #4
 80030d8:	1af2      	subs	r2, r6, r3
 80030da:	d0b6      	beq.n	800304a <_malloc_r+0x22>
 80030dc:	1b9b      	subs	r3, r3, r6
 80030de:	50a3      	str	r3, [r4, r2]
 80030e0:	e7b3      	b.n	800304a <_malloc_r+0x22>
 80030e2:	6862      	ldr	r2, [r4, #4]
 80030e4:	42a3      	cmp	r3, r4
 80030e6:	bf0c      	ite	eq
 80030e8:	6032      	streq	r2, [r6, #0]
 80030ea:	605a      	strne	r2, [r3, #4]
 80030ec:	e7ec      	b.n	80030c8 <_malloc_r+0xa0>
 80030ee:	4623      	mov	r3, r4
 80030f0:	6864      	ldr	r4, [r4, #4]
 80030f2:	e7b2      	b.n	800305a <_malloc_r+0x32>
 80030f4:	4634      	mov	r4, r6
 80030f6:	6876      	ldr	r6, [r6, #4]
 80030f8:	e7b9      	b.n	800306e <_malloc_r+0x46>
 80030fa:	230c      	movs	r3, #12
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4638      	mov	r0, r7
 8003100:	f000 f84c 	bl	800319c <__malloc_unlock>
 8003104:	e7a1      	b.n	800304a <_malloc_r+0x22>
 8003106:	6025      	str	r5, [r4, #0]
 8003108:	e7de      	b.n	80030c8 <_malloc_r+0xa0>
 800310a:	bf00      	nop
 800310c:	20000344 	.word	0x20000344

08003110 <_realloc_r>:
 8003110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003114:	4680      	mov	r8, r0
 8003116:	4614      	mov	r4, r2
 8003118:	460e      	mov	r6, r1
 800311a:	b921      	cbnz	r1, 8003126 <_realloc_r+0x16>
 800311c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	4611      	mov	r1, r2
 8003122:	f7ff bf81 	b.w	8003028 <_malloc_r>
 8003126:	b92a      	cbnz	r2, 8003134 <_realloc_r+0x24>
 8003128:	f7ff ff12 	bl	8002f50 <_free_r>
 800312c:	4625      	mov	r5, r4
 800312e:	4628      	mov	r0, r5
 8003130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003134:	f000 f838 	bl	80031a8 <_malloc_usable_size_r>
 8003138:	4284      	cmp	r4, r0
 800313a:	4607      	mov	r7, r0
 800313c:	d802      	bhi.n	8003144 <_realloc_r+0x34>
 800313e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003142:	d812      	bhi.n	800316a <_realloc_r+0x5a>
 8003144:	4621      	mov	r1, r4
 8003146:	4640      	mov	r0, r8
 8003148:	f7ff ff6e 	bl	8003028 <_malloc_r>
 800314c:	4605      	mov	r5, r0
 800314e:	2800      	cmp	r0, #0
 8003150:	d0ed      	beq.n	800312e <_realloc_r+0x1e>
 8003152:	42bc      	cmp	r4, r7
 8003154:	4622      	mov	r2, r4
 8003156:	4631      	mov	r1, r6
 8003158:	bf28      	it	cs
 800315a:	463a      	movcs	r2, r7
 800315c:	f7ff fed0 	bl	8002f00 <memcpy>
 8003160:	4631      	mov	r1, r6
 8003162:	4640      	mov	r0, r8
 8003164:	f7ff fef4 	bl	8002f50 <_free_r>
 8003168:	e7e1      	b.n	800312e <_realloc_r+0x1e>
 800316a:	4635      	mov	r5, r6
 800316c:	e7df      	b.n	800312e <_realloc_r+0x1e>
	...

08003170 <_sbrk_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d06      	ldr	r5, [pc, #24]	; (800318c <_sbrk_r+0x1c>)
 8003174:	2300      	movs	r3, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	f7fd fc78 	bl	8000a70 <_sbrk>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d102      	bne.n	800318a <_sbrk_r+0x1a>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	b103      	cbz	r3, 800318a <_sbrk_r+0x1a>
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	bd38      	pop	{r3, r4, r5, pc}
 800318c:	2000034c 	.word	0x2000034c

08003190 <__malloc_lock>:
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <__malloc_lock+0x8>)
 8003192:	f000 b811 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 8003196:	bf00      	nop
 8003198:	20000350 	.word	0x20000350

0800319c <__malloc_unlock>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__malloc_unlock+0x8>)
 800319e:	f000 b80c 	b.w	80031ba <__retarget_lock_release_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000350 	.word	0x20000350

080031a8 <_malloc_usable_size_r>:
 80031a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ac:	1f18      	subs	r0, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfbc      	itt	lt
 80031b2:	580b      	ldrlt	r3, [r1, r0]
 80031b4:	18c0      	addlt	r0, r0, r3
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_acquire_recursive>:
 80031b8:	4770      	bx	lr

080031ba <__retarget_lock_release_recursive>:
 80031ba:	4770      	bx	lr

080031bc <_init>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	bf00      	nop
 80031c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c2:	bc08      	pop	{r3}
 80031c4:	469e      	mov	lr, r3
 80031c6:	4770      	bx	lr

080031c8 <_fini>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr
