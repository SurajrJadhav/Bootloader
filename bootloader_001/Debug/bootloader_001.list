
bootloader_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd0  08003cd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000164  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c79  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  00029d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd38  00000000  00000000  0002c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e3f  00000000  00000000  0004c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0e6f  00000000  00000000  00056477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001172e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000247c  00000000  00000000  00117338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bd0 	.word	0x08003bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003bd0 	.word	0x08003bd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <bootloader_jump_to_user_code>:
#include "bootloader.h"
#include "main.h"
#include "xmodem.h"


BL_StatusTypedef bootloader_jump_to_user_code(UART_HandleTypeDef*BL_UART){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	if(bootloader_signature_get_reset_flag(BL_UART))
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f959 	bl	8000c5c <bootloader_signature_get_reset_flag>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d02e      	beq.n	8000a0e <bootloader_jump_to_user_code+0x72>
	{
		uint8_t input;
		HAL_UART_Transmit(huart5, "Update available press 'y' for update\n\r", 30, HAL_MAX_DELAY);
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b4:	221e      	movs	r2, #30
 80009b6:	4921      	ldr	r1, [pc, #132]	; (8000a3c <bootloader_jump_to_user_code+0xa0>)
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 f852 	bl	8002a62 <HAL_UART_Transmit>
		HAL_UART_Receive(huart5, &input, 1, HAL_MAX_DELAY);
 80009be:	f107 010b 	add.w	r1, r7, #11
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c6:	2201      	movs	r2, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f002 f8dc 	bl	8002b86 <HAL_UART_Receive>

		if(input=='y' || input=='Y')
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	2b79      	cmp	r3, #121	; 0x79
 80009d2:	d002      	beq.n	80009da <bootloader_jump_to_user_code+0x3e>
 80009d4:	7afb      	ldrb	r3, [r7, #11]
 80009d6:	2b59      	cmp	r3, #89	; 0x59
 80009d8:	d119      	bne.n	8000a0e <bootloader_jump_to_user_code+0x72>
		{
			/*update application area*/
			if(bootloader_app_update(BL_UART)==BL_OK){
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f950 	bl	8000c80 <bootloader_app_update>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10a      	bne.n	80009fc <bootloader_jump_to_user_code+0x60>
				/*change flag in signature area*/
				bootloader_update_signature_reset_flag(huart5);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f8e0 	bl	8000bac <bootloader_update_signature_reset_flag>
				HAL_UART_Transmit(huart5, "Updated", strlen("Updated"), HAL_MAX_DELAY);
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f0:	2207      	movs	r2, #7
 80009f2:	4913      	ldr	r1, [pc, #76]	; (8000a40 <bootloader_jump_to_user_code+0xa4>)
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f002 f834 	bl	8002a62 <HAL_UART_Transmit>
 80009fa:	e008      	b.n	8000a0e <bootloader_jump_to_user_code+0x72>
			}
			else{
				HAL_UART_Transmit(huart5, "Update Failed",strlen("Update Failed"), HAL_MAX_DELAY);
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a00:	220d      	movs	r2, #13
 8000a02:	4910      	ldr	r1, [pc, #64]	; (8000a44 <bootloader_jump_to_user_code+0xa8>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f002 f82c 	bl	8002a62 <HAL_UART_Transmit>
				return BL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e011      	b.n	8000a32 <bootloader_jump_to_user_code+0x96>
	}

//	bootloader_unlock_flash();

	//set msp
	uint32_t msp_value=*(uint32_t*)FLASH_APPLICATION_AREA;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <bootloader_jump_to_user_code+0xac>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f383 8808 	msr	MSP, r3
}
 8000a1e:	bf00      	nop
	__set_MSP(msp_value);

	//relocate vector table
	SCB->VTOR=(__IOM uint32_t)FLASH_APPLICATION_AREA;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <bootloader_jump_to_user_code+0xb0>)
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <bootloader_jump_to_user_code+0xac>)
 8000a24:	609a      	str	r2, [r3, #8]

	//create function pointer for reset handler
	void(*reset_handler)(void);

	reset_handler=(void(*)(void))(*(uint32_t *)(FLASH_APPLICATION_AREA+4U));
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <bootloader_jump_to_user_code+0xb4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	613b      	str	r3, [r7, #16]

	reset_handler();
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4798      	blx	r3

	return BL_ERROR;
 8000a30:	2301      	movs	r3, #1
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08003be8 	.word	0x08003be8
 8000a40:	08003c10 	.word	0x08003c10
 8000a44:	08003c18 	.word	0x08003c18
 8000a48:	08010000 	.word	0x08010000
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	08010004 	.word	0x08010004

08000a54 <bootloader_get_bl_version>:

/*********Bootloader Command Functions*****************************/

BL_StatusTypedef bootloader_get_bl_version(UART_HandleTypeDef*BL_UART)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

}
 8000a5c:	bf00      	nop
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <bootloader_write_bin_to_memory>:

BL_StatusTypedef bootloader_write_bin_to_memory(uint8_t *rxbuf ,int size)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	static uint32_t address=FLASH_DOWNLOAD_AREA;

	HAL_FLASH_Unlock();
 8000a76:	f000 fefd 	bl	8001874 <HAL_FLASH_Unlock>

	int i=0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
	while(i < size){
 8000a7e:	e01a      	b.n	8000ab6 <bootloader_write_bin_to_memory+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,address++, *(rxbuf+i)) == HAL_OK ){
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <bootloader_write_bin_to_memory+0x60>)
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	1c4b      	adds	r3, r1, #1
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <bootloader_write_bin_to_memory+0x60>)
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2200      	movs	r2, #0
 8000a96:	461c      	mov	r4, r3
 8000a98:	4615      	mov	r5, r2
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	462b      	mov	r3, r5
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fe94 	bl	80017cc <HAL_FLASH_Program>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <bootloader_write_bin_to_memory+0x46>
			i++;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	e001      	b.n	8000ab6 <bootloader_write_bin_to_memory+0x4a>
		}
		else{
			return BL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e006      	b.n	8000ac4 <bootloader_write_bin_to_memory+0x58>
	while(i < size){
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbe0      	blt.n	8000a80 <bootloader_write_bin_to_memory+0x14>
		}
	}

	HAL_FLASH_Lock();
 8000abe:	f000 fefb 	bl	80018b8 <HAL_FLASH_Lock>
	return BL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bdb0      	pop	{r4, r5, r7, pc}
 8000acc:	20000000 	.word	0x20000000

08000ad0 <bootloader_flash_erase_signature_area>:
BL_StatusTypedef bootloader_flash_erase_signature_area(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0



	/*erase flash*/
	HAL_FLASH_Unlock();
 8000ad4:	f000 fece 	bl	8001874 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_3,FLASH_VOLTAGE_RANGE_3);
 8000ad8:	2102      	movs	r1, #2
 8000ada:	2003      	movs	r0, #3
 8000adc:	f001 f8c0 	bl	8001c60 <FLASH_Erase_Sector>

	HAL_FLASH_Lock();
 8000ae0:	f000 feea 	bl	80018b8 <HAL_FLASH_Lock>

	return BL_OK;
 8000ae4:	2300      	movs	r3, #0

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <bootloader_flash_erase_download_area>:

BL_StatusTypedef bootloader_flash_erase_download_area(){
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialise flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000b00:	f000 feb8 	bl	8001874 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000b04:	f107 0214 	add.w	r2, r7, #20
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f813 	bl	8001b38 <HAL_FLASHEx_Erase>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <bootloader_flash_erase_download_area+0x32>
		return BL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e002      	b.n	8000b22 <bootloader_flash_erase_download_area+0x38>
	}
	HAL_FLASH_Lock();
 8000b1c:	f000 fecc 	bl	80018b8 <HAL_FLASH_Lock>

	return BL_OK;
 8000b20:	2300      	movs	r3, #0

}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <bootloader_flash_erase_application_area>:
BL_StatusTypedef bootloader_flash_erase_application_area(){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0

	uint32_t SectorError;
	FLASH_EraseInitTypeDef EraseSectorInfo;

	/*Initialize flash parameters*/
	EraseSectorInfo.Sector=FLASH_SECTOR_4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	60bb      	str	r3, [r7, #8]
	EraseSectorInfo.NbSectors=4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
	EraseSectorInfo.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
	EraseSectorInfo.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]

	/*erase flash*/
	HAL_FLASH_Unlock();
 8000b40:	f000 fe98 	bl	8001874 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseSectorInfo,&SectorError)!=HAL_OK){
 8000b44:	f107 0214 	add.w	r2, r7, #20
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fff3 	bl	8001b38 <HAL_FLASHEx_Erase>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <bootloader_flash_erase_application_area+0x32>
		return BL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e002      	b.n	8000b62 <bootloader_flash_erase_application_area+0x38>
	}
	HAL_FLASH_Lock();
 8000b5c:	f000 feac 	bl	80018b8 <HAL_FLASH_Lock>

	return BL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <bootloader_update_signature_set_flag>:

BL_StatusTypedef bootloader_read_memory(UART_HandleTypeDef*BL_UART){

}

BL_StatusTypedef bootloader_update_signature_set_flag(UART_HandleTypeDef*BL_UART){
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000b74:	f000 f8ba 	bl	8000cec <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <bootloader_update_signature_set_flag+0x3c>)
 8000b7a:	f107 0408 	add.w	r4, r7, #8
 8000b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
	bootloader_flash_erase_signature_area();
 8000b88:	f7ff ffa2 	bl	8000ad0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <bootloader_update_signature_set_flag+0x3c>)
 8000b8e:	461c      	mov	r4, r3
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/*update signature*/
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000b9a:	f000 f8c3 	bl	8000d24 <bootloader_lock_flash>
}
 8000b9e:	bf00      	nop
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	0800c000 	.word	0x0800c000

08000bac <bootloader_update_signature_reset_flag>:
BL_StatusTypedef bootloader_update_signature_reset_flag(UART_HandleTypeDef*BL_UART){
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000bb4:	f000 f89a 	bl	8000cec <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <bootloader_update_signature_reset_flag+0x3c>)
 8000bba:	f107 0408 	add.w	r4, r7, #8
 8000bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.update_flag=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
	/*update signature*/
	bootloader_flash_erase_signature_area();
 8000bc8:	f7ff ff82 	bl	8000ad0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <bootloader_update_signature_reset_flag+0x3c>)
 8000bce:	461c      	mov	r4, r3
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000bda:	f000 f8a3 	bl	8000d24 <bootloader_lock_flash>
}
 8000bde:	bf00      	nop
 8000be0:	4618      	mov	r0, r3
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	0800c000 	.word	0x0800c000
 8000bec:	00000000 	.word	0x00000000

08000bf0 <bootloader_update_signature_app_version>:
BL_StatusTypedef bootloader_update_signature_app_version(UART_HandleTypeDef*BL_UART){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	bootloader_unlock_flash();
 8000bf8:	f000 f878 	bl	8000cec <bootloader_unlock_flash>

	bl_sig_t temp;
	memcpy(&temp,FLASH_SIGNATURE_AREA,sizeof(bl_sig_t));
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <bootloader_update_signature_app_version+0x68>)
 8000bfe:	f107 0408 	add.w	r4, r7, #8
 8000c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	temp.app_version+=0.1;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc9c 	bl	8000548 <__aeabi_f2d>
 8000c10:	a30f      	add	r3, pc, #60	; (adr r3, 8000c50 <bootloader_update_signature_app_version+0x60>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fb39 	bl	800028c <__adddf3>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	f7ff fce9 	bl	80005f8 <__aeabi_d2f>
 8000c26:	4603      	mov	r3, r0
 8000c28:	60fb      	str	r3, [r7, #12]

	bootloader_flash_erase_signature_area();
 8000c2a:	f7ff ff51 	bl	8000ad0 <bootloader_flash_erase_signature_area>
	memcpy(FLASH_SIGNATURE_AREA,&temp,sizeof(bl_sig_t));
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <bootloader_update_signature_app_version+0x68>)
 8000c30:	461c      	mov	r4, r3
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*update signature*/
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
 8000c3c:	f000 f872 	bl	8000d24 <bootloader_lock_flash>
}
 8000c40:	bf00      	nop
 8000c42:	4618      	mov	r0, r3
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	9999999a 	.word	0x9999999a
 8000c54:	3fb99999 	.word	0x3fb99999
 8000c58:	0800c000 	.word	0x0800c000

08000c5c <bootloader_signature_get_reset_flag>:
//	bootloader_signature_update(&temp);

	bootloader_lock_flash();
}

int bootloader_signature_get_reset_flag(UART_HandleTypeDef*BL_UART){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	/*open flash for operation*/
	bootloader_unlock_flash();
 8000c64:	f000 f842 	bl	8000cec <bootloader_unlock_flash>

	uint8_t flag=((bl_sig_t *)FLASH_SIGNATURE_AREA)->update_flag;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <bootloader_signature_get_reset_flag+0x20>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	73fb      	strb	r3, [r7, #15]

	/*lock flash operation*/
	bootloader_lock_flash();
 8000c6e:	f000 f859 	bl	8000d24 <bootloader_lock_flash>
	return flag;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	0800c000 	.word	0x0800c000

08000c80 <bootloader_app_update>:


BL_StatusTypedef bootloader_app_update(UART_HandleTypeDef*BL_UART){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	/*erase memory in order to write*/
	bootloader_flash_erase_application_area();
 8000c88:	f7ff ff4f 	bl	8000b2a <bootloader_flash_erase_application_area>

	HAL_FLASH_Unlock();
 8000c8c:	f000 fdf2 	bl	8001874 <HAL_FLASH_Unlock>
	uint32_t address=FLASH_APPLICATION_AREA;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <bootloader_app_update+0x64>)
 8000c92:	60fb      	str	r3, [r7, #12]
	uint32_t *data =FLASH_DOWNLOAD_AREA;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <bootloader_app_update+0x68>)
 8000c96:	60bb      	str	r3, [r7, #8]

	while(*data != 0xffffffff){
 8000c98:	e017      	b.n	8000cca <bootloader_app_update+0x4a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data)==HAL_ERROR)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	462b      	mov	r3, r5
 8000ca8:	68f9      	ldr	r1, [r7, #12]
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 fd8e 	bl	80017cc <HAL_FLASH_Program>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d103      	bne.n	8000cbe <bootloader_app_update+0x3e>
		{
			HAL_FLASH_Lock();
 8000cb6:	f000 fdff 	bl	80018b8 <HAL_FLASH_Lock>
			return BL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00d      	b.n	8000cda <bootloader_app_update+0x5a>
		}
		address=address+4;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	60fb      	str	r3, [r7, #12]
		data++;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
	while(*data != 0xffffffff){
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd2:	d1e2      	bne.n	8000c9a <bootloader_app_update+0x1a>
	}
	HAL_FLASH_Lock();
 8000cd4:	f000 fdf0 	bl	80018b8 <HAL_FLASH_Lock>
	return BL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08010000 	.word	0x08010000
 8000ce8:	08080000 	.word	0x08080000

08000cec <bootloader_unlock_flash>:
	bootloader_lock_flash();

}


BL_StatusTypedef bootloader_unlock_flash(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000cf0:	f000 fdc0 	bl	8001874 <HAL_FLASH_Unlock>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cfe:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <bootloader_unlock_flash+0x34>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6113      	str	r3, [r2, #16]
}
 8000d18:	bf00      	nop
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <bootloader_lock_flash>:
BL_StatusTypedef bootloader_lock_flash(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	/*disable programming enable bit*/
	FLASH->CR &= (~FLASH_CR_PG);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <bootloader_lock_flash+0x1c>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <bootloader_lock_flash+0x1c>)
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8000d34:	f000 fdc0 	bl	80018b8 <HAL_FLASH_Lock>
}
 8000d38:	bf00      	nop
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d48:	f000 fbe8 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f816 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f89c 	bl	8000e8c <MX_GPIO_Init>
  MX_UART5_Init();
 8000d54:	f000 f870 	bl	8000e38 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /*Enter Bootloader mode when User_button is pressed*/
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <main+0x30>)
 8000d5c:	f001 f9aa 	bl	80020b4 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d102      	bne.n	8000d6c <main+0x28>
	  bootloader_mode();
 8000d66:	f000 f8f1 	bl	8000f4c <bootloader_mode>
 8000d6a:	e002      	b.n	8000d72 <main+0x2e>
  }
  else{
	  bootloader_jump_to_user_code(&huart5);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <main+0x34>)
 8000d6e:	f7ff fe15 	bl	800099c <bootloader_jump_to_user_code>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <main+0x2e>
 8000d74:	40020000 	.word	0x40020000
 8000d78:	20000090 	.word	0x20000090

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fab8 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xb4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xb4>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xb4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f993 	bl	8002118 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000df8:	f000 f8f6 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fbf6 	bl	8002608 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e22:	f000 f8e1 	bl	8000fe8 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3750      	adds	r7, #80	; 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_UART5_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e70:	f001 fdaa 	bl	80029c8 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f8b5 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000090 	.word	0x20000090
 8000e88:	40005000 	.word	0x40005000

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_GPIO_Init+0xb4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_GPIO_Init+0xb8>)
 8000efe:	f001 f8f1 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_GPIO_Init+0xbc>)
 8000f16:	f000 ff31 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f1a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_GPIO_Init+0xb8>)
 8000f34:	f000 ff22 	bl	8001d7c <HAL_GPIO_Init>

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40020000 	.word	0x40020000

08000f4c <bootloader_mode>:

/* USER CODE BEGIN 4 */
void bootloader_mode(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <bootloader_mode+0x84>)
 8000f58:	f001 f8c4 	bl	80020e4 <HAL_GPIO_WritePin>
	/*Use UART5 for bootloader command*/
	HAL_UART_Transmit(&huart5,(uint8_t*) "Welcome to bootloader\r\n", strlen("Welcome to bootloder\r\n"),HAL_MAX_DELAY );
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f60:	2216      	movs	r2, #22
 8000f62:	491c      	ldr	r1, [pc, #112]	; (8000fd4 <bootloader_mode+0x88>)
 8000f64:	481c      	ldr	r0, [pc, #112]	; (8000fd8 <bootloader_mode+0x8c>)
 8000f66:	f001 fd7c 	bl	8002a62 <HAL_UART_Transmit>

	/*poll UART5 to read data*/
	while(1)
	{
		/*Receive command from host*/
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	2201      	movs	r2, #1
 8000f70:	491a      	ldr	r1, [pc, #104]	; (8000fdc <bootloader_mode+0x90>)
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <bootloader_mode+0x8c>)
 8000f74:	f001 fe07 	bl	8002b86 <HAL_UART_Receive>

		//break through cmd
		switch(cmdBuf[0])
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <bootloader_mode+0x90>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b32      	cmp	r3, #50	; 0x32
 8000f7e:	d006      	beq.n	8000f8e <bootloader_mode+0x42>
 8000f80:	2b32      	cmp	r3, #50	; 0x32
 8000f82:	dc1c      	bgt.n	8000fbe <bootloader_mode+0x72>
 8000f84:	2b30      	cmp	r3, #48	; 0x30
 8000f86:	d006      	beq.n	8000f96 <bootloader_mode+0x4a>
 8000f88:	2b31      	cmp	r3, #49	; 0x31
 8000f8a:	d008      	beq.n	8000f9e <bootloader_mode+0x52>
 8000f8c:	e017      	b.n	8000fbe <bootloader_mode+0x72>
		{
		case BL_GET_VERSION:
			bootloader_get_bl_version(&huart5);
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <bootloader_mode+0x8c>)
 8000f90:	f7ff fd60 	bl	8000a54 <bootloader_get_bl_version>
			break;
 8000f94:	e01a      	b.n	8000fcc <bootloader_mode+0x80>
		case BL_JMP_TO_USER_CODE:
			bootloader_jump_to_user_code(&huart5);
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <bootloader_mode+0x8c>)
 8000f98:	f7ff fd00 	bl	800099c <bootloader_jump_to_user_code>
			break;
 8000f9c:	e016      	b.n	8000fcc <bootloader_mode+0x80>
		case BL_WRITE_BIN_TO_MEMORY:
			bootloader_flash_erase_download_area();
 8000f9e:	f7ff fda4 	bl	8000aea <bootloader_flash_erase_download_area>
			while(1){
				if(xmodem_receive(&huart5)==XMODEM_ERROR){
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <bootloader_mode+0x8c>)
 8000fa4:	f000 f97e 	bl	80012a4 <xmodem_receive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d1f9      	bne.n	8000fa2 <bootloader_mode+0x56>
					HAL_UART_Transmit(&huart5, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <bootloader_mode+0x94>)
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <bootloader_mode+0x8c>)
 8000fb8:	f001 fd53 	bl	8002a62 <HAL_UART_Transmit>
					while(1);
 8000fbc:	e7fe      	b.n	8000fbc <bootloader_mode+0x70>
				}
			}
			break;
		default:
			HAL_UART_Transmit(&huart5, "Invalid cmd\n\r", strlen("Invalid cmd\n\r"), HAL_MAX_DELAY);
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc2:	220d      	movs	r2, #13
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <bootloader_mode+0x98>)
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <bootloader_mode+0x8c>)
 8000fc8:	f001 fd4b 	bl	8002a62 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart5, cmdBuf, CMD_SIZE, HAL_MAX_DELAY);
 8000fcc:	e7cd      	b.n	8000f6a <bootloader_mode+0x1e>
 8000fce:	bf00      	nop
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	08003c28 	.word	0x08003c28
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	200000d4 	.word	0x200000d4
 8000fe0:	08003c40 	.word	0x08003c40
 8000fe4:	08003c48 	.word	0x08003c48

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_UART_MspInit+0xc0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d14a      	bne.n	80010fc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_UART_MspInit+0xc4>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_UART_MspInit+0xc4>)
 8001070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_UART_MspInit+0xc4>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_UART_MspInit+0xc4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_UART_MspInit+0xc4>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_UART_MspInit+0xc4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_UART_MspInit+0xc4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_UART_MspInit+0xc4>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_UART_MspInit+0xc4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010cc:	2308      	movs	r3, #8
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <HAL_UART_MspInit+0xc8>)
 80010d8:	f000 fe50 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010dc:	2304      	movs	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010ec:	2308      	movs	r3, #8
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <HAL_UART_MspInit+0xcc>)
 80010f8:	f000 fe40 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40005000 	.word	0x40005000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 fa2e 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f002 f87a 	bl	8003290 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20020000 	.word	0x20020000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	2000019c 	.word	0x2000019c
 80011d0:	200001d8 	.word	0x200001d8

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <xmodem_calcrc>:
*      | SOH | PKT_num | Data_Size | data | SUM  |
*      +-----+-------+-------+------+-----+------+
*/

uint8_t xmodem_calcrc(uint8_t *ptr, int count)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	uint8_t  crc;
    char i;

    crc = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
    while (--count >= 0)
 8001206:	e01e      	b.n	8001246 <xmodem_calcrc+0x4e>
    {
        crc = crc ^ *ptr++;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	4053      	eors	r3, r2
 8001214:	73fb      	strb	r3, [r7, #15]
        i = 8;
 8001216:	2308      	movs	r3, #8
 8001218:	73bb      	strb	r3, [r7, #14]
        do
        {
            if (crc & 0x80)
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da08      	bge.n	8001234 <xmodem_calcrc+0x3c>
                crc = crc << 1 ^ 0x97;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	b25b      	sxtb	r3, r3
 8001228:	f083 0368 	eor.w	r3, r3, #104	; 0x68
 800122c:	43db      	mvns	r3, r3
 800122e:	b25b      	sxtb	r3, r3
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e002      	b.n	800123a <xmodem_calcrc+0x42>
            else
                crc = crc << 1;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
        } while(--i);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3b01      	subs	r3, #1
 800123e:	73bb      	strb	r3, [r7, #14]
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1e9      	bne.n	800121a <xmodem_calcrc+0x22>
    while (--count >= 0)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	dada      	bge.n	8001208 <xmodem_calcrc+0x10>
    }
    return crc;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <xmodem_ready_to_receive>:

uint8_t xmodem_ready_to_receive(UART_HandleTypeDef *BL_UART){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t header=0,response=NAK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	2315      	movs	r3, #21
 800126e:	73bb      	strb	r3, [r7, #14]
	while(header!=STX){
 8001270:	e00f      	b.n	8001292 <xmodem_ready_to_receive+0x32>
		HAL_UART_Transmit(BL_UART,&response, 1, HAL_MAX_DELAY);
 8001272:	f107 010e 	add.w	r1, r7, #14
 8001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127a:	2201      	movs	r2, #1
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 fbf0 	bl	8002a62 <HAL_UART_Transmit>
		/*Receive & Check Header**/
		HAL_UART_Receive(BL_UART, &header, 1, 1000);
 8001282:	f107 010f 	add.w	r1, r7, #15
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	2201      	movs	r2, #1
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 fc7a 	bl	8002b86 <HAL_UART_Receive>
	while(header!=STX){
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d1ec      	bne.n	8001272 <xmodem_ready_to_receive+0x12>
	}
	return header;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <xmodem_receive>:


XMODEM_StatusTypedef xmodem_receive(UART_HandleTypeDef *BL_UART){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012b0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80012b4:	6018      	str	r0, [r3, #0]

	uint8_t rxbuf[1050]={0};
 80012b6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012ba:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	3304      	adds	r3, #4
 80012c4:	f240 4216 	movw	r2, #1046	; 0x416
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 f818 	bl	8003300 <memset>
	uint8_t header,size[2],received_crc,response;
	uint16_t actual_size;
	static uint8_t packet_number=0;
	if(packet_number==0)
 80012d0:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <xmodem_receive+0x214>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10e      	bne.n	80012f6 <xmodem_receive+0x52>
		header=xmodem_ready_to_receive(BL_UART);
 80012d8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012dc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f7ff ffbd 	bl	8001260 <xmodem_ready_to_receive>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012ee:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e00b      	b.n	800130e <xmodem_receive+0x6a>
	else
		HAL_UART_Receive(BL_UART, &header, 1, HAL_MAX_DELAY);
 80012f6:	f107 011f 	add.w	r1, r7, #31
 80012fa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80012fe:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001306:	2201      	movs	r2, #1
 8001308:	6800      	ldr	r0, [r0, #0]
 800130a:	f001 fc3c 	bl	8002b86 <HAL_UART_Receive>

	switch(header)
 800130e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001312:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc02      	bgt.n	8001322 <xmodem_receive+0x7e>
 800131c:	2b00      	cmp	r3, #0
 800131e:	dc04      	bgt.n	800132a <xmodem_receive+0x86>
 8001320:	e0c5      	b.n	80014ae <xmodem_receive+0x20a>
 8001322:	2b04      	cmp	r3, #4
 8001324:	f000 8094 	beq.w	8001450 <xmodem_receive+0x1ac>
 8001328:	e0c1      	b.n	80014ae <xmodem_receive+0x20a>
	 {
	 case SOH:
	 case STX:
		 	 /*receive PKT_num & size*/
		 	 HAL_UART_Receive(BL_UART, &packet_number, 1, HAL_MAX_DELAY);
 800132a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800132e:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	2201      	movs	r2, #1
 8001338:	495f      	ldr	r1, [pc, #380]	; (80014b8 <xmodem_receive+0x214>)
 800133a:	6800      	ldr	r0, [r0, #0]
 800133c:	f001 fc23 	bl	8002b86 <HAL_UART_Receive>
		 	 /*size is of 2 byte*/
		 	 HAL_UART_Receive(BL_UART, size, 2, HAL_MAX_DELAY);
 8001340:	f107 011c 	add.w	r1, r7, #28
 8001344:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001348:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001350:	2202      	movs	r2, #2
 8001352:	6800      	ldr	r0, [r0, #0]
 8001354:	f001 fc17 	bl	8002b86 <HAL_UART_Receive>
		 	 /*use size from 1 byte to 2 byte*/
		 	 actual_size=*(uint16_t*)size;
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
		 	 /*receive DATA*/
		 	 HAL_UART_Receive(BL_UART, rxbuf, actual_size, HAL_MAX_DELAY);
 8001362:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 8001366:	f107 0120 	add.w	r1, r7, #32
 800136a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800136e:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	6800      	ldr	r0, [r0, #0]
 8001378:	f001 fc05 	bl	8002b86 <HAL_UART_Receive>
		 	 /*receive CRC*/
		 	 HAL_UART_Receive(BL_UART, &received_crc, 1, HAL_MAX_DELAY);
 800137c:	f107 011b 	add.w	r1, r7, #27
 8001380:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001384:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138c:	2201      	movs	r2, #1
 800138e:	6800      	ldr	r0, [r0, #0]
 8001390:	f001 fbf9 	bl	8002b86 <HAL_UART_Receive>

		 	uint8_t calculated_crc = xmodem_calcrc(rxbuf, actual_size);
 8001394:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff2a 	bl	80011f8 <xmodem_calcrc>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
		 	 if(calculated_crc != received_crc){
 80013aa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80013ae:	f2a3 4325 	subw	r3, r3, #1061	; 0x425
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f897 243d 	ldrb.w	r2, [r7, #1085]	; 0x43d
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d013      	beq.n	80013e4 <xmodem_receive+0x140>
		 		 //send NAK
		 		 response=NAK;
 80013bc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80013c0:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 80013c4:	2215      	movs	r2, #21
 80013c6:	701a      	strb	r2, [r3, #0]
		 		 HAL_UART_Transmit(BL_UART, &response, 1, HAL_MAX_DELAY);
 80013c8:	f107 011a 	add.w	r1, r7, #26
 80013cc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80013d0:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d8:	2201      	movs	r2, #1
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	f001 fb41 	bl	8002a62 <HAL_UART_Transmit>
		 		 return XMODEM_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e064      	b.n	80014ae <xmodem_receive+0x20a>
		 	 }
		 	 else
		 	 {
		 		//send NAK
		 		response=ACK;
 80013e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80013e8:	f2a3 4326 	subw	r3, r3, #1062	; 0x426
 80013ec:	2206      	movs	r2, #6
 80013ee:	701a      	strb	r2, [r3, #0]
		 		HAL_UART_Transmit(BL_UART, &response, 1, HAL_MAX_DELAY);
 80013f0:	f107 011a 	add.w	r1, r7, #26
 80013f4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80013f8:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001400:	2201      	movs	r2, #1
 8001402:	6800      	ldr	r0, [r0, #0]
 8001404:	f001 fb2d 	bl	8002a62 <HAL_UART_Transmit>
		 	 }
		 	 /*flash memory*/
		 	 bootloader_write_bin_to_memory(rxbuf,actual_size);
 8001408:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb2a 	bl	8000a6c <bootloader_write_bin_to_memory>

#ifdef DEBUG_XMODEM
		 	/*debug*/
		 	char temp[12];
		 	sprintf(temp,"send=%d\n\r",packet_number);
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <xmodem_receive+0x214>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4926      	ldr	r1, [pc, #152]	; (80014bc <xmodem_receive+0x218>)
 8001424:	4618      	mov	r0, r3
 8001426:	f001 ff73 	bl	8003310 <siprintf>
		 	HAL_UART_Transmit(BL_UART, temp, strlen(temp), HAL_MAX_DELAY);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe fece 	bl	80001d0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 010c 	add.w	r1, r7, #12
 800143c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001440:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001448:	6800      	ldr	r0, [r0, #0]
 800144a:	f001 fb0a 	bl	8002a62 <HAL_UART_Transmit>
 800144e:	e02e      	b.n	80014ae <xmodem_receive+0x20a>
	 		/*debug end*/
#endif
		 	break;

	 case EOT:
		 bootloader_update_signature_app_version(huart5);
 8001450:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001454:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	f7ff fbc9 	bl	8000bf0 <bootloader_update_signature_app_version>
		 bootloader_update_signature_set_flag(huart5);
 800145e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001462:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f7ff fb80 	bl	8000b6c <bootloader_update_signature_set_flag>
		 /*Receive of EOT will jump to user app*/
#ifdef DEBUG_XMODEM
		 HAL_UART_Transmit(BL_UART, "Jump to user", 15, HAL_MAX_DELAY);
 800146c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001470:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	220f      	movs	r2, #15
 800147a:	4911      	ldr	r1, [pc, #68]	; (80014c0 <xmodem_receive+0x21c>)
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	f001 faf0 	bl	8002a62 <HAL_UART_Transmit>
#endif
		 if(bootloader_jump_to_user_code(BL_UART) == BL_ERROR){
 8001482:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001486:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f7ff fa86 	bl	800099c <bootloader_jump_to_user_code>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d10b      	bne.n	80014ae <xmodem_receive+0x20a>
			 HAL_UART_Transmit(BL_UART, "ERROR", strlen("ERROR"), HAL_MAX_DELAY);
 8001496:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800149a:	f2a3 403c 	subw	r0, r3, #1084	; 0x43c
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a2:	2205      	movs	r2, #5
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <xmodem_receive+0x220>)
 80014a6:	6800      	ldr	r0, [r0, #0]
 80014a8:	f001 fadb 	bl	8002a62 <HAL_UART_Transmit>
			 while(1);
 80014ac:	e7fe      	b.n	80014ac <xmodem_receive+0x208>
		 }

	 }
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001a0 	.word	0x200001a0
 80014bc:	08003c58 	.word	0x08003c58
 80014c0:	08003c64 	.word	0x08003c64
 80014c4:	08003c74 	.word	0x08003c74

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ce:	490e      	ldr	r1, [pc, #56]	; (8001508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e4:	4c0b      	ldr	r4, [pc, #44]	; (8001514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f2:	f7ff fe6f 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f001 fed1 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fc23 	bl	8000d44 <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800150c:	08003cd8 	.word	0x08003cd8
  ldr r2, =_sbss
 8001510:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001514:	200001d8 	.word	0x200001d8

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f90d 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fd50 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f917 	bl	80017b2 <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f000 f8ed 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000004 	.word	0x20000004
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	200001a4 	.word	0x200001a4

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200001a4 	.word	0x200001a4

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff47 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff5c 	bl	8001648 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffb0 	bl	8001720 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_FLASH_Program+0xa0>)
 80017e0:	7e1b      	ldrb	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_FLASH_Program+0x1e>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e03b      	b.n	8001862 <HAL_FLASH_Program+0x96>
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_FLASH_Program+0xa0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f4:	f000 f870 	bl	80018d8 <FLASH_WaitForLastOperation>
 80017f8:	4603      	mov	r3, r0
 80017fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d12b      	bne.n	800185a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001808:	783b      	ldrb	r3, [r7, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	68b8      	ldr	r0, [r7, #8]
 800180e:	f000 f91b 	bl	8001a48 <FLASH_Program_Byte>
 8001812:	e016      	b.n	8001842 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d105      	bne.n	8001826 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800181a:	883b      	ldrh	r3, [r7, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f000 f8ee 	bl	8001a00 <FLASH_Program_HalfWord>
 8001824:	e00d      	b.n	8001842 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d105      	bne.n	8001838 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f000 f8c3 	bl	80019bc <FLASH_Program_Word>
 8001836:	e004      	b.n	8001842 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f000 f88b 	bl	8001958 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001846:	f000 f847 	bl	80018d8 <FLASH_WaitForLastOperation>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_FLASH_Program+0xa4>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_FLASH_Program+0xa4>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_FLASH_Program+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001a8 	.word	0x200001a8
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_FLASH_Unlock+0x38>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	da0b      	bge.n	800189e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_FLASH_Unlock+0x38>)
 8001888:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_FLASH_Unlock+0x3c>)
 800188a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_FLASH_Unlock+0x38>)
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_FLASH_Unlock+0x40>)
 8001890:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_FLASH_Unlock+0x38>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	da01      	bge.n	800189e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800189e:	79fb      	ldrb	r3, [r7, #7]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	45670123 	.word	0x45670123
 80018b4:	cdef89ab 	.word	0xcdef89ab

080018b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_FLASH_Lock+0x1c>)
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_FLASH_Lock+0x1c>)
 80018c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <FLASH_WaitForLastOperation+0x78>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80018ea:	f7ff fe7d 	bl	80015e8 <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80018f0:	e010      	b.n	8001914 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f8:	d00c      	beq.n	8001914 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <FLASH_WaitForLastOperation+0x38>
 8001900:	f7ff fe72 	bl	80015e8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	d201      	bcs.n	8001914 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e019      	b.n	8001948 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <FLASH_WaitForLastOperation+0x7c>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e8      	bne.n	80018f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <FLASH_WaitForLastOperation+0x7c>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <FLASH_WaitForLastOperation+0x7c>)
 800192e:	2201      	movs	r2, #1
 8001930:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <FLASH_WaitForLastOperation+0x7c>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800193e:	f000 f8a5 	bl	8001a8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
  
}  
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001a8 	.word	0x200001a8
 8001954:	40023c00 	.word	0x40023c00

08001958 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 8001976:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800197a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <FLASH_Program_DoubleWord+0x60>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800198e:	f3bf 8f6f 	isb	sy
}
 8001992:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	000a      	movs	r2, r1
 80019a2:	2300      	movs	r3, #0
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	3104      	adds	r1, #4
 80019a8:	4613      	mov	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40023c00 	.word	0x40023c00

080019bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <FLASH_Program_Word+0x40>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <FLASH_Program_Word+0x40>)
 80019cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <FLASH_Program_Word+0x40>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <FLASH_Program_Word+0x40>)
 80019d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <FLASH_Program_Word+0x40>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <FLASH_Program_Word+0x40>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <FLASH_Program_HalfWord+0x44>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	801a      	strh	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <FLASH_Program_Byte+0x40>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001aa6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001aaa:	2210      	movs	r2, #16
 8001aac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001ac4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001ac8:	2220      	movs	r2, #32
 8001aca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001ae2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001b00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <FLASH_SetErrorCode+0xa8>)
 8001b1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <FLASH_SetErrorCode+0xa4>)
 8001b22:	2202      	movs	r2, #2
 8001b24:	60da      	str	r2, [r3, #12]
  }
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	200001a8 	.word	0x200001a8

08001b38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_FLASHEx_Erase+0xd8>)
 8001b4c:	7e1b      	ldrb	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_FLASHEx_Erase+0x1e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e058      	b.n	8001c08 <HAL_FLASHEx_Erase+0xd0>
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_FLASHEx_Erase+0xd8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b60:	f7ff feba 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d148      	bne.n	8001c00 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b74:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d115      	bne.n	8001baa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f844 	bl	8001c18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b94:	f7ff fea0 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_FLASHEx_Erase+0xdc>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <HAL_FLASHEx_Erase+0xdc>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	6113      	str	r3, [r2, #16]
 8001ba8:	e028      	b.n	8001bfc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e01c      	b.n	8001bec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68b8      	ldr	r0, [r7, #8]
 8001bbc:	f000 f850 	bl	8001c60 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bc4:	f7ff fe88 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_FLASHEx_Erase+0xdc>)
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_FLASHEx_Erase+0xdc>)
 8001bd2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001bd6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	601a      	str	r2, [r3, #0]
          break;
 8001be4:	e00a      	b.n	8001bfc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3da      	bcc.n	8001bb2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001bfc:	f000 f878 	bl	8001cf0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_FLASHEx_Erase+0xd8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	761a      	strb	r2, [r3, #24]

  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200001a8 	.word	0x200001a8
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4313      	orrs	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <FLASH_MassErase+0x44>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6113      	str	r3, [r2, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e010      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d103      	bne.n	8001c8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e009      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d103      	bne.n	8001c98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e002      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	490f      	ldr	r1, [pc, #60]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6113      	str	r3, [r2, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d017      	beq.n	8001d30 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <FLASH_FlushCaches+0x88>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e16b      	b.n	8002070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 815a 	bne.w	800206a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80b4 	beq.w	800206a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_GPIO_Init+0x310>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x314>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02b      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x318>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d025      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x31c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01f      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x320>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d019      	beq.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0x216>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <HAL_GPIO_Init+0x212>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <HAL_GPIO_Init+0x20e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_GPIO_Init+0x20a>
 8001f82:	2307      	movs	r3, #7
 8001f84:	e00e      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f86:	2308      	movs	r3, #8
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_GPIO_Init+0x310>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x334>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f ae90 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002100:	e003      	b.n	800210a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	619a      	str	r2, [r3, #24]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e267      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d075      	beq.n	8002222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b82      	ldr	r3, [pc, #520]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e242      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x74>
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b70      	ldr	r3, [pc, #448]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6f      	ldr	r2, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6c      	ldr	r2, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 80021b0:	4b69      	ldr	r3, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a68      	ldr	r2, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fa0a 	bl	80015e8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fa06 	bl	80015e8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e207      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff f9f6 	bl	80015e8 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f9f2 	bl	80015e8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1f3      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002246:	4b44      	ldr	r3, [pc, #272]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c7      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x244>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff f9ab 	bl	80015e8 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff f9a7 	bl	80015e8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a8      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4925      	ldr	r1, [pc, #148]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_OscConfig+0x244>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff f98a 	bl	80015e8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff f986 	bl	80015e8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e187      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d036      	beq.n	8002370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x248>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff f96a 	bl	80015e8 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff f966 	bl	80015e8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e167      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x240>)
 800232c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x200>
 8002336:	e01b      	b.n	8002370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_OscConfig+0x248>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f953 	bl	80015e8 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00e      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002346:	f7ff f94f 	bl	80015e8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d907      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e150      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002358:	40023800 	.word	0x40023800
 800235c:	42470000 	.word	0x42470000
 8002360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ea      	bne.n	8002346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8097 	beq.w	80024ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b81      	ldr	r3, [pc, #516]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a7c      	ldr	r2, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <HAL_RCC_OscConfig+0x474>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b74      	ldr	r3, [pc, #464]	; (800258c <HAL_RCC_OscConfig+0x474>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a73      	ldr	r2, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x474>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f90f 	bl	80015e8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff f90b 	bl	80015e8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e10c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x474>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x2ea>
 80023f4:	4b64      	ldr	r3, [pc, #400]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a63      	ldr	r2, [pc, #396]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x30c>
 800240a:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a5e      	ldr	r2, [pc, #376]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a5b      	ldr	r2, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002424:	4b58      	ldr	r3, [pc, #352]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a54      	ldr	r2, [pc, #336]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff f8d0 	bl	80015e8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff f8cc 	bl	80015e8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0cb      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ee      	beq.n	800244c <HAL_RCC_OscConfig+0x334>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7ff f8ba 	bl	80015e8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7ff f8b6 	bl	80015e8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0b5      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	4a38      	ldr	r2, [pc, #224]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a1 	beq.w	80025f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d05c      	beq.n	800257c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d141      	bne.n	800254e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_OscConfig+0x478>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f88a 	bl	80015e8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f886 	bl	80015e8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e087      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	491b      	ldr	r1, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x478>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff f85f 	bl	80015e8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff f85b 	bl	80015e8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e05c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x416>
 800254c:	e054      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f848 	bl	80015e8 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f844 	bl	80015e8 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e045      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x444>
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e038      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000
 8002590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x4ec>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d028      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d121      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cc      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d90c      	bls.n	8002644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800267e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d044      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e067      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4934      	ldr	r1, [pc, #208]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe ff76 	bl	80015e8 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe ff72 	bl	80015e8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e04f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d20c      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fed6 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08003c7c 	.word	0x08003c7c
 80027cc:	20000004 	.word	0x20000004
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d8:	b090      	sub	sp, #64	; 0x40
 80027da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
 80027e0:	2300      	movs	r3, #0
 80027e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e4:	2300      	movs	r3, #0
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d00d      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	f200 80a1 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x16c>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
 8002802:	2b04      	cmp	r3, #4
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x3a>
 8002806:	e09b      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_GetSysClockFreq+0x184>)
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800280c:	e09b      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280e:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002812:	e098      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281e:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d028      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	627a      	str	r2, [r7, #36]	; 0x24
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800283c:	2100      	movs	r1, #0
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 8002840:	fb03 f201 	mul.w	r2, r3, r1
 8002844:	2300      	movs	r3, #0
 8002846:	fb00 f303 	mul.w	r3, r0, r3
 800284a:	4413      	add	r3, r2
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 800284e:	fba0 1202 	umull	r1, r2, r0, r2
 8002852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002854:	460a      	mov	r2, r1
 8002856:	62ba      	str	r2, [r7, #40]	; 0x28
 8002858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285a:	4413      	add	r3, r2
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	2200      	movs	r2, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	61fa      	str	r2, [r7, #28]
 8002866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800286e:	f7fd ff13 	bl	8000698 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4613      	mov	r3, r2
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287a:	e053      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	617a      	str	r2, [r7, #20]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800288e:	f04f 0b00 	mov.w	fp, #0
 8002892:	4652      	mov	r2, sl
 8002894:	465b      	mov	r3, fp
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	0159      	lsls	r1, r3, #5
 80028a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a4:	0150      	lsls	r0, r2, #5
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ebb2 080a 	subs.w	r8, r2, sl
 80028ae:	eb63 090b 	sbc.w	r9, r3, fp
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028c6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ca:	eb63 0509 	sbc.w	r5, r3, r9
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	00eb      	lsls	r3, r5, #3
 80028d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028dc:	00e2      	lsls	r2, r4, #3
 80028de:	4614      	mov	r4, r2
 80028e0:	461d      	mov	r5, r3
 80028e2:	eb14 030a 	adds.w	r3, r4, sl
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	eb45 030b 	adc.w	r3, r5, fp
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fa:	4629      	mov	r1, r5
 80028fc:	028b      	lsls	r3, r1, #10
 80028fe:	4621      	mov	r1, r4
 8002900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002904:	4621      	mov	r1, r4
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	2200      	movs	r2, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002918:	f7fd febe 	bl	8000698 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	3301      	adds	r3, #1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800293e:	e002      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetSysClockFreq+0x184>)
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002948:	4618      	mov	r0, r3
 800294a:	3740      	adds	r7, #64	; 0x40
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	017d7840 	.word	0x017d7840

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCC_GetHCLKFreq+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08003c8c 	.word	0x08003c8c

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0b5b      	lsrs	r3, r3, #13
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08003c8c 	.word	0x08003c8c

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03f      	b.n	8002a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fb28 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f9cb 	bl	8002da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d17c      	bne.n	8002b7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_UART_Transmit+0x2c>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e075      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Transmit+0x3e>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e06e      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fd97 	bl	80015e8 <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002af4:	e02a      	b.n	8002b4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f8e2 	bl	8002cca <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e007      	b.n	8002b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1cf      	bne.n	8002af6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8b2 	bl	8002cca <UART_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e006      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b08a      	sub	sp, #40	; 0x28
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	f040 808c 	bne.w	8002cc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_UART_Receive+0x2e>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e084      	b.n	8002cc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Receive+0x40>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e07d      	b.n	8002cc2 <HAL_UART_Receive+0x13c>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2222      	movs	r2, #34	; 0x22
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fd01 	bl	80015e8 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d108      	bne.n	8002c10 <HAL_UART_Receive+0x8a>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	e003      	b.n	8002c18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c20:	e043      	b.n	8002caa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f84c 	bl	8002cca <UART_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e042      	b.n	8002cc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	3302      	adds	r3, #2
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e01f      	b.n	8002c9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d007      	beq.n	8002c76 <HAL_UART_Receive+0xf0>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_UART_Receive+0xfe>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e008      	b.n	8002c96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1b6      	bne.n	8002c22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b090      	sub	sp, #64	; 0x40
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cda:	e050      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce2:	d04c      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8002cea:	f7fe fc7d 	bl	80015e8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d241      	bcs.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e5      	bne.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4e:	623a      	str	r2, [r7, #32]
 8002d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	69f9      	ldr	r1, [r7, #28]
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e5      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d09f      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3740      	adds	r7, #64	; 0x40
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b0c0      	sub	sp, #256	; 0x100
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	68d9      	ldr	r1, [r3, #12]
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	ea40 0301 	orr.w	r3, r0, r1
 8002dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e00:	f021 010c 	bic.w	r1, r1, #12
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	6999      	ldr	r1, [r3, #24]
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	ea40 0301 	orr.w	r3, r0, r1
 8002e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <UART_SetConfig+0x2cc>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0xa0>
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <UART_SetConfig+0x2d0>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d104      	bne.n	8002e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7ff fdaa 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e50:	e003      	b.n	8002e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e52:	f7ff fd91 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8002e56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	f040 810c 	bne.w	8003080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e82:	415b      	adcs	r3, r3
 8002e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	eb12 0801 	adds.w	r8, r2, r1
 8002e90:	4629      	mov	r1, r5
 8002e92:	eb43 0901 	adc.w	r9, r3, r1
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eaa:	4690      	mov	r8, r2
 8002eac:	4699      	mov	r9, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	eb18 0303 	adds.w	r3, r8, r3
 8002eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eb8:	462b      	mov	r3, r5
 8002eba:	eb49 0303 	adc.w	r3, r9, r3
 8002ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	18db      	adds	r3, r3, r3
 8002eda:	653b      	str	r3, [r7, #80]	; 0x50
 8002edc:	4613      	mov	r3, r2
 8002ede:	eb42 0303 	adc.w	r3, r2, r3
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002eec:	f7fd fbd4 	bl	8000698 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <UART_SetConfig+0x2d4>)
 8002ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	011c      	lsls	r4, r3, #4
 8002efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f10:	4642      	mov	r2, r8
 8002f12:	464b      	mov	r3, r9
 8002f14:	1891      	adds	r1, r2, r2
 8002f16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f18:	415b      	adcs	r3, r3
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f20:	4641      	mov	r1, r8
 8002f22:	eb12 0a01 	adds.w	sl, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb43 0b01 	adc.w	fp, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f40:	4692      	mov	sl, r2
 8002f42:	469b      	mov	fp, r3
 8002f44:	4643      	mov	r3, r8
 8002f46:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	eb4b 0303 	adc.w	r3, fp, r3
 8002f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	18db      	adds	r3, r3, r3
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
 8002f72:	4613      	mov	r3, r2
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f82:	f7fd fb89 	bl	8000698 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <UART_SetConfig+0x2d4>)
 8002f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2264      	movs	r2, #100	; 0x64
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	1acb      	subs	r3, r1, r3
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <UART_SetConfig+0x2d4>)
 8002fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb0:	441c      	add	r4, r3
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	1891      	adds	r1, r2, r2
 8002fca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fcc:	415b      	adcs	r3, r3
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	1851      	adds	r1, r2, r1
 8002fd8:	6339      	str	r1, [r7, #48]	; 0x30
 8002fda:	4649      	mov	r1, r9
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fec:	4659      	mov	r1, fp
 8002fee:	00cb      	lsls	r3, r1, #3
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	00ca      	lsls	r2, r1, #3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	4642      	mov	r2, r8
 8003002:	189b      	adds	r3, r3, r2
 8003004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003008:	464b      	mov	r3, r9
 800300a:	460a      	mov	r2, r1
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800303e:	f7fd fb2b 	bl	8000698 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <UART_SetConfig+0x2d4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <UART_SetConfig+0x2d4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4422      	add	r2, r4
 800306e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003070:	e105      	b.n	800327e <UART_SetConfig+0x4d6>
 8003072:	bf00      	nop
 8003074:	40011000 	.word	0x40011000
 8003078:	40011400 	.word	0x40011400
 800307c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800308a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800308e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003092:	4642      	mov	r2, r8
 8003094:	464b      	mov	r3, r9
 8003096:	1891      	adds	r1, r2, r2
 8003098:	6239      	str	r1, [r7, #32]
 800309a:	415b      	adcs	r3, r3
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a2:	4641      	mov	r1, r8
 80030a4:	1854      	adds	r4, r2, r1
 80030a6:	4649      	mov	r1, r9
 80030a8:	eb43 0501 	adc.w	r5, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030c8:	464b      	mov	r3, r9
 80030ca:	eb45 0303 	adc.w	r3, r5, r3
 80030ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ee:	4629      	mov	r1, r5
 80030f0:	008b      	lsls	r3, r1, #2
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030f8:	4621      	mov	r1, r4
 80030fa:	008a      	lsls	r2, r1, #2
 80030fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003100:	f7fd faca 	bl	8000698 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b60      	ldr	r3, [pc, #384]	; (800328c <UART_SetConfig+0x4e4>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	011c      	lsls	r4, r3, #4
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800311c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	61b9      	str	r1, [r7, #24]
 800312c:	415b      	adcs	r3, r3
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003134:	4641      	mov	r1, r8
 8003136:	1851      	adds	r1, r2, r1
 8003138:	6139      	str	r1, [r7, #16]
 800313a:	4649      	mov	r1, r9
 800313c:	414b      	adcs	r3, r1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800314c:	4659      	mov	r1, fp
 800314e:	00cb      	lsls	r3, r1, #3
 8003150:	4651      	mov	r1, sl
 8003152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003156:	4651      	mov	r1, sl
 8003158:	00ca      	lsls	r2, r1, #3
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	4603      	mov	r3, r0
 8003160:	4642      	mov	r2, r8
 8003162:	189b      	adds	r3, r3, r2
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	67bb      	str	r3, [r7, #120]	; 0x78
 800317e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800318c:	4649      	mov	r1, r9
 800318e:	008b      	lsls	r3, r1, #2
 8003190:	4641      	mov	r1, r8
 8003192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003196:	4641      	mov	r1, r8
 8003198:	008a      	lsls	r2, r1, #2
 800319a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800319e:	f7fd fa7b 	bl	8000698 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <UART_SetConfig+0x4e4>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	3332      	adds	r3, #50	; 0x32
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <UART_SetConfig+0x4e4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c6:	441c      	add	r4, r3
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	2200      	movs	r2, #0
 80031ce:	673b      	str	r3, [r7, #112]	; 0x70
 80031d0:	677a      	str	r2, [r7, #116]	; 0x74
 80031d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031d6:	4642      	mov	r2, r8
 80031d8:	464b      	mov	r3, r9
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	415b      	adcs	r3, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e6:	4641      	mov	r1, r8
 80031e8:	1851      	adds	r1, r2, r1
 80031ea:	6039      	str	r1, [r7, #0]
 80031ec:	4649      	mov	r1, r9
 80031ee:	414b      	adcs	r3, r1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031fe:	4659      	mov	r1, fp
 8003200:	00cb      	lsls	r3, r1, #3
 8003202:	4651      	mov	r1, sl
 8003204:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003208:	4651      	mov	r1, sl
 800320a:	00ca      	lsls	r2, r1, #3
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	4603      	mov	r3, r0
 8003212:	4642      	mov	r2, r8
 8003214:	189b      	adds	r3, r3, r2
 8003216:	66bb      	str	r3, [r7, #104]	; 0x68
 8003218:	464b      	mov	r3, r9
 800321a:	460a      	mov	r2, r1
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	663b      	str	r3, [r7, #96]	; 0x60
 800322c:	667a      	str	r2, [r7, #100]	; 0x64
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800323a:	4649      	mov	r1, r9
 800323c:	008b      	lsls	r3, r1, #2
 800323e:	4641      	mov	r1, r8
 8003240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003244:	4641      	mov	r1, r8
 8003246:	008a      	lsls	r2, r1, #2
 8003248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800324c:	f7fd fa24 	bl	8000698 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <UART_SetConfig+0x4e4>)
 8003256:	fba3 1302 	umull	r1, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2164      	movs	r1, #100	; 0x64
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	3332      	adds	r3, #50	; 0x32
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <UART_SetConfig+0x4e4>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4422      	add	r2, r4
 800327c:	609a      	str	r2, [r3, #8]
}
 800327e:	bf00      	nop
 8003280:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000010 	.word	0x20000010

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4d0d      	ldr	r5, [pc, #52]	; (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2600      	movs	r6, #0
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4d0b      	ldr	r5, [pc, #44]	; (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	; (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 fc8e 	bl	8003bd0 <_init>
 80032b4:	1b64      	subs	r4, r4, r5
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2600      	movs	r6, #0
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003cd0 	.word	0x08003cd0
 80032d8:	08003cd0 	.word	0x08003cd0
 80032dc:	08003cd0 	.word	0x08003cd0
 80032e0:	08003cd4 	.word	0x08003cd4

080032e4 <memcpy>:
 80032e4:	440a      	add	r2, r1
 80032e6:	4291      	cmp	r1, r2
 80032e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80032ec:	d100      	bne.n	80032f0 <memcpy+0xc>
 80032ee:	4770      	bx	lr
 80032f0:	b510      	push	{r4, lr}
 80032f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032fa:	4291      	cmp	r1, r2
 80032fc:	d1f9      	bne.n	80032f2 <memcpy+0xe>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <memset>:
 8003300:	4402      	add	r2, r0
 8003302:	4603      	mov	r3, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <siprintf>:
 8003310:	b40e      	push	{r1, r2, r3}
 8003312:	b500      	push	{lr}
 8003314:	b09c      	sub	sp, #112	; 0x70
 8003316:	ab1d      	add	r3, sp, #116	; 0x74
 8003318:	9002      	str	r0, [sp, #8]
 800331a:	9006      	str	r0, [sp, #24]
 800331c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003320:	4809      	ldr	r0, [pc, #36]	; (8003348 <siprintf+0x38>)
 8003322:	9107      	str	r1, [sp, #28]
 8003324:	9104      	str	r1, [sp, #16]
 8003326:	4909      	ldr	r1, [pc, #36]	; (800334c <siprintf+0x3c>)
 8003328:	f853 2b04 	ldr.w	r2, [r3], #4
 800332c:	9105      	str	r1, [sp, #20]
 800332e:	6800      	ldr	r0, [r0, #0]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	a902      	add	r1, sp, #8
 8003334:	f000 f868 	bl	8003408 <_svfiprintf_r>
 8003338:	9b02      	ldr	r3, [sp, #8]
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	b01c      	add	sp, #112	; 0x70
 8003340:	f85d eb04 	ldr.w	lr, [sp], #4
 8003344:	b003      	add	sp, #12
 8003346:	4770      	bx	lr
 8003348:	20000010 	.word	0x20000010
 800334c:	ffff0208 	.word	0xffff0208

08003350 <__ssputs_r>:
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	688e      	ldr	r6, [r1, #8]
 8003356:	429e      	cmp	r6, r3
 8003358:	4682      	mov	sl, r0
 800335a:	460c      	mov	r4, r1
 800335c:	4690      	mov	r8, r2
 800335e:	461f      	mov	r7, r3
 8003360:	d838      	bhi.n	80033d4 <__ssputs_r+0x84>
 8003362:	898a      	ldrh	r2, [r1, #12]
 8003364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003368:	d032      	beq.n	80033d0 <__ssputs_r+0x80>
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	6909      	ldr	r1, [r1, #16]
 800336e:	eba5 0901 	sub.w	r9, r5, r1
 8003372:	6965      	ldr	r5, [r4, #20]
 8003374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800337c:	3301      	adds	r3, #1
 800337e:	444b      	add	r3, r9
 8003380:	106d      	asrs	r5, r5, #1
 8003382:	429d      	cmp	r5, r3
 8003384:	bf38      	it	cc
 8003386:	461d      	movcc	r5, r3
 8003388:	0553      	lsls	r3, r2, #21
 800338a:	d531      	bpl.n	80033f0 <__ssputs_r+0xa0>
 800338c:	4629      	mov	r1, r5
 800338e:	f000 fb55 	bl	8003a3c <_malloc_r>
 8003392:	4606      	mov	r6, r0
 8003394:	b950      	cbnz	r0, 80033ac <__ssputs_r+0x5c>
 8003396:	230c      	movs	r3, #12
 8003398:	f8ca 3000 	str.w	r3, [sl]
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a2:	81a3      	strh	r3, [r4, #12]
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ac:	6921      	ldr	r1, [r4, #16]
 80033ae:	464a      	mov	r2, r9
 80033b0:	f7ff ff98 	bl	80032e4 <memcpy>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	6126      	str	r6, [r4, #16]
 80033c2:	6165      	str	r5, [r4, #20]
 80033c4:	444e      	add	r6, r9
 80033c6:	eba5 0509 	sub.w	r5, r5, r9
 80033ca:	6026      	str	r6, [r4, #0]
 80033cc:	60a5      	str	r5, [r4, #8]
 80033ce:	463e      	mov	r6, r7
 80033d0:	42be      	cmp	r6, r7
 80033d2:	d900      	bls.n	80033d6 <__ssputs_r+0x86>
 80033d4:	463e      	mov	r6, r7
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	4632      	mov	r2, r6
 80033da:	4641      	mov	r1, r8
 80033dc:	f000 faa8 	bl	8003930 <memmove>
 80033e0:	68a3      	ldr	r3, [r4, #8]
 80033e2:	1b9b      	subs	r3, r3, r6
 80033e4:	60a3      	str	r3, [r4, #8]
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	4433      	add	r3, r6
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	2000      	movs	r0, #0
 80033ee:	e7db      	b.n	80033a8 <__ssputs_r+0x58>
 80033f0:	462a      	mov	r2, r5
 80033f2:	f000 fb97 	bl	8003b24 <_realloc_r>
 80033f6:	4606      	mov	r6, r0
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d1e1      	bne.n	80033c0 <__ssputs_r+0x70>
 80033fc:	6921      	ldr	r1, [r4, #16]
 80033fe:	4650      	mov	r0, sl
 8003400:	f000 fab0 	bl	8003964 <_free_r>
 8003404:	e7c7      	b.n	8003396 <__ssputs_r+0x46>
	...

08003408 <_svfiprintf_r>:
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	4698      	mov	r8, r3
 800340e:	898b      	ldrh	r3, [r1, #12]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	b09d      	sub	sp, #116	; 0x74
 8003414:	4607      	mov	r7, r0
 8003416:	460d      	mov	r5, r1
 8003418:	4614      	mov	r4, r2
 800341a:	d50e      	bpl.n	800343a <_svfiprintf_r+0x32>
 800341c:	690b      	ldr	r3, [r1, #16]
 800341e:	b963      	cbnz	r3, 800343a <_svfiprintf_r+0x32>
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	f000 fb0b 	bl	8003a3c <_malloc_r>
 8003426:	6028      	str	r0, [r5, #0]
 8003428:	6128      	str	r0, [r5, #16]
 800342a:	b920      	cbnz	r0, 8003436 <_svfiprintf_r+0x2e>
 800342c:	230c      	movs	r3, #12
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003434:	e0d1      	b.n	80035da <_svfiprintf_r+0x1d2>
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	616b      	str	r3, [r5, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	2320      	movs	r3, #32
 8003440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003444:	f8cd 800c 	str.w	r8, [sp, #12]
 8003448:	2330      	movs	r3, #48	; 0x30
 800344a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035f4 <_svfiprintf_r+0x1ec>
 800344e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003452:	f04f 0901 	mov.w	r9, #1
 8003456:	4623      	mov	r3, r4
 8003458:	469a      	mov	sl, r3
 800345a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800345e:	b10a      	cbz	r2, 8003464 <_svfiprintf_r+0x5c>
 8003460:	2a25      	cmp	r2, #37	; 0x25
 8003462:	d1f9      	bne.n	8003458 <_svfiprintf_r+0x50>
 8003464:	ebba 0b04 	subs.w	fp, sl, r4
 8003468:	d00b      	beq.n	8003482 <_svfiprintf_r+0x7a>
 800346a:	465b      	mov	r3, fp
 800346c:	4622      	mov	r2, r4
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ff6d 	bl	8003350 <__ssputs_r>
 8003476:	3001      	adds	r0, #1
 8003478:	f000 80aa 	beq.w	80035d0 <_svfiprintf_r+0x1c8>
 800347c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800347e:	445a      	add	r2, fp
 8003480:	9209      	str	r2, [sp, #36]	; 0x24
 8003482:	f89a 3000 	ldrb.w	r3, [sl]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a2 	beq.w	80035d0 <_svfiprintf_r+0x1c8>
 800348c:	2300      	movs	r3, #0
 800348e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003496:	f10a 0a01 	add.w	sl, sl, #1
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	9307      	str	r3, [sp, #28]
 800349e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a2:	931a      	str	r3, [sp, #104]	; 0x68
 80034a4:	4654      	mov	r4, sl
 80034a6:	2205      	movs	r2, #5
 80034a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ac:	4851      	ldr	r0, [pc, #324]	; (80035f4 <_svfiprintf_r+0x1ec>)
 80034ae:	f7fc fe97 	bl	80001e0 <memchr>
 80034b2:	9a04      	ldr	r2, [sp, #16]
 80034b4:	b9d8      	cbnz	r0, 80034ee <_svfiprintf_r+0xe6>
 80034b6:	06d0      	lsls	r0, r2, #27
 80034b8:	bf44      	itt	mi
 80034ba:	2320      	movmi	r3, #32
 80034bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034c0:	0711      	lsls	r1, r2, #28
 80034c2:	bf44      	itt	mi
 80034c4:	232b      	movmi	r3, #43	; 0x2b
 80034c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d015      	beq.n	80034fe <_svfiprintf_r+0xf6>
 80034d2:	9a07      	ldr	r2, [sp, #28]
 80034d4:	4654      	mov	r4, sl
 80034d6:	2000      	movs	r0, #0
 80034d8:	f04f 0c0a 	mov.w	ip, #10
 80034dc:	4621      	mov	r1, r4
 80034de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e2:	3b30      	subs	r3, #48	; 0x30
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d94e      	bls.n	8003586 <_svfiprintf_r+0x17e>
 80034e8:	b1b0      	cbz	r0, 8003518 <_svfiprintf_r+0x110>
 80034ea:	9207      	str	r2, [sp, #28]
 80034ec:	e014      	b.n	8003518 <_svfiprintf_r+0x110>
 80034ee:	eba0 0308 	sub.w	r3, r0, r8
 80034f2:	fa09 f303 	lsl.w	r3, r9, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	9304      	str	r3, [sp, #16]
 80034fa:	46a2      	mov	sl, r4
 80034fc:	e7d2      	b.n	80034a4 <_svfiprintf_r+0x9c>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	1d19      	adds	r1, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfbb      	ittet	lt
 800350a:	425b      	neglt	r3, r3
 800350c:	f042 0202 	orrlt.w	r2, r2, #2
 8003510:	9307      	strge	r3, [sp, #28]
 8003512:	9307      	strlt	r3, [sp, #28]
 8003514:	bfb8      	it	lt
 8003516:	9204      	strlt	r2, [sp, #16]
 8003518:	7823      	ldrb	r3, [r4, #0]
 800351a:	2b2e      	cmp	r3, #46	; 0x2e
 800351c:	d10c      	bne.n	8003538 <_svfiprintf_r+0x130>
 800351e:	7863      	ldrb	r3, [r4, #1]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d135      	bne.n	8003590 <_svfiprintf_r+0x188>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	9203      	str	r2, [sp, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	bfb8      	it	lt
 8003530:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003534:	3402      	adds	r4, #2
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003604 <_svfiprintf_r+0x1fc>
 800353c:	7821      	ldrb	r1, [r4, #0]
 800353e:	2203      	movs	r2, #3
 8003540:	4650      	mov	r0, sl
 8003542:	f7fc fe4d 	bl	80001e0 <memchr>
 8003546:	b140      	cbz	r0, 800355a <_svfiprintf_r+0x152>
 8003548:	2340      	movs	r3, #64	; 0x40
 800354a:	eba0 000a 	sub.w	r0, r0, sl
 800354e:	fa03 f000 	lsl.w	r0, r3, r0
 8003552:	9b04      	ldr	r3, [sp, #16]
 8003554:	4303      	orrs	r3, r0
 8003556:	3401      	adds	r4, #1
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800355e:	4826      	ldr	r0, [pc, #152]	; (80035f8 <_svfiprintf_r+0x1f0>)
 8003560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003564:	2206      	movs	r2, #6
 8003566:	f7fc fe3b 	bl	80001e0 <memchr>
 800356a:	2800      	cmp	r0, #0
 800356c:	d038      	beq.n	80035e0 <_svfiprintf_r+0x1d8>
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <_svfiprintf_r+0x1f4>)
 8003570:	bb1b      	cbnz	r3, 80035ba <_svfiprintf_r+0x1b2>
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	3307      	adds	r3, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	3308      	adds	r3, #8
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003580:	4433      	add	r3, r6
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
 8003584:	e767      	b.n	8003456 <_svfiprintf_r+0x4e>
 8003586:	fb0c 3202 	mla	r2, ip, r2, r3
 800358a:	460c      	mov	r4, r1
 800358c:	2001      	movs	r0, #1
 800358e:	e7a5      	b.n	80034dc <_svfiprintf_r+0xd4>
 8003590:	2300      	movs	r3, #0
 8003592:	3401      	adds	r4, #1
 8003594:	9305      	str	r3, [sp, #20]
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 0c0a 	mov.w	ip, #10
 800359c:	4620      	mov	r0, r4
 800359e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a2:	3a30      	subs	r2, #48	; 0x30
 80035a4:	2a09      	cmp	r2, #9
 80035a6:	d903      	bls.n	80035b0 <_svfiprintf_r+0x1a8>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0c5      	beq.n	8003538 <_svfiprintf_r+0x130>
 80035ac:	9105      	str	r1, [sp, #20]
 80035ae:	e7c3      	b.n	8003538 <_svfiprintf_r+0x130>
 80035b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80035b4:	4604      	mov	r4, r0
 80035b6:	2301      	movs	r3, #1
 80035b8:	e7f0      	b.n	800359c <_svfiprintf_r+0x194>
 80035ba:	ab03      	add	r3, sp, #12
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	462a      	mov	r2, r5
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <_svfiprintf_r+0x1f8>)
 80035c2:	a904      	add	r1, sp, #16
 80035c4:	4638      	mov	r0, r7
 80035c6:	f3af 8000 	nop.w
 80035ca:	1c42      	adds	r2, r0, #1
 80035cc:	4606      	mov	r6, r0
 80035ce:	d1d6      	bne.n	800357e <_svfiprintf_r+0x176>
 80035d0:	89ab      	ldrh	r3, [r5, #12]
 80035d2:	065b      	lsls	r3, r3, #25
 80035d4:	f53f af2c 	bmi.w	8003430 <_svfiprintf_r+0x28>
 80035d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035da:	b01d      	add	sp, #116	; 0x74
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	462a      	mov	r2, r5
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <_svfiprintf_r+0x1f8>)
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	4638      	mov	r0, r7
 80035ec:	f000 f87a 	bl	80036e4 <_printf_i>
 80035f0:	e7eb      	b.n	80035ca <_svfiprintf_r+0x1c2>
 80035f2:	bf00      	nop
 80035f4:	08003c94 	.word	0x08003c94
 80035f8:	08003c9e 	.word	0x08003c9e
 80035fc:	00000000 	.word	0x00000000
 8003600:	08003351 	.word	0x08003351
 8003604:	08003c9a 	.word	0x08003c9a

08003608 <_printf_common>:
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	4616      	mov	r6, r2
 800360e:	4699      	mov	r9, r3
 8003610:	688a      	ldr	r2, [r1, #8]
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003618:	4293      	cmp	r3, r2
 800361a:	bfb8      	it	lt
 800361c:	4613      	movlt	r3, r2
 800361e:	6033      	str	r3, [r6, #0]
 8003620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003624:	4607      	mov	r7, r0
 8003626:	460c      	mov	r4, r1
 8003628:	b10a      	cbz	r2, 800362e <_printf_common+0x26>
 800362a:	3301      	adds	r3, #1
 800362c:	6033      	str	r3, [r6, #0]
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	0699      	lsls	r1, r3, #26
 8003632:	bf42      	ittt	mi
 8003634:	6833      	ldrmi	r3, [r6, #0]
 8003636:	3302      	addmi	r3, #2
 8003638:	6033      	strmi	r3, [r6, #0]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d106      	bne.n	8003650 <_printf_common+0x48>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	6832      	ldr	r2, [r6, #0]
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	42ab      	cmp	r3, r5
 800364e:	dc26      	bgt.n	800369e <_printf_common+0x96>
 8003650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003654:	1e13      	subs	r3, r2, #0
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	bf18      	it	ne
 800365a:	2301      	movne	r3, #1
 800365c:	0692      	lsls	r2, r2, #26
 800365e:	d42b      	bmi.n	80036b8 <_printf_common+0xb0>
 8003660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003664:	4649      	mov	r1, r9
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	3001      	adds	r0, #1
 800366c:	d01e      	beq.n	80036ac <_printf_common+0xa4>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	68e5      	ldr	r5, [r4, #12]
 8003672:	6832      	ldr	r2, [r6, #0]
 8003674:	f003 0306 	and.w	r3, r3, #6
 8003678:	2b04      	cmp	r3, #4
 800367a:	bf08      	it	eq
 800367c:	1aad      	subeq	r5, r5, r2
 800367e:	68a3      	ldr	r3, [r4, #8]
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	bf0c      	ite	eq
 8003684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003688:	2500      	movne	r5, #0
 800368a:	4293      	cmp	r3, r2
 800368c:	bfc4      	itt	gt
 800368e:	1a9b      	subgt	r3, r3, r2
 8003690:	18ed      	addgt	r5, r5, r3
 8003692:	2600      	movs	r6, #0
 8003694:	341a      	adds	r4, #26
 8003696:	42b5      	cmp	r5, r6
 8003698:	d11a      	bne.n	80036d0 <_printf_common+0xc8>
 800369a:	2000      	movs	r0, #0
 800369c:	e008      	b.n	80036b0 <_printf_common+0xa8>
 800369e:	2301      	movs	r3, #1
 80036a0:	4652      	mov	r2, sl
 80036a2:	4649      	mov	r1, r9
 80036a4:	4638      	mov	r0, r7
 80036a6:	47c0      	blx	r8
 80036a8:	3001      	adds	r0, #1
 80036aa:	d103      	bne.n	80036b4 <_printf_common+0xac>
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b4:	3501      	adds	r5, #1
 80036b6:	e7c6      	b.n	8003646 <_printf_common+0x3e>
 80036b8:	18e1      	adds	r1, r4, r3
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	2030      	movs	r0, #48	; 0x30
 80036be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c2:	4422      	add	r2, r4
 80036c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036cc:	3302      	adds	r3, #2
 80036ce:	e7c7      	b.n	8003660 <_printf_common+0x58>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4622      	mov	r2, r4
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d0e6      	beq.n	80036ac <_printf_common+0xa4>
 80036de:	3601      	adds	r6, #1
 80036e0:	e7d9      	b.n	8003696 <_printf_common+0x8e>
	...

080036e4 <_printf_i>:
 80036e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	7e0f      	ldrb	r7, [r1, #24]
 80036ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036ec:	2f78      	cmp	r7, #120	; 0x78
 80036ee:	4691      	mov	r9, r2
 80036f0:	4680      	mov	r8, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	469a      	mov	sl, r3
 80036f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036fa:	d807      	bhi.n	800370c <_printf_i+0x28>
 80036fc:	2f62      	cmp	r7, #98	; 0x62
 80036fe:	d80a      	bhi.n	8003716 <_printf_i+0x32>
 8003700:	2f00      	cmp	r7, #0
 8003702:	f000 80d8 	beq.w	80038b6 <_printf_i+0x1d2>
 8003706:	2f58      	cmp	r7, #88	; 0x58
 8003708:	f000 80a3 	beq.w	8003852 <_printf_i+0x16e>
 800370c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003714:	e03a      	b.n	800378c <_printf_i+0xa8>
 8003716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800371a:	2b15      	cmp	r3, #21
 800371c:	d8f6      	bhi.n	800370c <_printf_i+0x28>
 800371e:	a101      	add	r1, pc, #4	; (adr r1, 8003724 <_printf_i+0x40>)
 8003720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003724:	0800377d 	.word	0x0800377d
 8003728:	08003791 	.word	0x08003791
 800372c:	0800370d 	.word	0x0800370d
 8003730:	0800370d 	.word	0x0800370d
 8003734:	0800370d 	.word	0x0800370d
 8003738:	0800370d 	.word	0x0800370d
 800373c:	08003791 	.word	0x08003791
 8003740:	0800370d 	.word	0x0800370d
 8003744:	0800370d 	.word	0x0800370d
 8003748:	0800370d 	.word	0x0800370d
 800374c:	0800370d 	.word	0x0800370d
 8003750:	0800389d 	.word	0x0800389d
 8003754:	080037c1 	.word	0x080037c1
 8003758:	0800387f 	.word	0x0800387f
 800375c:	0800370d 	.word	0x0800370d
 8003760:	0800370d 	.word	0x0800370d
 8003764:	080038bf 	.word	0x080038bf
 8003768:	0800370d 	.word	0x0800370d
 800376c:	080037c1 	.word	0x080037c1
 8003770:	0800370d 	.word	0x0800370d
 8003774:	0800370d 	.word	0x0800370d
 8003778:	08003887 	.word	0x08003887
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	602a      	str	r2, [r5, #0]
 8003784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800378c:	2301      	movs	r3, #1
 800378e:	e0a3      	b.n	80038d8 <_printf_i+0x1f4>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	6829      	ldr	r1, [r5, #0]
 8003794:	0606      	lsls	r6, r0, #24
 8003796:	f101 0304 	add.w	r3, r1, #4
 800379a:	d50a      	bpl.n	80037b2 <_printf_i+0xce>
 800379c:	680e      	ldr	r6, [r1, #0]
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	2e00      	cmp	r6, #0
 80037a2:	da03      	bge.n	80037ac <_printf_i+0xc8>
 80037a4:	232d      	movs	r3, #45	; 0x2d
 80037a6:	4276      	negs	r6, r6
 80037a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ac:	485e      	ldr	r0, [pc, #376]	; (8003928 <_printf_i+0x244>)
 80037ae:	230a      	movs	r3, #10
 80037b0:	e019      	b.n	80037e6 <_printf_i+0x102>
 80037b2:	680e      	ldr	r6, [r1, #0]
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037ba:	bf18      	it	ne
 80037bc:	b236      	sxthne	r6, r6
 80037be:	e7ef      	b.n	80037a0 <_printf_i+0xbc>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	1d19      	adds	r1, r3, #4
 80037c6:	6029      	str	r1, [r5, #0]
 80037c8:	0601      	lsls	r1, r0, #24
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0xec>
 80037cc:	681e      	ldr	r6, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0xf2>
 80037d0:	0646      	lsls	r6, r0, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0xe8>
 80037d4:	881e      	ldrh	r6, [r3, #0]
 80037d6:	4854      	ldr	r0, [pc, #336]	; (8003928 <_printf_i+0x244>)
 80037d8:	2f6f      	cmp	r7, #111	; 0x6f
 80037da:	bf0c      	ite	eq
 80037dc:	2308      	moveq	r3, #8
 80037de:	230a      	movne	r3, #10
 80037e0:	2100      	movs	r1, #0
 80037e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037e6:	6865      	ldr	r5, [r4, #4]
 80037e8:	60a5      	str	r5, [r4, #8]
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	bfa2      	ittt	ge
 80037ee:	6821      	ldrge	r1, [r4, #0]
 80037f0:	f021 0104 	bicge.w	r1, r1, #4
 80037f4:	6021      	strge	r1, [r4, #0]
 80037f6:	b90e      	cbnz	r6, 80037fc <_printf_i+0x118>
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	d04d      	beq.n	8003898 <_printf_i+0x1b4>
 80037fc:	4615      	mov	r5, r2
 80037fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003802:	fb03 6711 	mls	r7, r3, r1, r6
 8003806:	5dc7      	ldrb	r7, [r0, r7]
 8003808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800380c:	4637      	mov	r7, r6
 800380e:	42bb      	cmp	r3, r7
 8003810:	460e      	mov	r6, r1
 8003812:	d9f4      	bls.n	80037fe <_printf_i+0x11a>
 8003814:	2b08      	cmp	r3, #8
 8003816:	d10b      	bne.n	8003830 <_printf_i+0x14c>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	07de      	lsls	r6, r3, #31
 800381c:	d508      	bpl.n	8003830 <_printf_i+0x14c>
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	6861      	ldr	r1, [r4, #4]
 8003822:	4299      	cmp	r1, r3
 8003824:	bfde      	ittt	le
 8003826:	2330      	movle	r3, #48	; 0x30
 8003828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800382c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003830:	1b52      	subs	r2, r2, r5
 8003832:	6122      	str	r2, [r4, #16]
 8003834:	f8cd a000 	str.w	sl, [sp]
 8003838:	464b      	mov	r3, r9
 800383a:	aa03      	add	r2, sp, #12
 800383c:	4621      	mov	r1, r4
 800383e:	4640      	mov	r0, r8
 8003840:	f7ff fee2 	bl	8003608 <_printf_common>
 8003844:	3001      	adds	r0, #1
 8003846:	d14c      	bne.n	80038e2 <_printf_i+0x1fe>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800384c:	b004      	add	sp, #16
 800384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003852:	4835      	ldr	r0, [pc, #212]	; (8003928 <_printf_i+0x244>)
 8003854:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003858:	6829      	ldr	r1, [r5, #0]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003860:	6029      	str	r1, [r5, #0]
 8003862:	061d      	lsls	r5, r3, #24
 8003864:	d514      	bpl.n	8003890 <_printf_i+0x1ac>
 8003866:	07df      	lsls	r7, r3, #31
 8003868:	bf44      	itt	mi
 800386a:	f043 0320 	orrmi.w	r3, r3, #32
 800386e:	6023      	strmi	r3, [r4, #0]
 8003870:	b91e      	cbnz	r6, 800387a <_printf_i+0x196>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	f023 0320 	bic.w	r3, r3, #32
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	2310      	movs	r3, #16
 800387c:	e7b0      	b.n	80037e0 <_printf_i+0xfc>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f043 0320 	orr.w	r3, r3, #32
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	2378      	movs	r3, #120	; 0x78
 8003888:	4828      	ldr	r0, [pc, #160]	; (800392c <_printf_i+0x248>)
 800388a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800388e:	e7e3      	b.n	8003858 <_printf_i+0x174>
 8003890:	0659      	lsls	r1, r3, #25
 8003892:	bf48      	it	mi
 8003894:	b2b6      	uxthmi	r6, r6
 8003896:	e7e6      	b.n	8003866 <_printf_i+0x182>
 8003898:	4615      	mov	r5, r2
 800389a:	e7bb      	b.n	8003814 <_printf_i+0x130>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	6826      	ldr	r6, [r4, #0]
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	1d18      	adds	r0, r3, #4
 80038a4:	6028      	str	r0, [r5, #0]
 80038a6:	0635      	lsls	r5, r6, #24
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	d501      	bpl.n	80038b0 <_printf_i+0x1cc>
 80038ac:	6019      	str	r1, [r3, #0]
 80038ae:	e002      	b.n	80038b6 <_printf_i+0x1d2>
 80038b0:	0670      	lsls	r0, r6, #25
 80038b2:	d5fb      	bpl.n	80038ac <_printf_i+0x1c8>
 80038b4:	8019      	strh	r1, [r3, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	4615      	mov	r5, r2
 80038bc:	e7ba      	b.n	8003834 <_printf_i+0x150>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	602a      	str	r2, [r5, #0]
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	2100      	movs	r1, #0
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7fc fc88 	bl	80001e0 <memchr>
 80038d0:	b108      	cbz	r0, 80038d6 <_printf_i+0x1f2>
 80038d2:	1b40      	subs	r0, r0, r5
 80038d4:	6060      	str	r0, [r4, #4]
 80038d6:	6863      	ldr	r3, [r4, #4]
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	2300      	movs	r3, #0
 80038dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e0:	e7a8      	b.n	8003834 <_printf_i+0x150>
 80038e2:	6923      	ldr	r3, [r4, #16]
 80038e4:	462a      	mov	r2, r5
 80038e6:	4649      	mov	r1, r9
 80038e8:	4640      	mov	r0, r8
 80038ea:	47d0      	blx	sl
 80038ec:	3001      	adds	r0, #1
 80038ee:	d0ab      	beq.n	8003848 <_printf_i+0x164>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	079b      	lsls	r3, r3, #30
 80038f4:	d413      	bmi.n	800391e <_printf_i+0x23a>
 80038f6:	68e0      	ldr	r0, [r4, #12]
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	4298      	cmp	r0, r3
 80038fc:	bfb8      	it	lt
 80038fe:	4618      	movlt	r0, r3
 8003900:	e7a4      	b.n	800384c <_printf_i+0x168>
 8003902:	2301      	movs	r3, #1
 8003904:	4632      	mov	r2, r6
 8003906:	4649      	mov	r1, r9
 8003908:	4640      	mov	r0, r8
 800390a:	47d0      	blx	sl
 800390c:	3001      	adds	r0, #1
 800390e:	d09b      	beq.n	8003848 <_printf_i+0x164>
 8003910:	3501      	adds	r5, #1
 8003912:	68e3      	ldr	r3, [r4, #12]
 8003914:	9903      	ldr	r1, [sp, #12]
 8003916:	1a5b      	subs	r3, r3, r1
 8003918:	42ab      	cmp	r3, r5
 800391a:	dcf2      	bgt.n	8003902 <_printf_i+0x21e>
 800391c:	e7eb      	b.n	80038f6 <_printf_i+0x212>
 800391e:	2500      	movs	r5, #0
 8003920:	f104 0619 	add.w	r6, r4, #25
 8003924:	e7f5      	b.n	8003912 <_printf_i+0x22e>
 8003926:	bf00      	nop
 8003928:	08003ca5 	.word	0x08003ca5
 800392c:	08003cb6 	.word	0x08003cb6

08003930 <memmove>:
 8003930:	4288      	cmp	r0, r1
 8003932:	b510      	push	{r4, lr}
 8003934:	eb01 0402 	add.w	r4, r1, r2
 8003938:	d902      	bls.n	8003940 <memmove+0x10>
 800393a:	4284      	cmp	r4, r0
 800393c:	4623      	mov	r3, r4
 800393e:	d807      	bhi.n	8003950 <memmove+0x20>
 8003940:	1e43      	subs	r3, r0, #1
 8003942:	42a1      	cmp	r1, r4
 8003944:	d008      	beq.n	8003958 <memmove+0x28>
 8003946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800394a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800394e:	e7f8      	b.n	8003942 <memmove+0x12>
 8003950:	4402      	add	r2, r0
 8003952:	4601      	mov	r1, r0
 8003954:	428a      	cmp	r2, r1
 8003956:	d100      	bne.n	800395a <memmove+0x2a>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800395e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003962:	e7f7      	b.n	8003954 <memmove+0x24>

08003964 <_free_r>:
 8003964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003966:	2900      	cmp	r1, #0
 8003968:	d044      	beq.n	80039f4 <_free_r+0x90>
 800396a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396e:	9001      	str	r0, [sp, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f1a1 0404 	sub.w	r4, r1, #4
 8003976:	bfb8      	it	lt
 8003978:	18e4      	addlt	r4, r4, r3
 800397a:	f000 f913 	bl	8003ba4 <__malloc_lock>
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <_free_r+0x94>)
 8003980:	9801      	ldr	r0, [sp, #4]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x30>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	b003      	add	sp, #12
 800398c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003990:	f000 b90e 	b.w	8003bb0 <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x46>
 8003998:	6825      	ldr	r5, [r4, #0]
 800399a:	1961      	adds	r1, r4, r5
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1949      	addeq	r1, r1, r5
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x22>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x50>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x46>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1855      	adds	r5, r2, r1
 80039b8:	42a5      	cmp	r5, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x70>
 80039bc:	6824      	ldr	r4, [r4, #0]
 80039be:	4421      	add	r1, r4
 80039c0:	1854      	adds	r4, r2, r1
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x26>
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	4421      	add	r1, r4
 80039d0:	6011      	str	r1, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x26>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x78>
 80039d6:	230c      	movs	r3, #12
 80039d8:	6003      	str	r3, [r0, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x26>
 80039dc:	6825      	ldr	r5, [r4, #0]
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1949      	addeq	r1, r1, r5
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x26>
 80039f4:	b003      	add	sp, #12
 80039f6:	bd30      	pop	{r4, r5, pc}
 80039f8:	200001c8 	.word	0x200001c8

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0e      	ldr	r6, [pc, #56]	; (8003a38 <sbrk_aligned+0x3c>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 f8bc 	bl	8003b84 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 f8b7 	bl	8003b84 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d00a      	beq.n	8003a30 <sbrk_aligned+0x34>
 8003a1a:	1cc4      	adds	r4, r0, #3
 8003a1c:	f024 0403 	bic.w	r4, r4, #3
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d007      	beq.n	8003a34 <sbrk_aligned+0x38>
 8003a24:	1a21      	subs	r1, r4, r0
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 f8ac 	bl	8003b84 <_sbrk_r>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d101      	bne.n	8003a34 <sbrk_aligned+0x38>
 8003a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a34:	4620      	mov	r0, r4
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	200001cc 	.word	0x200001cc

08003a3c <_malloc_r>:
 8003a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a40:	1ccd      	adds	r5, r1, #3
 8003a42:	f025 0503 	bic.w	r5, r5, #3
 8003a46:	3508      	adds	r5, #8
 8003a48:	2d0c      	cmp	r5, #12
 8003a4a:	bf38      	it	cc
 8003a4c:	250c      	movcc	r5, #12
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	4607      	mov	r7, r0
 8003a52:	db01      	blt.n	8003a58 <_malloc_r+0x1c>
 8003a54:	42a9      	cmp	r1, r5
 8003a56:	d905      	bls.n	8003a64 <_malloc_r+0x28>
 8003a58:	230c      	movs	r3, #12
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a64:	4e2e      	ldr	r6, [pc, #184]	; (8003b20 <_malloc_r+0xe4>)
 8003a66:	f000 f89d 	bl	8003ba4 <__malloc_lock>
 8003a6a:	6833      	ldr	r3, [r6, #0]
 8003a6c:	461c      	mov	r4, r3
 8003a6e:	bb34      	cbnz	r4, 8003abe <_malloc_r+0x82>
 8003a70:	4629      	mov	r1, r5
 8003a72:	4638      	mov	r0, r7
 8003a74:	f7ff ffc2 	bl	80039fc <sbrk_aligned>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	d14d      	bne.n	8003b1a <_malloc_r+0xde>
 8003a7e:	6834      	ldr	r4, [r6, #0]
 8003a80:	4626      	mov	r6, r4
 8003a82:	2e00      	cmp	r6, #0
 8003a84:	d140      	bne.n	8003b08 <_malloc_r+0xcc>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	4631      	mov	r1, r6
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	eb04 0803 	add.w	r8, r4, r3
 8003a90:	f000 f878 	bl	8003b84 <_sbrk_r>
 8003a94:	4580      	cmp	r8, r0
 8003a96:	d13a      	bne.n	8003b0e <_malloc_r+0xd2>
 8003a98:	6821      	ldr	r1, [r4, #0]
 8003a9a:	3503      	adds	r5, #3
 8003a9c:	1a6d      	subs	r5, r5, r1
 8003a9e:	f025 0503 	bic.w	r5, r5, #3
 8003aa2:	3508      	adds	r5, #8
 8003aa4:	2d0c      	cmp	r5, #12
 8003aa6:	bf38      	it	cc
 8003aa8:	250c      	movcc	r5, #12
 8003aaa:	4629      	mov	r1, r5
 8003aac:	4638      	mov	r0, r7
 8003aae:	f7ff ffa5 	bl	80039fc <sbrk_aligned>
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d02b      	beq.n	8003b0e <_malloc_r+0xd2>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	442b      	add	r3, r5
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	e00e      	b.n	8003adc <_malloc_r+0xa0>
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	1b52      	subs	r2, r2, r5
 8003ac2:	d41e      	bmi.n	8003b02 <_malloc_r+0xc6>
 8003ac4:	2a0b      	cmp	r2, #11
 8003ac6:	d916      	bls.n	8003af6 <_malloc_r+0xba>
 8003ac8:	1961      	adds	r1, r4, r5
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	6025      	str	r5, [r4, #0]
 8003ace:	bf18      	it	ne
 8003ad0:	6059      	strne	r1, [r3, #4]
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	bf08      	it	eq
 8003ad6:	6031      	streq	r1, [r6, #0]
 8003ad8:	5162      	str	r2, [r4, r5]
 8003ada:	604b      	str	r3, [r1, #4]
 8003adc:	4638      	mov	r0, r7
 8003ade:	f104 060b 	add.w	r6, r4, #11
 8003ae2:	f000 f865 	bl	8003bb0 <__malloc_unlock>
 8003ae6:	f026 0607 	bic.w	r6, r6, #7
 8003aea:	1d23      	adds	r3, r4, #4
 8003aec:	1af2      	subs	r2, r6, r3
 8003aee:	d0b6      	beq.n	8003a5e <_malloc_r+0x22>
 8003af0:	1b9b      	subs	r3, r3, r6
 8003af2:	50a3      	str	r3, [r4, r2]
 8003af4:	e7b3      	b.n	8003a5e <_malloc_r+0x22>
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	bf0c      	ite	eq
 8003afc:	6032      	streq	r2, [r6, #0]
 8003afe:	605a      	strne	r2, [r3, #4]
 8003b00:	e7ec      	b.n	8003adc <_malloc_r+0xa0>
 8003b02:	4623      	mov	r3, r4
 8003b04:	6864      	ldr	r4, [r4, #4]
 8003b06:	e7b2      	b.n	8003a6e <_malloc_r+0x32>
 8003b08:	4634      	mov	r4, r6
 8003b0a:	6876      	ldr	r6, [r6, #4]
 8003b0c:	e7b9      	b.n	8003a82 <_malloc_r+0x46>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4638      	mov	r0, r7
 8003b14:	f000 f84c 	bl	8003bb0 <__malloc_unlock>
 8003b18:	e7a1      	b.n	8003a5e <_malloc_r+0x22>
 8003b1a:	6025      	str	r5, [r4, #0]
 8003b1c:	e7de      	b.n	8003adc <_malloc_r+0xa0>
 8003b1e:	bf00      	nop
 8003b20:	200001c8 	.word	0x200001c8

08003b24 <_realloc_r>:
 8003b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b28:	4680      	mov	r8, r0
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	460e      	mov	r6, r1
 8003b2e:	b921      	cbnz	r1, 8003b3a <_realloc_r+0x16>
 8003b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	4611      	mov	r1, r2
 8003b36:	f7ff bf81 	b.w	8003a3c <_malloc_r>
 8003b3a:	b92a      	cbnz	r2, 8003b48 <_realloc_r+0x24>
 8003b3c:	f7ff ff12 	bl	8003964 <_free_r>
 8003b40:	4625      	mov	r5, r4
 8003b42:	4628      	mov	r0, r5
 8003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b48:	f000 f838 	bl	8003bbc <_malloc_usable_size_r>
 8003b4c:	4284      	cmp	r4, r0
 8003b4e:	4607      	mov	r7, r0
 8003b50:	d802      	bhi.n	8003b58 <_realloc_r+0x34>
 8003b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b56:	d812      	bhi.n	8003b7e <_realloc_r+0x5a>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f7ff ff6e 	bl	8003a3c <_malloc_r>
 8003b60:	4605      	mov	r5, r0
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d0ed      	beq.n	8003b42 <_realloc_r+0x1e>
 8003b66:	42bc      	cmp	r4, r7
 8003b68:	4622      	mov	r2, r4
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	bf28      	it	cs
 8003b6e:	463a      	movcs	r2, r7
 8003b70:	f7ff fbb8 	bl	80032e4 <memcpy>
 8003b74:	4631      	mov	r1, r6
 8003b76:	4640      	mov	r0, r8
 8003b78:	f7ff fef4 	bl	8003964 <_free_r>
 8003b7c:	e7e1      	b.n	8003b42 <_realloc_r+0x1e>
 8003b7e:	4635      	mov	r5, r6
 8003b80:	e7df      	b.n	8003b42 <_realloc_r+0x1e>
	...

08003b84 <_sbrk_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	; (8003ba0 <_sbrk_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd faea 	bl	8001168 <_sbrk>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_sbrk_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_sbrk_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200001d0 	.word	0x200001d0

08003ba4 <__malloc_lock>:
 8003ba4:	4801      	ldr	r0, [pc, #4]	; (8003bac <__malloc_lock+0x8>)
 8003ba6:	f000 b811 	b.w	8003bcc <__retarget_lock_acquire_recursive>
 8003baa:	bf00      	nop
 8003bac:	200001d4 	.word	0x200001d4

08003bb0 <__malloc_unlock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_unlock+0x8>)
 8003bb2:	f000 b80c 	b.w	8003bce <__retarget_lock_release_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	200001d4 	.word	0x200001d4

08003bbc <_malloc_usable_size_r>:
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f18      	subs	r0, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfbc      	itt	lt
 8003bc6:	580b      	ldrlt	r3, [r1, r0]
 8003bc8:	18c0      	addlt	r0, r0, r3
 8003bca:	4770      	bx	lr

08003bcc <__retarget_lock_acquire_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_release_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
